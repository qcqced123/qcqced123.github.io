<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-08-09T14:17:27+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">AI/Business Study Log</title><subtitle>NLP, Marketing</subtitle><author><name>qcqced</name><email>qcqced123@gmail.com</email></author><entry><title type="html">🪢 [DeBERTa] DeBERTa: Decoding-Enhanced BERT with Disentangled-Attention</title><link href="http://localhost:4000/nlp/deberta" rel="alternate" type="text/html" title="🪢 [DeBERTa] DeBERTa: Decoding-Enhanced BERT with Disentangled-Attention" /><published>2023-08-04T00:00:00+09:00</published><updated>2023-08-05T02:00:00+09:00</updated><id>http://localhost:4000/nlp/DeBERTa</id><content type="html" xml:base="http://localhost:4000/nlp/deberta"><![CDATA[<h3 id="overview"><code class="language-plaintext highlighter-rouge">🔭 Overview</code></h3>

<p><code class="language-plaintext highlighter-rouge">DeBERTa</code>는 2020년 <code class="language-plaintext highlighter-rouge">Microsoft</code>가 <code class="language-plaintext highlighter-rouge">ICLR</code>에서 발표한 자연어 처리용 신경망 모델이다. <code class="language-plaintext highlighter-rouge">Disentangled Self-Attention</code>, <code class="language-plaintext highlighter-rouge">Enhanced Mask Decoder</code>라는 두가지 새로운 테크닉을 <code class="language-plaintext highlighter-rouge">BERT</code>, <code class="language-plaintext highlighter-rouge">RoBERTa</code>에 적용해 당시 <code class="language-plaintext highlighter-rouge">SOTA</code>를 달성했으며, 특히 영어처럼 문장에서 자리하는 위치에 따라 단어의 의미, 형태가 결정되는 굴절어 계열에 대한 성능이 좋아 꾸준히 사랑받고 있는 모델이다. 또한 인코딩 가능한 최대 시퀀스 길이가 <code class="language-plaintext highlighter-rouge">4096</code>으로 매우 긴 편 (<code class="language-plaintext highlighter-rouge">DeBERTa-V3-Large</code>) 에 속해, <code class="language-plaintext highlighter-rouge">Kaggle Competition</code>에서 자주 활용된다. 출시된지 2년이 넘도록 <code class="language-plaintext highlighter-rouge">SuperGLUE</code> 대시보드에서 꾸준히 상위권을 유지하고 있다는 점도 <code class="language-plaintext highlighter-rouge">DeBERTa</code>가 얼마나 잘 설계된 모델인지 알 수 있는 대목이다.</p>

<p>한편, <code class="language-plaintext highlighter-rouge">DeBERTa</code>의 설계 철학은 <code class="language-plaintext highlighter-rouge">Inductive Bias</code> 다. 간단하게 <code class="language-plaintext highlighter-rouge">Inductive Bias</code>란, 주어진 데이터로부터 일반화 성능을 높이기 위해 <code class="language-plaintext highlighter-rouge">"입력되는 데이터는 ~ 할 것이다"</code>, <code class="language-plaintext highlighter-rouge">"이런 특징을 갖고 있을 것이다"</code>와 같은 가정, 가중치, 가설 등을 기계학습 알고리즘에 적용하는 것을 말한다. <strong><a href="https://qcqced123.github.io/cv/vit"><code class="language-plaintext highlighter-rouge">ViT</code> 논문 리뷰</a></strong>에서도 밝혔듯, 퓨어한 <code class="language-plaintext highlighter-rouge">Self-Attention</code> 의 <code class="language-plaintext highlighter-rouge">Inductive Bias</code> 는 사실상 없으며, 전체 <code class="language-plaintext highlighter-rouge">Transformer</code> 구조 레벨에서 봐도 <code class="language-plaintext highlighter-rouge">Absolute Position Embedding</code>을 사용해 토큰의 위치 정보를 모델에 주입해주는 것이 그나마 약한 <code class="language-plaintext highlighter-rouge">Iniductive Bias</code>라고 볼 수 있다. 다른 포스팅에서는 분명 <code class="language-plaintext highlighter-rouge">Inductive Bias</code> 가 적기 때문에 자연어 처리에서 <code class="language-plaintext highlighter-rouge">Transformer</code> 가 성공을 거둘 수 있다고 해놓고 이게 지금 와서 말을 뒤집는다고 생각할 수 있다. 하지만 <code class="language-plaintext highlighter-rouge">Self-Attention</code>과 <code class="language-plaintext highlighter-rouge">Absolute Position Embedding</code>의 의미를 다시 한 번 상기해보면, <code class="language-plaintext highlighter-rouge">Inductive Bias</code> 추가를 주장하는 저자들의 생각이 꽤나 합리적이었음을 알 수 있게 된다. 구체적인 모델 구조를 파악하기 전에 먼저 <code class="language-plaintext highlighter-rouge">Inductive Bias</code> 추가가 왜 필요하며, 어떠한 가정이 필요한지 알아보자.</p>

<h3 id="inducitve-bias-in-deberta"><code class="language-plaintext highlighter-rouge">🪢 Inducitve Bias in DeBERTa</code></h3>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Absolute Position + Relative Position</code>을 모두 활용해 풍부하고 깊은 임베딩 추출</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">단어의 발생 순서</code> 임베딩과 <code class="language-plaintext highlighter-rouge">단어 분포 가설</code> 임베딩을 모두 추출하는 것을 목적으로 설계</strong></li>
</ul>

<p>본 논문 초록에는 다음과 같은 문장이 서술되어 있다.</p>

<p><code class="language-plaintext highlighter-rouge">motivated by the observation that the attention weight of a word pair depends on not only their contents but their relative positions. For example, the dependency between the words “deep” and “learning” is much stronger when they occur next to each other than when they occur in different sentences.</code></p>

<p>위의 두 문장이 <code class="language-plaintext highlighter-rouge">DeBERTa</code>의 <code class="language-plaintext highlighter-rouge">Inducitve Bias</code> 를 가장 잘 설명하고 있다고 생각한다. 저자가 추가를 주장하는 <code class="language-plaintext highlighter-rouge">Inductive Bias</code>란, <code class="language-plaintext highlighter-rouge">relative position</code> 정보라는 것과 기존 모델링으로는 <code class="language-plaintext highlighter-rouge">relative position</code>이 주는 문맥 정보 포착이 불가능하다는 사실을 알 수 있다.</p>

<p>그렇다면 <code class="language-plaintext highlighter-rouge">relative position</code> 가 제공하는 문맥 정보가 도대체 뭐길래 기존의 방식으로는 포착이 불가능하다는 것일까?? 자연어에서 포착 가능한 문맥들의 종류와 기존의 모델링 방식에 대한 정리부터 해보자. 여기서 말하는 기존 방식이란, 퓨어한 <code class="language-plaintext highlighter-rouge">Self-Attention</code>과 <code class="language-plaintext highlighter-rouge">Absolute Position Embedding</code> 을 사용하는 <code class="language-plaintext highlighter-rouge">Transformer-Encoder-Base</code>  모델(<code class="language-plaintext highlighter-rouge">BERT</code>, <code class="language-plaintext highlighter-rouge">RoBERTa</code>)을 뜻한다. 이번 포스팅에서는 <code class="language-plaintext highlighter-rouge">BERT</code>를 기준으로 설명하겠다.</p>

<h6 id="-types-of-embedding"><code class="language-plaintext highlighter-rouge">📚 Types of Embedding</code></h6>

<p><strong>먼저 현존하는 모든 임베딩(<code class="language-plaintext highlighter-rouge">벡터에 문맥을 주입하는</code>)기법들을 정리해보자. 다음과 같이 3가지 카테고리로 분류가 가능하다.</strong></p>

<ul>
  <li><strong>1) 단어의 빈도수:  시퀀스에서 사용된 토큰들의 빈도수를 측정(<code class="language-plaintext highlighter-rouge">Bag of words</code>)</strong></li>
  <li><strong>2) 단어의 발생 순서: <code class="language-plaintext highlighter-rouge">corpus</code> 내부의 특정 <code class="language-plaintext highlighter-rouge">sequence</code> 등장 빈도를 카운트(<code class="language-plaintext highlighter-rouge">N-Gram</code>), 주어진 시퀀스를 가지고 다음 시점에 등장할 토큰을 맞추는 방식(<code class="language-plaintext highlighter-rouge">LM</code>)</strong></li>
  <li><strong>3) 단어 분포 가설 :  단어의 의미는 주변 문맥에 의해 결정된다는 가정, 어떤 단어 쌍이 자주 같이 등장하는지 카운트해 <code class="language-plaintext highlighter-rouge">PMI</code>를 측정하는 방식(<code class="language-plaintext highlighter-rouge">Word2Vec</code>)</strong></li>
</ul>

<p>기존의 모델링 방식은 어디에 포함될까?? <code class="language-plaintext highlighter-rouge">BERT</code> 는 대분류 상 신경망에 포함되고, <code class="language-plaintext highlighter-rouge">Language Modeling</code>을 통해 시퀀스를 학습한다는 점 그리고 <code class="language-plaintext highlighter-rouge">Self-Attention</code>과 <code class="language-plaintext highlighter-rouge">Absolute Position Embedding</code> 을 사용한다는 점에서 2번, <code class="language-plaintext highlighter-rouge">단어의 발생 순서</code> 에 포함된다고 볼 수 있다. <code class="language-plaintext highlighter-rouge">Absolute Position Embedding</code> 과 <code class="language-plaintext highlighter-rouge">Self-Attention</code>의 사용이 퓨어한 <code class="language-plaintext highlighter-rouge">BERT</code>가 분류상 2번이라는 사실을 뒷받침하는 증거라는 점에서 의아할 수 있다. 하지만 잘 생각해보자.</p>

<p><code class="language-plaintext highlighter-rouge">Absolute Position Embedding</code>은 주어진 시퀀스의 길이를 측정한 뒤, 나열된 순서 그대로 <code class="language-plaintext highlighter-rouge">forward</code>하게 <code class="language-plaintext highlighter-rouge">0</code>부터 <code class="language-plaintext highlighter-rouge">길이-1</code>의 번호를 개별 토큰에 할당한다. 다시 말해, 단어가 시퀀스에서 발생한 순서를 수학적으로 표현해 모델에 주입한다는 의미가 된다. <code class="language-plaintext highlighter-rouge">Self-Attention</code>은 <code class="language-plaintext highlighter-rouge">Absolute Position Embedding</code> 정보가 주입된 시퀀스 전체를 한 번에 병렬 처리한다. 따라서 충분히 <code class="language-plaintext highlighter-rouge">BERT</code> 같은 <code class="language-plaintext highlighter-rouge">Self-Attention</code>, <code class="language-plaintext highlighter-rouge">Absolute Position Embedding</code> 기반 모델을 2번에 분류할 수 있겠다.</p>

<p>한편, 혹자는 <code class="language-plaintext highlighter-rouge">"BERT는 MLM 을 사용하는데 Language Modeling을 한다고 하는게 맞나요"</code>라고 말할 수 있다. 하지만 <code class="language-plaintext highlighter-rouge">MLM</code> 역시 대분류 상 <code class="language-plaintext highlighter-rouge">Language Modeling</code> 기법에 속한다. <strong>다만, <code class="language-plaintext highlighter-rouge">Bi-Directional</code>하게 문맥을 파악하고 <code class="language-plaintext highlighter-rouge">LM</code>을 하니까 정말 엄밀히 따지면 3번의 속성도 어느 정도 있다고 보는게 무리는 아니라 생각한다.</strong> <code class="language-plaintext highlighter-rouge">MLM</code> 사용으로 더 많은 정보를 포착해 임베딩을 만들기 때문에 초기 <code class="language-plaintext highlighter-rouge">BERT</code>가 <code class="language-plaintext highlighter-rouge">GPT</code>보다 <code class="language-plaintext highlighter-rouge">NLU</code>에서 상대적으로 강점을 가졌던 것 아닐까 싶다.</p>

<h6 id="-relative-position-embedding"><code class="language-plaintext highlighter-rouge">🔢 Relative Position Embedding</code></h6>

<p>이제 <code class="language-plaintext highlighter-rouge">Relative Position Embedding</code>이 무엇이고, 도대체 어떤 문맥 정보를 포착한다는 것인지 알아보자. <code class="language-plaintext highlighter-rouge">Relative Position Embedding</code> 이란, 시퀀스 내부 토큰 사이의 위치 관계 표현을 통해 토큰 사이의 <code class="language-plaintext highlighter-rouge">relation</code>을 <code class="language-plaintext highlighter-rouge">pairwise</code>하게 학습하는 위치 임베딩 기법을 말한다. 일반적으로 상대 위치 관계는 서로 다른 두 토큰의 시퀀스 인덱스 값의 차를 이용해 나타낸다. 포착하는 문맥 정보는 예시와 함깨 설명하겠다. 딥러닝이라는 단어는 영어로 <code class="language-plaintext highlighter-rouge">Deep Learning</code> 이다. 두 단어를 합쳐놓고 보면 <code class="language-plaintext highlighter-rouge">신경망을 사용하는 머신러닝 기법의 한 종류</code>라는 의미를 갖겠지만, 따로 따로 보면 <code class="language-plaintext highlighter-rouge">깊은</code>, <code class="language-plaintext highlighter-rouge">배움</code>이라는 개별적인 의미로 나뉜다.</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">1) The Deep Learning is the Best Technique in Computer Science</code></strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">2) I’m learning how to swim in the deep ocean</code></strong></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Deep</code>과 <code class="language-plaintext highlighter-rouge">Learning</code>의 상대적인 거리에 주목하면서 두 문장을 해석해보자. 첫 번째 문장에서 두 단어는 이웃하게 위치해 <code class="language-plaintext highlighter-rouge">신경망을 사용하는 머신러닝 기법의 한 종류</code> 라는 의미를 만들어내고 있다. 한편 두 번째 문장에서 두 단어는 띄어쓰기 기준 5개의 토큰만큼 떨어져 위치해 각각 <code class="language-plaintext highlighter-rouge">배움</code>, <code class="language-plaintext highlighter-rouge">깊은</code> 이라는 의미를 만들어 내고 있다. 이처럼 개별 토큰 사이의 위치 관계에 따라서 파생되는 문맥적 정보를 포착하려는 의도로 설계된 기법이 바로 <code class="language-plaintext highlighter-rouge">Relative Position Embedding</code> 이다.</p>

<p><code class="language-plaintext highlighter-rouge">pairwise</code> 하게 <code class="language-plaintext highlighter-rouge">relation</code> 을 포착한다는 점으로 보아 <code class="language-plaintext highlighter-rouge">skip-gram</code>의 <code class="language-plaintext highlighter-rouge">negative sampling</code>과 매우 유사한 느낌의 정보를 포착할 것이라고 예상되며 카테고리 분류상 <strong>3번, <code class="language-plaintext highlighter-rouge">단어 분포 가설</code></strong>에 포함시킬 수 있을 것 같다. (필자의 개인적인 의견이니 이 부분에 대한 다른 의견이 있다면 꼭 댓글에 적어주시면 감사하겠습니당🥰).</p>

<p><code class="language-plaintext highlighter-rouge">Relative Position Embedding</code> 을 실제 어떻게 코드로 구현하는지, 본 논문에서는 위치 관계를 어떻게 정의했는지 <code class="language-plaintext highlighter-rouge">Absolute Position Embedding</code>와 비교를 통해 알아보자. 다음과 같은 두 개의 문장이 있을 때, 개별 위치 임베딩 방식이 문장의 위치 정보를 인코딩하는 과정을 파이썬 코드로 작성해봤다. 함께 살펴보자.</p>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">A) I love studying deep learning so much</code></strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">B) I love deep cheeze burguer so much</code></strong></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Absolute Position Embedding
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">max_length</span> <span class="o">=</span> <span class="mi">7</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">position_embedding</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Embedding</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span> <span class="c1"># [max_seq, dim_model]
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">pos_x</span> <span class="o">=</span> <span class="n">position_embedding</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="n">max_length</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">pos_x</span><span class="p">,</span> <span class="n">pos_x</span><span class="p">.</span><span class="n">shape</span>
<span class="p">(</span><span class="n">tensor</span><span class="p">([[</span> <span class="mf">0.4027</span><span class="p">,</span>  <span class="mf">0.9331</span><span class="p">,</span>  <span class="mf">1.0556</span><span class="p">,</span>  <span class="p">...,</span> <span class="o">-</span><span class="mf">1.7370</span><span class="p">,</span>  <span class="mf">0.7799</span><span class="p">,</span>  <span class="mf">1.9851</span><span class="p">],</span>  <span class="c1"># A,B의 0번 토큰: I
</span>         <span class="p">[</span><span class="o">-</span><span class="mf">0.2206</span><span class="p">,</span>  <span class="mf">2.1024</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.6055</span><span class="p">,</span>  <span class="p">...,</span> <span class="o">-</span><span class="mf">1.1342</span><span class="p">,</span>  <span class="mf">1.3956</span><span class="p">,</span>  <span class="mf">0.9017</span><span class="p">],</span>  <span class="c1"># A,B의 1번 토큰: love
</span>         <span class="p">[</span><span class="o">-</span><span class="mf">0.9560</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.0426</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.8587</span><span class="p">,</span>  <span class="p">...,</span> <span class="o">-</span><span class="mf">0.9406</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.1467</span><span class="p">,</span>  <span class="mf">0.1762</span><span class="p">],</span>  <span class="c1"># A,B의 2번 토큰: studying, deep
</span>         <span class="p">...,</span>                                                           <span class="c1"># A,B의 3번 토큰: deep, cheeze
</span>         <span class="p">[</span> <span class="mf">0.5999</span><span class="p">,</span>  <span class="mf">0.5235</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.3445</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mf">1.9020</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.5003</span><span class="p">,</span>  <span class="mf">0.7535</span><span class="p">],</span>  <span class="c1"># A,B의 4번 토큰: learning, burger
</span>         <span class="p">[</span> <span class="mf">0.0688</span><span class="p">,</span>  <span class="mf">0.5867</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.0340</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mf">0.8547</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.9196</span><span class="p">,</span>  <span class="mf">1.1193</span><span class="p">],</span>  <span class="c1"># A,B의 5번 토큰: so
</span>         <span class="p">[</span><span class="o">-</span><span class="mf">0.0751</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.4133</span><span class="p">,</span>  <span class="mf">0.0256</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mf">0.0788</span><span class="p">,</span>  <span class="mf">1.4665</span><span class="p">,</span>  <span class="mf">0.8196</span><span class="p">]],</span> <span class="c1"># A,B의 6번 토큰: much
</span>        <span class="n">grad_fn</span><span class="o">=&lt;</span><span class="n">EmbeddingBackward0</span><span class="o">&gt;</span><span class="p">),</span>
 <span class="n">torch</span><span class="p">.</span><span class="n">Size</span><span class="p">([</span><span class="mi">7</span><span class="p">,</span> <span class="mi">512</span><span class="p">]))</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Absolute Position Embedding</code>은 주위 문맥에 상관없이 같은 위치의 토큰이라면 같은 포지션 값으로 인코딩하기 때문에 <code class="language-plaintext highlighter-rouge">512</code>개의 원소로 구성된 행벡터들의 인덱스를 실제 문장에서 토큰의 등장 순서에 맵핑해주는 방식으로 위치 정보를 표현한다. 예를 들면, 문장에서 가장 먼저 등장하는 <code class="language-plaintext highlighter-rouge">0</code>번 토큰에 <code class="language-plaintext highlighter-rouge">0</code>번째 <code class="language-plaintext highlighter-rouge">행벡터</code>를 배정하고 가장 마지막에 등장하는 <code class="language-plaintext highlighter-rouge">N-1</code> 번째 토큰은 <code class="language-plaintext highlighter-rouge">N-1</code>번째 <code class="language-plaintext highlighter-rouge">행벡터</code>를 위치 정보값으로 갖는 방식이다. 전체 시퀀스 관점에서 개별 토큰에 번호를 부여하기 때문에 <code class="language-plaintext highlighter-rouge">syntactical</code>한 정보를 모델링 해주기 적합하다는 장점이 있다.</p>

<p><code class="language-plaintext highlighter-rouge">Absolute Position Embedding</code> 은 일반적으로 <code class="language-plaintext highlighter-rouge">Input Embedding</code>과 행렬합 연산을 통해 <code class="language-plaintext highlighter-rouge">Word Embedding</code> 으로 만들어 인코더의 입력으로 사용한다.</p>

<p>아래 코드는 저자가 논문에서 제시한 <code class="language-plaintext highlighter-rouge">DeBERTa</code>의 <code class="language-plaintext highlighter-rouge">Relative Position Embedding</code> 구현을 파이토치로 옮긴 것이다. <code class="language-plaintext highlighter-rouge">Relative Position Embedding</code> 은 절대 위치에 비해 꽤나 복잡한 과정을 거쳐야 하기 때문에 코드 역시 긴 편이다. 하나 하나 천천히 살펴보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Relative Position Embedding
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">position_embedding</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Embedding</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">max_length</span><span class="p">,</span> <span class="n">dim_model</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">p_x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="n">max_length</span><span class="p">,</span> <span class="n">dim_model</span><span class="p">),</span> <span class="n">position_embedding</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">max_length</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">fc_q</span><span class="p">,</span> <span class="n">fc_kr</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">dim_model</span><span class="p">,</span> <span class="n">dim_head</span><span class="p">),</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">dim_model</span><span class="p">,</span> <span class="n">dim_head</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">q</span><span class="p">,</span> <span class="n">kr</span> <span class="o">=</span> <span class="n">fc_q</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">fc_kr</span><span class="p">(</span><span class="n">p_x</span><span class="p">)</span> <span class="c1"># [batch, max_length, dim_head], [batch, 2*max_length, dim_head]
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp_c2p</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">kr</span><span class="p">.</span><span class="n">transpose</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp_c2p</span><span class="p">,</span> <span class="n">tmp_c2p</span><span class="p">.</span><span class="n">shape</span>
<span class="p">(</span><span class="n">tensor</span><span class="p">([[</span> <span class="mf">2.8118</span><span class="p">,</span>  <span class="mf">0.8449</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.6240</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.6516</span><span class="p">,</span>  <span class="mf">3.4009</span><span class="p">,</span>  <span class="mf">1.8296</span><span class="p">,</span>  <span class="mf">0.8304</span><span class="p">,</span>  <span class="mf">1.0164</span><span class="p">,</span>
           <span class="mf">3.5664</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.4208</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.0821</span><span class="p">,</span>  <span class="mf">1.5752</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.9469</span><span class="p">,</span> <span class="o">-</span><span class="mf">7.1767</span><span class="p">],</span>
         <span class="p">[</span><span class="o">-</span><span class="mf">2.1907</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.2801</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.0628</span><span class="p">,</span>  <span class="mf">0.4443</span><span class="p">,</span>  <span class="mf">2.2272</span><span class="p">,</span> <span class="o">-</span><span class="mf">5.6653</span><span class="p">,</span> <span class="o">-</span><span class="mf">4.6036</span><span class="p">,</span>  <span class="mf">1.4134</span><span class="p">,</span>
          <span class="o">-</span><span class="mf">1.1742</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.3361</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.4586</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.1827</span><span class="p">,</span>  <span class="mf">1.0878</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.5657</span><span class="p">],</span>
         <span class="p">[</span><span class="o">-</span><span class="mf">4.8952</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.5330</span><span class="p">,</span>  <span class="mf">0.0251</span><span class="p">,</span>  <span class="mf">3.5001</span><span class="p">,</span>  <span class="mf">4.1619</span><span class="p">,</span>  <span class="mf">1.7408</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5100</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.4616</span><span class="p">,</span>
          <span class="o">-</span><span class="mf">1.6101</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.8741</span><span class="p">,</span>  <span class="mf">1.1404</span><span class="p">,</span>  <span class="mf">4.9860</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.5350</span><span class="p">,</span>  <span class="mf">1.0999</span><span class="p">],</span>
         <span class="p">[</span><span class="o">-</span><span class="mf">3.3437</span><span class="p">,</span>  <span class="mf">4.2276</span><span class="p">,</span>  <span class="mf">0.4509</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.8911</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.1069</span><span class="p">,</span>  <span class="mf">0.9540</span><span class="p">,</span>  <span class="mf">1.2045</span><span class="p">,</span>  <span class="mf">2.2194</span><span class="p">,</span>
          <span class="o">-</span><span class="mf">2.6509</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.4076</span><span class="p">,</span>  <span class="mf">5.1599</span><span class="p">,</span>  <span class="mf">1.6591</span><span class="p">,</span>  <span class="mf">3.8764</span><span class="p">,</span>  <span class="mf">2.5126</span><span class="p">],</span>
         <span class="p">[</span> <span class="mf">0.8164</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.9171</span><span class="p">,</span>  <span class="mf">0.8217</span><span class="p">,</span>  <span class="mf">1.3953</span><span class="p">,</span>  <span class="mf">1.6260</span><span class="p">,</span>  <span class="mf">3.8104</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0303</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.1631</span><span class="p">,</span>
           <span class="mf">3.9008</span><span class="p">,</span>  <span class="mf">0.5856</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.6212</span><span class="p">,</span>  <span class="mf">1.7220</span><span class="p">,</span>  <span class="mf">2.7997</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.8802</span><span class="p">],</span>
         <span class="p">[</span> <span class="mf">3.4473</span><span class="p">,</span>  <span class="mf">0.9721</span><span class="p">,</span>  <span class="mf">3.9137</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.2055</span><span class="p">,</span>  <span class="mf">0.6963</span><span class="p">,</span>  <span class="mf">1.2761</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.2266</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.7274</span><span class="p">,</span>
          <span class="o">-</span><span class="mf">1.4928</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.9257</span><span class="p">,</span> <span class="o">-</span><span class="mf">5.4422</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.8544</span><span class="p">,</span>  <span class="mf">1.8749</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.4923</span><span class="p">],</span>
         <span class="p">[</span> <span class="mf">2.6639</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.4392</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.8818</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.4120</span><span class="p">,</span>  <span class="mf">1.7542</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.8774</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.0795</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.2156</span><span class="p">,</span>
          <span class="o">-</span><span class="mf">1.0852</span><span class="p">,</span>  <span class="mf">3.7825</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.5581</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.6989</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.6705</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.2262</span><span class="p">]],</span>
        <span class="n">grad_fn</span><span class="o">=&lt;</span><span class="n">MmBackward0</span><span class="o">&gt;</span><span class="p">),</span>
 <span class="n">torch</span><span class="p">.</span><span class="n">Size</span><span class="p">([</span><span class="mi">7</span><span class="p">,</span> <span class="mi">14</span><span class="p">]))</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">max_seq</span><span class="p">,</span> <span class="n">max_pos</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="n">max_seq</span> <span class="o">*</span> <span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">q_index</span><span class="p">,</span> <span class="n">k_index</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="n">max_seq</span><span class="p">),</span> <span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="n">max_seq</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">q_index</span><span class="p">,</span> <span class="n">k_index</span>
<span class="p">(</span><span class="n">tensor</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]),</span> <span class="n">tensor</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]))</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp_pos</span> <span class="o">=</span> <span class="n">q_index</span><span class="p">.</span><span class="n">view</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="n">k_index</span><span class="p">.</span><span class="n">view</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">rel_pos_matrix</span> <span class="o">=</span> <span class="n">tmp_pos</span> <span class="o">+</span> <span class="n">max_relative_position</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">rel_pos_matrix</span>
<span class="n">tensor</span><span class="p">([[</span> <span class="mi">7</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">1</span><span class="p">],</span>
        <span class="p">[</span> <span class="mi">8</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span>  <span class="mi">2</span><span class="p">],</span>
        <span class="p">[</span> <span class="mi">9</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span>  <span class="mi">3</span><span class="p">],</span>
        <span class="p">[</span><span class="mi">10</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span>  <span class="mi">4</span><span class="p">],</span>
        <span class="p">[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">5</span><span class="p">],</span>
        <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span>  <span class="mi">6</span><span class="p">],</span>
        <span class="p">[</span><span class="mi">13</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span>  <span class="mi">7</span><span class="p">]])</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">rel_pos_matrix</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">clamp</span><span class="p">(</span><span class="n">rel_pos_matrix</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">max_pos</span> <span class="o">-</span> <span class="mi">1</span><span class="p">).</span><span class="n">repeat</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp_c2p</span> <span class="o">=</span> <span class="n">tmp_c2p</span><span class="p">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">rel_pos_matrix</span><span class="p">,</span> <span class="n">rel_pos_matrix</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">tmp_c2p</span><span class="p">.</span><span class="n">shape</span> 
<span class="p">(</span><span class="n">tensor</span><span class="p">([[[</span> <span class="mi">7</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">1</span><span class="p">],</span>
          <span class="p">[</span> <span class="mi">8</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span>  <span class="mi">2</span><span class="p">],</span>
          <span class="p">[</span> <span class="mi">9</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span>  <span class="mi">3</span><span class="p">],</span>
          <span class="p">[</span><span class="mi">10</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span>  <span class="mi">4</span><span class="p">],</span>
          <span class="p">[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">5</span><span class="p">],</span>
          <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span>  <span class="mi">6</span><span class="p">],</span>
          <span class="p">[</span><span class="mi">13</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span>  <span class="mi">7</span><span class="p">]],</span>
<span class="n">torch</span><span class="p">.</span><span class="n">Size</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">14</span><span class="p">]),</span>
<span class="n">torch</span><span class="p">.</span><span class="n">Size</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">14</span><span class="p">]))</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">outputs</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">gather</span><span class="p">(</span><span class="n">tmp_c2p</span><span class="p">,</span> <span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="n">rel_pos_matrix</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">outputs</span><span class="p">,</span> <span class="n">outputs</span><span class="p">.</span><span class="n">shape</span>
<span class="p">(</span><span class="n">tensor</span><span class="p">([[[</span> <span class="mf">1.0164</span><span class="p">,</span>  <span class="mf">0.8304</span><span class="p">,</span>  <span class="mf">1.8296</span><span class="p">,</span>  <span class="mf">3.4009</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.6516</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.6240</span><span class="p">,</span>  <span class="mf">0.8449</span><span class="p">],</span>
          <span class="p">[</span><span class="o">-</span><span class="mf">1.1742</span><span class="p">,</span>  <span class="mf">1.4134</span><span class="p">,</span> <span class="o">-</span><span class="mf">4.6036</span><span class="p">,</span> <span class="o">-</span><span class="mf">5.6653</span><span class="p">,</span>  <span class="mf">2.2272</span><span class="p">,</span>  <span class="mf">0.4443</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.0628</span><span class="p">],</span>
          <span class="p">[</span><span class="o">-</span><span class="mf">1.8741</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.6101</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.4616</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5100</span><span class="p">,</span>  <span class="mf">1.7408</span><span class="p">,</span>  <span class="mf">4.1619</span><span class="p">,</span>  <span class="mf">3.5001</span><span class="p">],</span>
          <span class="p">[</span> <span class="mf">5.1599</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.4076</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.6509</span><span class="p">,</span>  <span class="mf">2.2194</span><span class="p">,</span>  <span class="mf">1.2045</span><span class="p">,</span>  <span class="mf">0.9540</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.1069</span><span class="p">],</span>
          <span class="p">[</span> <span class="mf">1.7220</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.6212</span><span class="p">,</span>  <span class="mf">0.5856</span><span class="p">,</span>  <span class="mf">3.9008</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.1631</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0303</span><span class="p">,</span>  <span class="mf">3.8104</span><span class="p">],</span>
          <span class="p">[</span> <span class="mf">1.8749</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.8544</span><span class="p">,</span> <span class="o">-</span><span class="mf">5.4422</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.9257</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.4928</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.7274</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.2266</span><span class="p">],</span>
          <span class="p">[</span><span class="o">-</span><span class="mf">1.2262</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.6705</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.6989</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.5581</span><span class="p">,</span>  <span class="mf">3.7825</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0852</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.2156</span><span class="p">]],</span>
          <span class="p">.....</span>
          <span class="p">[[</span> <span class="mf">1.0164</span><span class="p">,</span>  <span class="mf">0.8304</span><span class="p">,</span>  <span class="mf">1.8296</span><span class="p">,</span>  <span class="mf">3.4009</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.6516</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.6240</span><span class="p">,</span>  <span class="mf">0.8449</span><span class="p">],</span>
          <span class="p">[</span><span class="o">-</span><span class="mf">1.1742</span><span class="p">,</span>  <span class="mf">1.4134</span><span class="p">,</span> <span class="o">-</span><span class="mf">4.6036</span><span class="p">,</span> <span class="o">-</span><span class="mf">5.6653</span><span class="p">,</span>  <span class="mf">2.2272</span><span class="p">,</span>  <span class="mf">0.4443</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.0628</span><span class="p">],</span>
          <span class="p">[</span><span class="o">-</span><span class="mf">1.8741</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.6101</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.4616</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5100</span><span class="p">,</span>  <span class="mf">1.7408</span><span class="p">,</span>  <span class="mf">4.1619</span><span class="p">,</span>  <span class="mf">3.5001</span><span class="p">],</span>
          <span class="p">[</span> <span class="mf">5.1599</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.4076</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.6509</span><span class="p">,</span>  <span class="mf">2.2194</span><span class="p">,</span>  <span class="mf">1.2045</span><span class="p">,</span>  <span class="mf">0.9540</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.1069</span><span class="p">],</span>
          <span class="p">[</span> <span class="mf">1.7220</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.6212</span><span class="p">,</span>  <span class="mf">0.5856</span><span class="p">,</span>  <span class="mf">3.9008</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.1631</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0303</span><span class="p">,</span>  <span class="mf">3.8104</span><span class="p">],</span>
          <span class="p">[</span> <span class="mf">1.8749</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.8544</span><span class="p">,</span> <span class="o">-</span><span class="mf">5.4422</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.9257</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.4928</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.7274</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.2266</span><span class="p">],</span>
          <span class="p">[</span><span class="o">-</span><span class="mf">1.2262</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.6705</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.6989</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.5581</span><span class="p">,</span>  <span class="mf">3.7825</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0852</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.2156</span><span class="p">]]],</span>
        <span class="n">grad_fn</span><span class="o">=&lt;</span><span class="n">GatherBackward0</span><span class="o">&gt;</span><span class="p">),</span>
 <span class="n">torch</span><span class="p">.</span><span class="n">Size</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>
</code></pre></div></div>

<p>일단 절대 위치와 동일하게 <code class="language-plaintext highlighter-rouge">nn.Embedding</code>을 사용해 임베딩 룩업 테이블(레이어)를 정의하지만, 입력 차원이 다르다. 절대 위치 임베딩은 <code class="language-plaintext highlighter-rouge">forward</code>하게 위치값을 맵핑해야 하는 반면에 상대 위치 임베딩 방식은 <code class="language-plaintext highlighter-rouge">Bi-Directional</code>한 맵핑을 해야 해서, 기존 <code class="language-plaintext highlighter-rouge">max_length</code> 값의 두 배를 입력 차원(<code class="language-plaintext highlighter-rouge">max_pos</code>)으로 사용했다. 예를 들어 <code class="language-plaintext highlighter-rouge">0</code>번 토큰과 나머지 토큰 사이의 위치 관계를 표현해야 하는 상황이다. 그렇다면 우리는 <code class="language-plaintext highlighter-rouge">0</code>번 토큰과 나머지 토큰과의 위치 관계를 <code class="language-plaintext highlighter-rouge">[0, -1, -2, -3, -4, -5, -6]</code> 으로 인코딩할 수 있다.</p>

<p>반대로 마지막 <code class="language-plaintext highlighter-rouge">6</code>번 토큰과 나머지 토큰 사이의 위치 관계를 표현하는 경우라면 어떻게 될까?? <code class="language-plaintext highlighter-rouge">[6, 5, 4, 3, 2, 1, 0]</code> 으로 인코딩 될 것이다. 다시 말해, 위치 임베딩 원소 값은 <code class="language-plaintext highlighter-rouge">[-max_seq:max_seq]</code> 사이에서 정의된다는 것이다. 그러나 원소값의 범위를 그대로 사용할 수는 없다. 이유는 파이썬의 리스트, 텐서 같은 배열형 자료구조는 음이 아닌 정수를 인덱스로 활용해야 <code class="language-plaintext highlighter-rouge">forward</code> 하게 원소에 접근할 수 있기 때문이다. 일반적으로 배열 형태의 자료형은 모두 인덱스 <code class="language-plaintext highlighter-rouge">0</code>부터 <code class="language-plaintext highlighter-rouge">N-1</code>까지 순차적으로 맵핑된다. 그래서 의도한대로 토큰에 접근하려면 역시 토큰의 인덱스를 <code class="language-plaintext highlighter-rouge">forward</code> 한 형태로 만들어줘야 한다.</p>

<p>따라서 기존 <code class="language-plaintext highlighter-rouge">[-max_seq:max_seq]</code> 에  <code class="language-plaintext highlighter-rouge">max_seq</code>를 더해준 <code class="language-plaintext highlighter-rouge">[0:2*max_seq]</code> (<code class="language-plaintext highlighter-rouge">2 * max_seq</code>)을 원소 값의 범위로 사용하게 된다. 여기까지가 통상적으로 말하는 <code class="language-plaintext highlighter-rouge">Relative Position Embedding</code> 에 해당한다. 위 코드상으로는 <code class="language-plaintext highlighter-rouge">rel_pos_matrix</code> 를 만든 부분에 해당한다.</p>

\[∂(i,j)=
\begin{cases}
\ 0 &amp; {(i - j ≤ k)} \\ 
\ 2k-1 &amp; {(i - j ≥ k)} \\
\ i - j + k &amp; {(others)} \\
\end{cases}\]

<p>이제부터 저자가 주장하는 위치 관계 표현 방식에 대해 알아보자. 일반적인 <code class="language-plaintext highlighter-rouge">Relative Position Embedding</code>과 거의 유사하지만, <code class="language-plaintext highlighter-rouge">rel_pos_matrix</code> 내부 원소 값이 음수가 되거나 <code class="language-plaintext highlighter-rouge">max_pos</code> 을 초과하는 경우를 처리 해주기 위해 후처리 과정을 도입해 사용했다. 예외 상황은 <strong><code class="language-plaintext highlighter-rouge">max_seq &gt; 1/2 * max_pos(==k)</code></strong> 일 때 발생한다. <code class="language-plaintext highlighter-rouge">official repo</code> 의 코드를 보면 <code class="language-plaintext highlighter-rouge">max_seq</code>와 <code class="language-plaintext highlighter-rouge">k</code>를 일치시켜 모델링 하기 때문에 파인튜닝 하는 상황이라면 이것을 몰라도 상관없겠지만, 하나 하나 모델을 직접 만드는 입장이라면 예외 상황을 반드시 기억하자.</p>

<p>한편, 이러한 인코딩 방식은 <code class="language-plaintext highlighter-rouge">word2vec</code> 의 <code class="language-plaintext highlighter-rouge">window size</code> 도입과 비슷한 원리(<code class="language-plaintext highlighter-rouge">의미는 주변 문맥에 의해 결정</code>)라고 생각하면 되는데, 윈도우 사이즈 범위에서 벗어난 토큰들은 주변 문맥으로 인정 하지 않겠다는(<code class="language-plaintext highlighter-rouge">negative sample</code>) 의도를 갖고 있다. 실제 구현은 텐서 내부 원소값의 범위를 사용자 지정 범위로 제한할 수 있는 <code class="language-plaintext highlighter-rouge">torch.clamp</code> 를 사용하면 <code class="language-plaintext highlighter-rouge">1</code>줄로 깔끔하게 만들 수 있으니 참고하자.</p>

<p><code class="language-plaintext highlighter-rouge">torch.clamp</code> 까지 적용하고 난 최종 결과를 살펴보자. 행백터, 열벡터 모두 <code class="language-plaintext highlighter-rouge">[0:2*max_seq]</code> 사이에서 정의되고 있으며, 개별 방향 벡터 원소의 최대값과 최소값의 차이가 항상 <code class="language-plaintext highlighter-rouge">k</code> 로 유지 된다. 의도대로 정확히 윈도우 사이즈만큼의 주변 맥락을 반영해 임베딩을 형성하고 있음을 알 수 있다.</p>

<p>정리하면, <code class="language-plaintext highlighter-rouge">Relative Position Embedding</code> 란 절대 위치 방식처럼 임베딩 룩업 테이블을 만들되, 사용자가 지정한 윈도우 사이즈에 해당하는 토큰의 임베딩 값만 추출해 새로운 행벡터를 여러 개 만들어 내는 기법이라고 할 수 있다. <strong>이 때 행벡터는 대상 토큰과 그 나머지 토큰 사이의 위치 변화에 따라 발생하는 파생적인 맥락 정보를 담고 있다.</strong></p>

<h6 id="-deberta-inductive-bias"><code class="language-plaintext highlighter-rouge">🤔 DeBERTa Inductive Bias</code></h6>

<p><strong>결국</strong> <code class="language-plaintext highlighter-rouge">DeBERTa</code><strong>는 두가지 위치 정보 포착 방식을 적절히 섞어서 모델이 더욱 풍부한 임베딩을 갖도록 하려는 의도로 설계 되었다.</strong> 또한 우리는 이미 모델이 다양한 맥락 정보를 포착할수록 <code class="language-plaintext highlighter-rouge">NLU Task</code> 에서 더 나은 성능을 기록한다는 사실을 <code class="language-plaintext highlighter-rouge">BERT</code>와 <code class="language-plaintext highlighter-rouge">GPT</code> 사례에서 알 수 있었다. 따라서 <code class="language-plaintext highlighter-rouge">Relative Position Embedding</code> 을 추가하여 <code class="language-plaintext highlighter-rouge">단어의 발생 순서</code> 를 포착하는 모델에 <code class="language-plaintext highlighter-rouge">단어 분포 가설</code> 적인 특징을 더해주려는 저자의 아이디어는 매우 타당하다고 볼 수 있겠다.</p>

<p>이제 관건은 <strong><code class="language-plaintext highlighter-rouge">“두가지 위치 정보를 어떤 방식으로 추출하고 섞어줄 것인가”</code></strong> 하는 물음에 답하는 것이다. 저자는 물음에 답하기 위해 <code class="language-plaintext highlighter-rouge">Disentangled Self-Attention</code> 과  <code class="language-plaintext highlighter-rouge">Enhanced Mask Decoder</code> 라는 새로운 기법 두가지를 제시한다. 전자는 <code class="language-plaintext highlighter-rouge">단어 분포 가설</code> 에 해당되는 맥락 정보를 추출하기 위한 기법이고, 후자는 <code class="language-plaintext highlighter-rouge">단어 발생 순서</code> 에 포함되는 임베딩을 모델에 주입하기 위해 설계되었다. 모델링 파트에서는 두가지 새로운 기법에 대해서 자세히 살펴본 뒤에 실제 모델을 코드로 빌드하는 과정을 설명하려 한다.</p>

<h3 id="modeling"><code class="language-plaintext highlighter-rouge">🌟 Modeling</code></h3>]]></content><author><name>qcqced</name><email>qcqced123@gmail.com</email></author><category term="NLP" /><category term="Natural Language Process" /><category term="DeBERTa" /><category term="BERT" /><category term="Transformer" /><category term="Self-Attention" /><category term="Disentangled-Attention" /><category term="Relative Position Embedding" /><category term="EMD" /><category term="Encoder" /><summary type="html"><![CDATA[Transformer Official Paper Review with Pytorch Implementation]]></summary></entry><entry><title type="html">🔥 Pytorch Tensor Indexing 자주 사용하는 메서드 모음집</title><link href="http://localhost:4000/framework-library/torch-indexing-function" rel="alternate" type="text/html" title="🔥 Pytorch Tensor Indexing 자주 사용하는 메서드 모음집" /><published>2023-08-04T00:00:00+09:00</published><updated>2023-08-05T02:00:00+09:00</updated><id>http://localhost:4000/framework-library/Pytorch-Tensor-Indexing-Function</id><content type="html" xml:base="http://localhost:4000/framework-library/torch-indexing-function"><![CDATA[<p>파이토치에서 필자가 자주 사용하는 텐서 인덱싱 관련 메서드의 사용법 및 사용 예시를 한방에 정리한 포스트다. 메서드 하나당 하나의 포스트로 만들기에는 너무 길이가 짧다 생각해 한 페이지에 모두 넣게 되었다. 지속적으로 업데이트 될 예정이다. 또한 텐서 인덱싱 말고도 다른 주제로도 관련 메서드를 정리해 올릴 예정이니 많은 관심 부탁드린다.</p>

<h3 id="torchargmax"><code class="language-plaintext highlighter-rouge">🔎 torch.argmax</code></h3>

<p>입력 텐서에서 가장 큰 값을 갖고 있는 원소의 인덱스를 반환한다. 최대값을 찾을 차원을 지정해줄 수 있다. 아래 예시 코드를 확인해보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># torch.argmax params
</span><span class="n">torch</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">tensor</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># torch.argmax example 1
</span><span class="n">test</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">29</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">torch</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
<span class="n">torch</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">test2</span><span class="p">,</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="o">&lt;</span><span class="n">Result</span><span class="o">&gt;</span>
<span class="n">tensor</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

<span class="c1"># torch.argmax example 2
</span><span class="n">test</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">([[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
                     <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]])</span>

<span class="n">torch</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">Result</span><span class="o">&gt;</span>
<span class="n">tensor</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>

<span class="c1"># torch.argmax example 3
</span><span class="n">test</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">([[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
                     <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]])</span>

<span class="n">torch</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">test</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">tensor</span><span class="p">([[</span><span class="mi">0</span><span class="p">],</span>
        <span class="p">[</span><span class="mi">2</span><span class="p">]])</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">dim</code> 매개변수에 원하는 차원을 입력하면 해당 차원 뷰에서 가장 큰 원소를 찾아 인덱스 값을 반환해줄 것이다. 이 때 <code class="language-plaintext highlighter-rouge">keepdim=True</code> 로 설정한다면 입력 차원에서 가장 큰 원소의 인덱스를 반환하되 원본 텐서의 차원과 동일한 형태로 출력해준다. <code class="language-plaintext highlighter-rouge">example 2</code> 의 경우 <code class="language-plaintext highlighter-rouge">dim=0</code> 라서 행이 누적된 방향으로 텐서를 바라봐야 한다. 행이 누적된 방향으로 텐서를 보게 되면 <code class="language-plaintext highlighter-rouge">tensor([[0, 1, 1]])</code>이 된다.</p>

<h3 id="torchstack"><code class="language-plaintext highlighter-rouge">📚 torch.stack</code></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""
torch.stack
Args:
	tensors(sequence of Tensors): 텐서가 담긴 파이썬 시퀀스 객체
	dim(int): 추가할 차원 방향을 세팅, 기본값은 0
"""</span>
<span class="n">torch</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">tensors</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<p>매개변수로 주어진 파이썬 시퀀스 객체(리스트, 튜플)를 사용자가 지정한 새로운 차원에 쌓는 기능을 한다. 매개변수 <code class="language-plaintext highlighter-rouge">tensors</code> 는 텐서가 담긴 파이썬의 시퀀스 객체를 입력으로 받는다. <code class="language-plaintext highlighter-rouge">dim</code> 은 사용자가 텐서 적재를 하고 싶은 새로운 차원을 지정해주면 된다. 기본값은 0차원으로 지정 되어있으며, 텐서의 맨 앞차원이 새롭게 생기게 된다. <code class="language-plaintext highlighter-rouge">torch.stack</code> 은 기계학습, 특히 딥러닝에서 정말 자주 사용되기 때문에 사용법 및 사용상황을 익혀두면 도움이 된다. 예시를 통해 해당 메서드를 어떤 상황에서 어떻게 사용하는지 알아보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">""" torch.stack example """</span>

<span class="k">class</span> <span class="nc">Projector</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="s">"""
    Making projection matrix(Q, K, V) for each attention head
    When you call this class, it returns projection matrix of each attention head
    For example, if you call this class with 8 heads, it returns 8 set of projection matrices (Q, K, V)
    Args:
        num_heads: number of heads in MHA, default 8
        dim_head: dimension of each attention head, default 64
    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num_heads</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">dim_head</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">64</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">Projector</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span> <span class="o">=</span> <span class="n">num_heads</span> <span class="o">*</span> <span class="n">dim_head</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">num_heads</span> <span class="o">=</span> <span class="n">num_heads</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dim_head</span> <span class="o">=</span> <span class="n">dim_head</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">fc_q</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">dim_head</span><span class="p">)</span>
        <span class="n">fc_k</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">dim_head</span><span class="p">)</span>
        <span class="n">fc_v</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">dim_head</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">fc_q</span><span class="p">,</span> <span class="n">fc_k</span><span class="p">,</span> <span class="n">fc_v</span>

<span class="n">num_heads</span> <span class="o">=</span> <span class="mi">8</span>
<span class="n">dim_head</span> <span class="o">=</span> <span class="mi">64</span>
<span class="n">projector</span> <span class="o">=</span> <span class="n">Projector</span><span class="p">(</span><span class="n">num_heads</span><span class="p">,</span> <span class="n">dim_head</span><span class="p">)</span>  <span class="c1"># init instance
</span><span class="n">projector_list</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="n">projector</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_heads</span><span class="p">)]</span>  <span class="c1"># call instance
</span><span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="mi">512</span><span class="p">)</span> <span class="c1"># x.shape: [Batch_Size, Sequence_Length, Dim_model]
</span><span class="n">Q</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">V</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_heads</span><span class="p">):</span>
    <span class="n">Q</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">projector_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">](</span><span class="n">x</span><span class="p">))</span> <span class="c1"># [10, 512, 64]
</span>    <span class="n">K</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">projector_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">](</span><span class="n">x</span><span class="p">))</span> <span class="c1"># [10, 512, 64]
</span>	  <span class="n">V</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">projector_list</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">](</span><span class="n">x</span><span class="p">))</span> <span class="c1"># [10, 512, 64]
</span> 
<span class="n">Q</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># Q.shape: [10, 8, 512, 64]
</span><span class="n">K</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">K</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># K.shape: [10, 8, 512, 64]
</span><span class="n">V</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">V</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># V.shape: [10, 8, 512, 64]
</span></code></pre></div></div>

<p>위 코드는 <code class="language-plaintext highlighter-rouge">Transformer</code> 의 <code class="language-plaintext highlighter-rouge">Multi-Head Attention</code> 구현체 일부를 발췌해온 것이다. <code class="language-plaintext highlighter-rouge">Multi-Head Attention</code> 은 개별 어텐션 해드별로 행렬 $Q, K, V$를 가져야 한다. 따라서 입력 임베딩을 개별 어텐션 헤드에 <code class="language-plaintext highlighter-rouge">Linear Combination</code> 해줘야 하는데 헤드 개수가 8개나 되기 때문에 개별적으로 <code class="language-plaintext highlighter-rouge">Projection Matrix</code> 를 선언해주는 것은 매우 비효율적이다. 따라서 객체  <code class="language-plaintext highlighter-rouge">Projector</code> 에 행렬 $Q, K, V$에 대한 <code class="language-plaintext highlighter-rouge">Projection Matrix</code> 를 정의해줬다. 이후 헤드 개수만큼 객체  <code class="language-plaintext highlighter-rouge">Projector</code> 를 호출해 리스트에 해드별 <code class="language-plaintext highlighter-rouge">Projection Matrix</code> 를 담아준다. 그 다음 <code class="language-plaintext highlighter-rouge">torch.stack</code>을 사용해 <code class="language-plaintext highlighter-rouge">Attention Head</code> 방향의 차원으로 리스트 내부 텐서들을 쌓아주면 된다.</p>

<h3 id="torcharange"><code class="language-plaintext highlighter-rouge">🔢 torch.arange</code></h3>

<p>사용자가 지정한 시작점부터 끝점까지 일정한 간격으로 텐서를 나열한다. Python의 내장 메서드 <code class="language-plaintext highlighter-rouge">range</code>와 동일한 역할을 하는데, 대신 텐서 그 결과를 텐서 구조체로 반환한다고 생각하면 되겠다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># torch.arange usage
</span><span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">tensor</span><span class="p">([</span> <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span>  <span class="mi">4</span><span class="p">])</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="n">tensor</span><span class="p">([</span> <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">3</span><span class="p">])</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mf">2.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
<span class="n">tensor</span><span class="p">([</span> <span class="mf">1.0000</span><span class="p">,</span>  <span class="mf">1.5000</span><span class="p">,</span>  <span class="mf">2.0000</span><span class="p">])</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">step</code> 매개변수로 원소간 간격 조정을 할 수 있는데, 기본은 1로 지정 되어 있으니 참고하자. 필자의 경우에는 <code class="language-plaintext highlighter-rouge">nn.Embedding</code>의 입력 텐서를 만들 때 가장 많이 사용했다. <code class="language-plaintext highlighter-rouge">nn.Embedding</code> 의 경우 Input으로 <code class="language-plaintext highlighter-rouge">IntTensor</code>, <code class="language-plaintext highlighter-rouge">LongTensor</code>를 받게 되어 있으니 알아두자.</p>

<h3 id="torchrepeat"><code class="language-plaintext highlighter-rouge">🔁 torch.repeat</code></h3>

<p>입력값으로 주어진 텐서를 사용자가 지정한 반복 횟수만큼 특정 차원 방향으로 늘린다. 예를 들면 <code class="language-plaintext highlighter-rouge">[1,2,3] * 3</code>의 결과는 <code class="language-plaintext highlighter-rouge">[1, 2, 3, 1, 2, 3, 1, 2, 3]</code> 인데, 이것을 사용자가 지정한 반복 횟수만큼 특정 차원으로 수행하겠다는 것이다. 아래 사용 예제를 확인해보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># torch.repeat example
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">tensor</span><span class="p">([[</span> <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">3</span><span class="p">],</span>
        <span class="p">[</span> <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">3</span><span class="p">],</span>
        <span class="p">[</span> <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">3</span><span class="p">],</span>
        <span class="p">[</span> <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">3</span><span class="p">]])</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">tensor</span><span class="p">([[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]],</span>

        <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]],</span>

        <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]],</span>

        <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]])</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span><span class="n">size</span>
<span class="n">torch</span><span class="p">.</span><span class="n">Size</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">tensor</span><span class="p">([[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]],</span>

        <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]],</span>

        <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]],</span>

        <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]])</span>
</code></pre></div></div>

<p>$t$를 어떤 텐서 구조체 $x$의 최대 차원이라고 했을 , $x_t$를 가장 왼쪽에 넣고 가장 낮은 차원인 0차원에 대한 반복 횟수를 오른쪽 끝에 대입해서 사용하면 된다. (<code class="language-plaintext highlighter-rouge">torch.repeat(</code>$x_t, x_{t-1}, … x_2, x_1, x_0$<code class="language-plaintext highlighter-rouge">))</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># torch.arange &amp; torch.repeate usage example
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">pos_x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">num_patches</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="n">repeat</span><span class="p">(</span><span class="n">inputs</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="n">to</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">pos_x</span><span class="p">.</span><span class="n">shape</span>
<span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">([</span><span class="mi">16</span><span class="p">,</span> <span class="mi">1025</span><span class="p">])</span>
</code></pre></div></div>

<p>필자의 경우, <code class="language-plaintext highlighter-rouge">position embedding</code>의 입력을 만들고 싶을 때 <code class="language-plaintext highlighter-rouge">torch.arange</code> 와 연계해 자주 사용 했던 것 같다. 위 코드를 참고하자.</p>

<h3 id="torchclamp"><code class="language-plaintext highlighter-rouge">🔬 torch.clamp</code></h3>

<p>입력 텐서의 원소값을 사용자가 지정한 최대•최소값 범위 이내로 제한하는 메서드다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># torch.clamp params
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">torch</span><span class="p">.</span><span class="n">clamp</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span> <span class="nb">min</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">out</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span> <span class="err">→</span> <span class="n">Tensor</span>

<span class="c1"># torch.clamp usage example
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
<span class="n">tensor</span><span class="p">([</span><span class="o">-</span><span class="mf">1.7120</span><span class="p">,</span>  <span class="mf">0.1734</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.0478</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.0922</span><span class="p">])</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">torch</span><span class="p">.</span><span class="n">clamp</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="nb">min</span><span class="o">=-</span><span class="mf">0.5</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">tensor</span><span class="p">([</span><span class="o">-</span><span class="mf">0.5000</span><span class="p">,</span>  <span class="mf">0.1734</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.0478</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.0922</span><span class="p">])</span>
</code></pre></div></div>

<p>입력된 텐서의 원소를 지정 최대•최소 설정값과 하나 하나 대조해서 텐서 내부의 모든 원소가 지정 범위 안에 들도록 만들어준다. <code class="language-plaintext highlighter-rouge">torch.clamp</code> 역시 다양한 상황에서 사용되는데, 필자의 경우 모델 레이어 중간에 제곱근이나 지수, 분수 혹은 각도 관련 연산이 들어가 <code class="language-plaintext highlighter-rouge">Backward Pass</code>에서 <code class="language-plaintext highlighter-rouge">NaN</code>이 발생할 수 있는 경우에 안전장치로 많이 사용하고 있다. (<a href="https://qcqced123.github.io/framework-library/backward-nan/">자세히 알고 싶다면 클릭</a>)</p>

<h3 id="torchgather"><code class="language-plaintext highlighter-rouge">👩‍👩‍👧‍👦 torch.gather</code></h3>

<p>텐서 객체 내부에서 원하는 인덱스에 위치한 원소만 추출하고 싶을 때 사용하면 매우 유용한 메서드다. 텐서 역시 <code class="language-plaintext highlighter-rouge">iterable</code> 객체라서 <code class="language-plaintext highlighter-rouge">loop</code> 를 사용해 접근하는 것이 직관적으로 보일 수 있으나, 통상적으로 텐서를 사용하는 상황이라면 객체의 차원이 어마무시 하기 때문에 루프로 접근해 관리하는 것은 매우 비효율적이다. 루프를 통해 접근하면 파이썬의 내장 리스트를 사용하는 것과 별반 다를게 없어지기 때문에, 텐서를 사용하는 메리트가 사라진다. 비교적 크지 않은 2~3차원의 텐서 정도라면 사용해도 크게 문제는 없을거라 생각하지만 그래도 코드의 일관성을 위해 <code class="language-plaintext highlighter-rouge">torch.gather</code> 사용을 권장한다. 이제 <code class="language-plaintext highlighter-rouge">torch.gather</code>의 사용법에 대해 알아보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># torch.gather params
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">torch</span><span class="p">.</span><span class="n">gather</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span> <span class="n">dim</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">sparse_grad</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">out</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">dim</code>과 <code class="language-plaintext highlighter-rouge">index</code>에 주목해보자. 먼저 <code class="language-plaintext highlighter-rouge">dim</code>은 사용자가 인덱싱을 적용하고 싶은 차원을 지정해주는 역할을 한다. <code class="language-plaintext highlighter-rouge">index</code> 매개변수로 전달하는 텐서 안에는 원소의 <code class="language-plaintext highlighter-rouge">‘인덱스’</code>를 의미하는 숫자들이 마구잡이로 담겨있는데, 해당 인덱스가 대상 텐서의 어느 차원을 가리킬 것인지를 컴퓨터에게 알려준다고 생각하면 된다. <code class="language-plaintext highlighter-rouge">index</code> 는 앞에서 설명했듯이 원소의 <code class="language-plaintext highlighter-rouge">‘인덱스’</code>를 의미하는 숫자들이 담긴 텐서를 입력으로 하는 매개변수다. 이 때 주의할 점은 대상 텐서(<code class="language-plaintext highlighter-rouge">input</code>)와 인덱스 텐서의 차원 형태가 반드시 동일해야 한다는 것이다. 역시 말로만 들으면 이해하기 힘드니 사용 예시를 함꼐 살펴보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># torch.gather usage example
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">q</span><span class="p">,</span> <span class="n">kr</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span> <span class="n">torch</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span> <span class="c1"># [batch, sequence, dim_head], [batch, 2*sequence, dim_head]
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">tmp_c2p</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">kr</span><span class="p">.</span><span class="n">transpose</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp_c2p</span><span class="p">,</span> <span class="n">tmp_c2p</span><span class="p">.</span><span class="n">shape</span>
<span class="p">(</span><span class="n">tensor</span><span class="p">([[</span><span class="o">-</span><span class="mf">2.6477</span><span class="p">,</span> <span class="o">-</span><span class="mf">4.7478</span><span class="p">,</span> <span class="o">-</span><span class="mf">5.3250</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mf">1.6062</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.9717</span><span class="p">,</span>  <span class="mf">3.8004</span><span class="p">],</span>
         <span class="p">[</span> <span class="mf">0.0662</span><span class="p">,</span>  <span class="mf">1.5240</span><span class="p">,</span>  <span class="mf">0.1182</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mf">0.1653</span><span class="p">,</span>  <span class="mf">2.8476</span><span class="p">,</span>  <span class="mf">1.6337</span><span class="p">],</span>
         <span class="p">[</span><span class="o">-</span><span class="mf">0.5010</span><span class="p">,</span> <span class="o">-</span><span class="mf">4.2267</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.1179</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mf">1.1447</span><span class="p">,</span>  <span class="mf">1.7845</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.1493</span><span class="p">],</span>
         <span class="p">...,</span>
         <span class="p">[</span><span class="o">-</span><span class="mf">2.1073</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.2149</span><span class="p">,</span> <span class="o">-</span><span class="mf">4.8630</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mf">0.8238</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5833</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.2066</span><span class="p">],</span>
         <span class="p">[</span> <span class="mf">2.1747</span><span class="p">,</span>  <span class="mf">3.2924</span><span class="p">,</span>  <span class="mf">6.5808</span><span class="p">,</span>  <span class="p">...,</span> <span class="o">-</span><span class="mf">0.2926</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.2511</span><span class="p">,</span>  <span class="mf">2.6996</span><span class="p">],</span>
         <span class="p">[</span><span class="o">-</span><span class="mf">2.8362</span><span class="p">,</span>  <span class="mf">2.8700</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.9729</span><span class="p">,</span>  <span class="p">...,</span> <span class="o">-</span><span class="mf">4.9913</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.3616</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.1708</span><span class="p">]],</span>
        <span class="n">grad_fn</span><span class="o">=&lt;</span><span class="n">MmBackward0</span><span class="o">&gt;</span><span class="p">)</span>
<span class="n">torch</span><span class="p">.</span><span class="n">Size</span><span class="p">([</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">1024</span><span class="p">]))</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">max_seq</span><span class="p">,</span> <span class="n">max_relative_position</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">,</span> <span class="mi">512</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">q_index</span><span class="p">,</span> <span class="n">k_index</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="n">max_seq</span><span class="p">),</span> <span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">max_relative_position</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">q_index</span><span class="p">,</span> <span class="n">k_index</span>
<span class="p">(</span><span class="n">tensor</span><span class="p">([</span>   <span class="mi">0</span><span class="p">,</span>    <span class="mi">1</span><span class="p">,</span>    <span class="mi">2</span><span class="p">,</span>  <span class="p">...,</span> <span class="mi">1021</span><span class="p">,</span> <span class="mi">1022</span><span class="p">,</span> <span class="mi">1023</span><span class="p">]),</span>
 <span class="n">tensor</span><span class="p">([</span>   <span class="mi">0</span><span class="p">,</span>    <span class="mi">1</span><span class="p">,</span>    <span class="mi">2</span><span class="p">,</span>  <span class="p">...,</span> <span class="mi">1021</span><span class="p">,</span> <span class="mi">1022</span><span class="p">,</span> <span class="mi">1023</span><span class="p">]))</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp_pos</span> <span class="o">=</span> <span class="n">q_index</span><span class="p">.</span><span class="n">view</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="n">k_index</span><span class="p">.</span><span class="n">view</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">rel_pos_matrix</span> <span class="o">=</span> <span class="n">tmp_pos</span> <span class="o">+</span> <span class="n">max_relative_position</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">rel_pos_matrix</span>
<span class="n">tensor</span><span class="p">([[</span> <span class="mi">512</span><span class="p">,</span>  <span class="mi">511</span><span class="p">,</span>  <span class="mi">510</span><span class="p">,</span>  <span class="p">...,</span> <span class="o">-</span><span class="mi">509</span><span class="p">,</span> <span class="o">-</span><span class="mi">510</span><span class="p">,</span> <span class="o">-</span><span class="mi">511</span><span class="p">],</span>
        <span class="p">[</span> <span class="mi">513</span><span class="p">,</span>  <span class="mi">512</span><span class="p">,</span>  <span class="mi">511</span><span class="p">,</span>  <span class="p">...,</span> <span class="o">-</span><span class="mi">508</span><span class="p">,</span> <span class="o">-</span><span class="mi">509</span><span class="p">,</span> <span class="o">-</span><span class="mi">510</span><span class="p">],</span>
        <span class="p">[</span> <span class="mi">514</span><span class="p">,</span>  <span class="mi">513</span><span class="p">,</span>  <span class="mi">512</span><span class="p">,</span>  <span class="p">...,</span> <span class="o">-</span><span class="mi">507</span><span class="p">,</span> <span class="o">-</span><span class="mi">508</span><span class="p">,</span> <span class="o">-</span><span class="mi">509</span><span class="p">],</span>
        <span class="p">...,</span>
        <span class="p">[</span><span class="mi">1533</span><span class="p">,</span> <span class="mi">1532</span><span class="p">,</span> <span class="mi">1531</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mi">512</span><span class="p">,</span>  <span class="mi">511</span><span class="p">,</span>  <span class="mi">510</span><span class="p">],</span>
        <span class="p">[</span><span class="mi">1534</span><span class="p">,</span> <span class="mi">1533</span><span class="p">,</span> <span class="mi">1532</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mi">513</span><span class="p">,</span>  <span class="mi">512</span><span class="p">,</span>  <span class="mi">511</span><span class="p">],</span>
        <span class="p">[</span><span class="mi">1535</span><span class="p">,</span> <span class="mi">1534</span><span class="p">,</span> <span class="mi">1533</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mi">514</span><span class="p">,</span>  <span class="mi">513</span><span class="p">,</span>  <span class="mi">512</span><span class="p">]])</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">rel_pos_matrix</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">clamp</span><span class="p">(</span><span class="n">rel_pos_matrix</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">max_relative_position</span> <span class="o">-</span> <span class="mi">1</span><span class="p">).</span><span class="n">repeat</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">tmp_c2p</span> <span class="o">=</span> <span class="n">tmp_c2p</span><span class="p">.</span><span class="n">repeat</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">rel_pos_matrix</span><span class="p">,</span> <span class="n">rel_pos_matrix</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">tmp_c2p</span><span class="p">.</span><span class="n">shape</span> 
<span class="p">(</span><span class="n">tensor</span><span class="p">([[[</span> <span class="mi">512</span><span class="p">,</span>  <span class="mi">511</span><span class="p">,</span>  <span class="mi">510</span><span class="p">,</span>  <span class="p">...,</span>    <span class="mi">0</span><span class="p">,</span>    <span class="mi">0</span><span class="p">,</span>    <span class="mi">0</span><span class="p">],</span>
          <span class="p">[</span> <span class="mi">513</span><span class="p">,</span>  <span class="mi">512</span><span class="p">,</span>  <span class="mi">511</span><span class="p">,</span>  <span class="p">...,</span>    <span class="mi">0</span><span class="p">,</span>    <span class="mi">0</span><span class="p">,</span>    <span class="mi">0</span><span class="p">],</span>
          <span class="p">[</span> <span class="mi">514</span><span class="p">,</span>  <span class="mi">513</span><span class="p">,</span>  <span class="mi">512</span><span class="p">,</span>  <span class="p">...,</span>    <span class="mi">0</span><span class="p">,</span>    <span class="mi">0</span><span class="p">,</span>    <span class="mi">0</span><span class="p">],</span>
          <span class="p">...,</span>
          <span class="p">[</span><span class="mi">1023</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mi">512</span><span class="p">,</span>  <span class="mi">511</span><span class="p">,</span>  <span class="mi">510</span><span class="p">],</span>
          <span class="p">[</span><span class="mi">1023</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mi">513</span><span class="p">,</span>  <span class="mi">512</span><span class="p">,</span>  <span class="mi">511</span><span class="p">],</span>
          <span class="p">[</span><span class="mi">1023</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mi">514</span><span class="p">,</span>  <span class="mi">513</span><span class="p">,</span>  <span class="mi">512</span><span class="p">]],</span>
 
         <span class="p">[[</span> <span class="mi">512</span><span class="p">,</span>  <span class="mi">511</span><span class="p">,</span>  <span class="mi">510</span><span class="p">,</span>  <span class="p">...,</span>    <span class="mi">0</span><span class="p">,</span>    <span class="mi">0</span><span class="p">,</span>    <span class="mi">0</span><span class="p">],</span>
          <span class="p">[</span> <span class="mi">513</span><span class="p">,</span>  <span class="mi">512</span><span class="p">,</span>  <span class="mi">511</span><span class="p">,</span>  <span class="p">...,</span>    <span class="mi">0</span><span class="p">,</span>    <span class="mi">0</span><span class="p">,</span>    <span class="mi">0</span><span class="p">],</span>
          <span class="p">[</span> <span class="mi">514</span><span class="p">,</span>  <span class="mi">513</span><span class="p">,</span>  <span class="mi">512</span><span class="p">,</span>  <span class="p">...,</span>    <span class="mi">0</span><span class="p">,</span>    <span class="mi">0</span><span class="p">,</span>    <span class="mi">0</span><span class="p">],</span>
          <span class="p">...,</span>
          <span class="p">[</span><span class="mi">1023</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mi">512</span><span class="p">,</span>  <span class="mi">511</span><span class="p">,</span>  <span class="mi">510</span><span class="p">],</span>
          <span class="p">[</span><span class="mi">1023</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mi">513</span><span class="p">,</span>  <span class="mi">512</span><span class="p">,</span>  <span class="mi">511</span><span class="p">],</span>
          <span class="p">[</span><span class="mi">1023</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span> <span class="mi">1023</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mi">514</span><span class="p">,</span>  <span class="mi">513</span><span class="p">,</span>  <span class="mi">512</span><span class="p">]],</span>
<span class="n">torch</span><span class="p">.</span><span class="n">Size</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="mi">1024</span><span class="p">]),</span>
<span class="n">torch</span><span class="p">.</span><span class="n">Size</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="mi">1024</span><span class="p">]))</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">torch</span><span class="p">.</span><span class="n">gather</span><span class="p">(</span><span class="n">tmp_c2p</span><span class="p">,</span> <span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="n">rel_pos_matrix</span><span class="p">)</span>
<span class="n">tensor</span><span class="p">([[[</span><span class="o">-</span><span class="mf">0.8579</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.2178</span><span class="p">,</span>  <span class="mf">1.6323</span><span class="p">,</span>  <span class="p">...,</span> <span class="o">-</span><span class="mf">2.6477</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.6477</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.6477</span><span class="p">],</span>
         <span class="p">[</span> <span class="mf">1.1601</span><span class="p">,</span>  <span class="mf">2.1752</span><span class="p">,</span>  <span class="mf">0.7187</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mf">0.0662</span><span class="p">,</span>  <span class="mf">0.0662</span><span class="p">,</span>  <span class="mf">0.0662</span><span class="p">],</span>
         <span class="p">[</span> <span class="mf">3.4379</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.2573</span><span class="p">,</span>  <span class="mf">0.1375</span><span class="p">,</span>  <span class="p">...,</span> <span class="o">-</span><span class="mf">0.5010</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5010</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5010</span><span class="p">],</span>
         <span class="p">...,</span>
         <span class="p">[</span><span class="o">-</span><span class="mf">1.2066</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.2066</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.2066</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mf">0.5943</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5169</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.0820</span><span class="p">],</span>
         <span class="p">[</span> <span class="mf">2.6996</span><span class="p">,</span>  <span class="mf">2.6996</span><span class="p">,</span>  <span class="mf">2.6996</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mf">0.2014</span><span class="p">,</span>  <span class="mf">1.1458</span><span class="p">,</span>  <span class="mf">3.2626</span><span class="p">],</span>
         <span class="p">[</span><span class="o">-</span><span class="mf">0.1708</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.1708</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.1708</span><span class="p">,</span>  <span class="p">...,</span>  <span class="mf">1.9955</span><span class="p">,</span>  <span class="mf">4.1549</span><span class="p">,</span>  <span class="mf">2.6356</span><span class="p">]],</span>
</code></pre></div></div>

<p>위 코드는 <code class="language-plaintext highlighter-rouge">DeBERTa</code> 의 <code class="language-plaintext highlighter-rouge">Disentangled Self-Attention</code>을 구현한 코드의 일부분이다. 자세한 원리는 <code class="language-plaintext highlighter-rouge">DeBERTa</code> 논문 리뷰 포스팅에서 확인하면 되고, 우리가 지금 주목할 부분은 바로 <code class="language-plaintext highlighter-rouge">tmp_c2p</code>, <code class="language-plaintext highlighter-rouge">rel_pos_matrix</code> 그리고 마지막 줄에 위치한 <code class="language-plaintext highlighter-rouge">torch.gather</code> 다. <code class="language-plaintext highlighter-rouge">[10, 1024, 1024]</code> 모양을 가진 대상 텐서 <code class="language-plaintext highlighter-rouge">tmp_c2p</code> 에서 내가 원하는 원소만 추출하려는 상황인데, 추출해야할 원소의 인덱스 값이 담긴 텐서를 <code class="language-plaintext highlighter-rouge">rel_pos_matrix</code> 로 정의했다. <code class="language-plaintext highlighter-rouge">rel_pos_matrix</code> 의 차원은 <code class="language-plaintext highlighter-rouge">[10, 1024, 1024]</code>로 <code class="language-plaintext highlighter-rouge">tmp_c2p</code>와 동일하다. 참고로 추출해야 하는 차원 방향은 가로 방향(두 번째 1024)이다.</p>

<p>이제 <code class="language-plaintext highlighter-rouge">torch.gather</code>의 동작을 살펴보자. 우리가 현재 추출하고 싶은 대상은 3차원 텐서의 가로 방향(두 번째 1024, 텐서의 행 벡터), 즉 <code class="language-plaintext highlighter-rouge">2 * max_sequence_length</code> 를 의미하는 차원 방향의 원소다. 따라서 <code class="language-plaintext highlighter-rouge">dim=-1</code>으로 설정해준다. 이제 메서드가 의도대로 적용되었는지 확인해보자. <code class="language-plaintext highlighter-rouge">rel_pos_matrix</code> 의 0번 배치, 0번째 시퀀스의 가장 마지막 차원의 값은 <code class="language-plaintext highlighter-rouge">0</code>으로 초기화 되어 있다. 다시 말해, 대상 텐서의 대상 차원에서 0번째 인덱스에 해당하는 값을 가져오라는 의미를 담고 있다. 그렇다면 <code class="language-plaintext highlighter-rouge">torch.gather</code> 실행 결과가 <code class="language-plaintext highlighter-rouge">tmp_c2p</code>의 0번 배치, 0번째 시퀀스의 0번째 차원 값과 일치하는지 확인해보자. 둘 다 <code class="language-plaintext highlighter-rouge">-2.6477</code>, <code class="language-plaintext highlighter-rouge">-2.6477</code> 으로 같은 값을 나타내고 있다. 따라서 우리 의도대로 잘 실행되었다는 사실을 알 수 있다.</p>

<h3 id="torchtriu-torchtril"><code class="language-plaintext highlighter-rouge">👩‍👩‍👧‍👦 torch.triu, torch.tril</code></h3>

<p>각각 입력 텐서를 <code class="language-plaintext highlighter-rouge">상삼각행렬</code>, <code class="language-plaintext highlighter-rouge">하삼각행렬</code>로 만든다. <code class="language-plaintext highlighter-rouge">triu</code>나 <code class="language-plaintext highlighter-rouge">tril</code>은 사실 뒤집으면 같은 결과를 반환하기 때문에 <code class="language-plaintext highlighter-rouge">tril</code>을 기준으로 설명을 하겠다. 메서드의 매개변수는 다음과 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># torch.triu, tril params
</span><span class="n">upper_tri_matrix</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">triu</span><span class="p">(</span><span class="n">input_tensor</span><span class="p">,</span> <span class="n">diagonal</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">out</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="n">lower_tri_matrix</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">tril</span><span class="p">(</span><span class="n">input_tensors</span><span class="p">,</span> <span class="n">diagonal</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">out</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">diagonal</code> 에 주목해보자. 양수를 전달하면 주대각성분에서 해당하는 값만큼 떨어진 곳의 대각성분까지 그 값을 살려둔다. 한편 음수를 전달하면 주대각성분을 포함해 주어진 값만큼 떨어진 곳까지의 대각성분을 모두 0으로 만들어버린다. 기본은 0으로 설정되어 있으며, 이는 주대각성분부터 왼쪽 하단의 원소를 모두 살려두겠다는 의미가 된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># torch.tril usage example
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">lm_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">tril</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">ones</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">lm_mask</span>
<span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span>
<span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span>
<span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span>
<span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span>
</code></pre></div></div>

<p>두 메서드는 선형대수학이 필요한 다양한 분야에서 사용되는데, 필자의 경우, <code class="language-plaintext highlighter-rouge">GPT</code>처럼 <code class="language-plaintext highlighter-rouge">Transformer</code>의 <code class="language-plaintext highlighter-rouge">Decoder</code> 를 사용하는 모델을 빌드할 때 가장 많이 사용했던 것 같다. <code class="language-plaintext highlighter-rouge">Decoder</code>를 사용하는 모델은 대부분 구조상 <code class="language-plaintext highlighter-rouge">Language Modeling</code>을 위해서 <code class="language-plaintext highlighter-rouge">Masked Multi-Head Self-Attention Block</code>을 사용하는데 이 때 미래 시점의 토큰 임베딩 값에 마스킹을 해주기 위해 <code class="language-plaintext highlighter-rouge">torch.tril</code> 을 사용하게 되니 참고하자.</p>

<h3 id="torchtensormasked_fill"><code class="language-plaintext highlighter-rouge">👩‍👩‍👧‍👦 torch.Tensor.masked_fill</code></h3>

<p>사용자가 지정한 값에 해당되는 원소를 모두 마스킹 처리해주는 메서드다. 먼저 매개변수를 확인해보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># torch.Tensor.masked_fill params
</span><span class="n">input_tensors</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]])</span>
<span class="n">input_tensors</span><span class="p">.</span><span class="n">masked_fill</span><span class="p">(</span><span class="n">mask</span><span class="p">:</span> <span class="n">BoolTensor</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">masked_fill</code> 은 텐서 객체의 내부 <code class="language-plaintext highlighter-rouge">attribute</code> 로 정의되기 때문에 해당 메서드를 사용하고 싶다면 먼저 마스킹 대상 텐서를 만들어야 한다. 텐서를 정의했다면 텐서 객체의 <code class="language-plaintext highlighter-rouge">attributes</code> 접근을 통해 <code class="language-plaintext highlighter-rouge">masked_fill()</code> 을 호출한 뒤, 필요한 매개변수를 전달해주는 방식으로 사용하면 된다.</p>

<p><code class="language-plaintext highlighter-rouge">mask</code> 매개변수에는 마스킹 텐서를 전달해야 하는데, 이 때 내부 원소는 모두 <code class="language-plaintext highlighter-rouge">boolean</code>이어야 하고 텐서의 형태는 대상 텐서와 동일해야 한다(완전히 같을 필요는 없고, 브로드 캐스팅만 가능하면 상관 없음).</p>

<p><code class="language-plaintext highlighter-rouge">value</code> 매개변수에는 마스킹 대상 원소들에 일괄적으로 적용해주고 싶은 값을 전달한다. 이게 말로만 들으면 이해하기 쉽지 않다. 아래 사용 예시를 함께 첨부했으니 참고 바란다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># torch.masked_fill usage
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">lm_mask</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">tril</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">ones</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">lm_mask</span>
<span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span>
<span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span>
<span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span>
<span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">attention_matrix</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">k</span><span class="p">.</span><span class="n">transpose</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">))</span> <span class="o">/</span> <span class="n">dot_scale</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">attention_matrix</span>
<span class="mf">1.22</span> <span class="mf">2.1</span> <span class="mf">3.4</span> <span class="mf">1.2</span> <span class="mf">1.1</span>
<span class="mf">1.22</span> <span class="mf">2.1</span> <span class="mf">3.4</span> <span class="mf">9.9</span> <span class="mf">9.9</span>
<span class="mf">1.22</span> <span class="mf">2.1</span> <span class="mf">3.4</span> <span class="mf">9.9</span> <span class="mf">9.9</span>
<span class="mf">1.22</span> <span class="mf">2.1</span> <span class="mf">3.4</span> <span class="mf">9.9</span> <span class="mf">9.9</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">attention_matrix</span> <span class="o">=</span> <span class="n">attention_matrix</span><span class="p">.</span><span class="n">masked_fill</span><span class="p">(</span><span class="n">lm_mask</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">float</span><span class="p">(</span><span class="s">'-inf'</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">attention_matrix</span>
<span class="mf">1.22</span> <span class="o">-</span><span class="n">inf</span> <span class="o">-</span><span class="n">inf</span> <span class="o">-</span><span class="n">inf</span> <span class="o">-</span><span class="n">inf</span>
<span class="mf">1.22</span> <span class="mf">2.1</span> <span class="o">-</span><span class="n">inf</span> <span class="o">-</span><span class="n">inf</span> <span class="o">-</span><span class="n">inf</span>
<span class="mf">1.22</span> <span class="mf">2.1</span> <span class="mf">3.4</span> <span class="o">-</span><span class="n">inf</span> <span class="o">-</span><span class="n">inf</span>
<span class="mf">1.22</span> <span class="mf">2.1</span> <span class="mf">3.4</span> <span class="mf">9.9</span> <span class="o">-</span><span class="n">inf</span>
</code></pre></div></div>]]></content><author><name>qcqced</name><email>qcqced123@gmail.com</email></author><category term="Framework &amp; Library" /><category term="Pytorch" /><category term="Tensor" /><category term="Linear Algebra" /><summary type="html"><![CDATA[파이토치에서 자주 사용하는 텐서 인덱싱 관련 메서드 모음]]></summary></entry><entry><title type="html">🤖 [Transformer] Attention Is All You Need</title><link href="http://localhost:4000/nlp/transformer" rel="alternate" type="text/html" title="🤖 [Transformer] Attention Is All You Need" /><published>2023-08-04T00:00:00+09:00</published><updated>2023-08-04T01:00:00+09:00</updated><id>http://localhost:4000/nlp/Transformer</id><content type="html" xml:base="http://localhost:4000/nlp/transformer"><![CDATA[<h3 id="overview"><code class="language-plaintext highlighter-rouge">🔭 Overview</code></h3>

<p><code class="language-plaintext highlighter-rouge">Transformer</code>는 2017년 Google이 NIPS에서 발표한 자연어 처리용 신경망으로 기존 <code class="language-plaintext highlighter-rouge">RNN</code> 계열(LSTM, GRU) 신경망이 가진 문제를 해결하고 최대한 인간의 자연어 이해 방식을 수학적으로 모델링 하려는 의도로 설계 되었다. 이 모델은 초기 <code class="language-plaintext highlighter-rouge">Encoder-Decoder</code> 를 모두 갖춘 <code class="language-plaintext highlighter-rouge">seq2seq</code> 형태로 고안 되었으며, 다양한 번역 테스크에서 <code class="language-plaintext highlighter-rouge">SOTA</code>를 달성해 주목을 받았다. 이후에는 여러분도 잘 아시는 것처럼  <code class="language-plaintext highlighter-rouge">BERT</code>, <code class="language-plaintext highlighter-rouge">GPT</code>, <code class="language-plaintext highlighter-rouge">ViT</code>의 베이스 라인으로 채택 되며, 현대 딥러닝 역사에 한 획을 그은 모델로 평가 받고 있다.</p>

<p>현대 딥러닝의 전성기를 열어준 <code class="language-plaintext highlighter-rouge">Transformer</code>는 어떤 아이디어로 기존 <code class="language-plaintext highlighter-rouge">Recurrent</code> 계열이 가졌던 문제들을 해결했을까?? 이것을 제대로 이해하려면 먼저 기존 순환 신경망 모델들이 가졌던 문제부터 짚고 넘어갈 필요가 있다.</p>

<h3 id="limitation-of-recurrent-structure"><strong><code class="language-plaintext highlighter-rouge">🤔 Limitation of Recurrent Structure</code></strong></h3>

<ul>
  <li><strong>1) 인간과 다른 메커니즘의 Vanishing Gradient 발생 (Activation Function with Backward)</strong></li>
  <li><strong>2) 점점 흐려지는 Inputs에 Attention (Activation Function with Forward)</strong></li>
  <li><strong>3) 디코더가 가장 마지막 단어만 열심히 보고 <code class="language-plaintext highlighter-rouge">denoising</code> 수행 (Seq2Seq with Bi-Directional RNN)</strong></li>
</ul>

<h4 id="1-인간과-다른-메커니즘의-vanishing-gradient-발생-activation-function-with-backward"><code class="language-plaintext highlighter-rouge">📈 1) 인간과 다른 메커니즘의 Vanishing Gradient 발생 (Activation Function with Backward)</code></h4>

\[h(t) = tanh(x_tW_x + h_{t-1}W_h + b))\]

<p><code class="language-plaintext highlighter-rouge">RNN</code>의 활성 함수인 <code class="language-plaintext highlighter-rouge">Hyperbolic Tangent</code> 는 $y$값이 <code class="language-plaintext highlighter-rouge">[-1, 1]</code> 사이에서 정의되며 기울기의 최대값은 1이다. 따라서 이전 시점 정보는 시점이 지나면 지날수록 (더 많은 셀을 통과할수록) 그라디언트 값이 작아져 미래 시점의 학습에 매우 작은 영향력을 갖게 된다. 이것이 바로 그 유명한 <code class="language-plaintext highlighter-rouge">RNN</code>의 <code class="language-plaintext highlighter-rouge">Vanishing Gradient</code> 현상이다. 사실 현상의 발생 자체는 그렇게 큰 문제가 되지 않는다. <code class="language-plaintext highlighter-rouge">RNN</code>에서 발생하는 <code class="language-plaintext highlighter-rouge">Vanishing Gradient</code> 가 문제가 되는 이유는 바로 인간이 자연어를 이해하는 메커니즘과 다른 방식으로 현상이 발생하기 때문이다. 우리가 글을 읽는 과정을 잘 떠올려 보자. 어떤 단어의 의미를 알기 위해 가까운 주변 단어의 문맥을 활용할 때도 있지만, 저 멀리 떨어진 문단의 문맥을 활용할 때도 있다. 이처럼 단어 혹은 시퀀스를 구성하는 <code class="language-plaintext highlighter-rouge">원소 사이의 관계성</code>이나 <code class="language-plaintext highlighter-rouge">어떤 다른 의미론적인 이유</code>로 <code class="language-plaintext highlighter-rouge">불균형</code>하게 현재 시점의 학습에 영향력을 갖게 되는게 아니라, 단순 <code class="language-plaintext highlighter-rouge">입력 시점</code> 때문에 불균형이 발생하기 때문에 <code class="language-plaintext highlighter-rouge">RNN</code>의 <code class="language-plaintext highlighter-rouge">Vanishing Gradient</code>가 낮은 성능의 원인으로 지목되는 것이다.</p>

<p>다시 말해, 실제 자연어의 문맥을 파악해 그라디언트에 반영하는게 아니라 단순히 시점에 따라서 그 영향력을 반영하게 된다는 것이다. 멀리 떨어진 시퀀스의 문맥이 필요한 경우를 <code class="language-plaintext highlighter-rouge">Recurrent</code> 구조는 정확히 학습할 수 없다.</p>

<p>그렇다면 활성 함수를 <code class="language-plaintext highlighter-rouge">relu</code> 혹은 <code class="language-plaintext highlighter-rouge">gelu</code> 를 사용하면 위 문제를 해결할 수 있을까? <code class="language-plaintext highlighter-rouge">Vanishing Graident</code> 문제는 해결할 수도 있으나 <code class="language-plaintext highlighter-rouge">hidden_state</code> 값이 발산할 것이다. 그 이유는 두 활성 함수 모두 양수 구간에서 선형인데, 이전 정보를 누적해서 가중치와 곱하고 현재 입력값에 더하는 <code class="language-plaintext highlighter-rouge">RNN</code>의 구조를 생각해보면 넘어오는 이전 정보는 누적되면서 점점 커질 것이고 그러다 결국 발산하게 된다.</p>

<p>결론적으로 <code class="language-plaintext highlighter-rouge">Vanishing Gradient</code> 현상 자체가 문제는 아니지만 모델이 자연어의 문맥을 파악해 그라디언트에 반영하는게 아니라 단순히 시점에 따라서 불균형하게 발생하기 때문에 낮은 성능의 원인으로 지목 받는 것이다. 이것을 <code class="language-plaintext highlighter-rouge">long-term dependency</code>라고 부르기도 한다.</p>

<h4 id="️2-점점-흐려지는-inputs에-attention-activation-function-with-forward"><code class="language-plaintext highlighter-rouge">✏️ 2) 점점 흐려지는 Inputs에 Attention (Activation Function with Forward)</code></h4>

<p align="center">
<img src="/assets/images/transformer/tanh.png" alt="tanh function" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em>tanh function</em></strong>
</p>

<p><code class="language-plaintext highlighter-rouge">Hyperbolic Tangent</code> 은  $y$값이 <code class="language-plaintext highlighter-rouge">[-1, 1]</code> 사이에서 정의된다고 했다. 다시 말해 셀의 출력값이 항상 일정 범위값( <code class="language-plaintext highlighter-rouge">[-1,1]</code> )으로 제한(가중치, 편향 더하는 것은 일단 제외) 된다는 것이다. 따라서 한정된 좁은 범위에 출력값들이 맵핑되는데, 이는 결국 입력값의 정보는 대부분 소실된 채 일부 특징만 정제 되어 출력되고 다음 레이어로 <code class="language-plaintext highlighter-rouge">forward</code> 됨을 의미한다. 그래프를 한 번 살펴보자. 특히 <code class="language-plaintext highlighter-rouge">Inputs</code> 값이 2.5 이상인 경우부터는 출력값이 거의 1에 수렴해 그 차이를 직관적으로 파악하기 힘들다. 이러한 활성함수가 수십개, 수백개 쌓인다면 결국 원본 정보는 매우 흐려지고 뭉개져서 다른 인스턴스와 구별이 힘들어 질 것이다.</p>

<h4 id="3-디코더가-가장-마지막-단어만-열심히-보고-denoising-수행-seq2seq-with-bi-directional-rnn"><code class="language-plaintext highlighter-rouge">🔬 3) 디코더가 가장 마지막 단어만 열심히 보고 denoising 수행 (Seq2Seq with Bi-Directional RNN)</code></h4>

<p><code class="language-plaintext highlighter-rouge">“쓰다”</code> ($t_7$)라는 단어의 뜻을 이해하려면 <code class="language-plaintext highlighter-rouge">“돈을”</code>, <code class="language-plaintext highlighter-rouge">“모자를”</code>, <code class="language-plaintext highlighter-rouge">“맛이”</code>, <code class="language-plaintext highlighter-rouge">“글을”</code>($t_1$)과 같이 멀리 있는 앞 단어를 봐야 알 수 있는데, $h_7$ 에는 $t_1$이 흐려진 채로 들어가 있어서 $t_7$의 제대로 된 의미를 포착하지 못한다. 심지어 언어가 영어라면 뒤를 봐야 정확한 문맥을 알 수 있는데 <code class="language-plaintext highlighter-rouge">Vanilla RNN</code>은 단방향으로만 학습을 하게 되어 문장의 뒷부분 문맥은 반영조차(뒤에 위치한 목적어에 따라서 쓰다라는 단어의 뉘앙스는 달라짐) 할 수 없다. 그래서 <code class="language-plaintext highlighter-rouge">Bi-directional RNN</code> 써야하는데, 이것도 역시도 여전히 <code class="language-plaintext highlighter-rouge">“거리”</code>에 영향 받는다는 건 변하지 않기 때문에 근본적인 해결책이라 볼 수 없다. 즉 인코덜</p>

<p>한편, 디코더의 <code class="language-plaintext highlighter-rouge">Next Token Prediction</code> 성능은 무조건 인코더로부터 받는 <code class="language-plaintext highlighter-rouge">Context Vector</code>의 품질에 따라 좌지우지 된다. 그러나 Recurrent 구조의 인코더로부터 나온 Context Vector는 앞서 서술한 것처럼 좋은 품질(뒤쪽 단어가 상대적으로 선명함)이 아니다. 따라서 디코더의 번역(다음 단어 예측) 성능 역시 좋을리가 없다.</p>

<p>결국 <code class="language-plaintext highlighter-rouge">Recurrent</code> 구조 자체에 명확한 한계가 존재하여 인간이 자연어를 사용하고 이해하는 맥락과 다른 방식으로 동작햐게 되었다. <code class="language-plaintext highlighter-rouge">LSTM</code>, <code class="language-plaintext highlighter-rouge">GRU</code>의 제안으로 어느 정도 문제를 완화 시켰으나, 앞에서 서술했듯이 태생이 <code class="language-plaintext highlighter-rouge">Recurrent Structure</code>을 가지기 때문에 근본적인 해결책이 되지는 못했다. 그렇다면 이제 <code class="language-plaintext highlighter-rouge">Transformer</code>가 어떻게 위에 서술한 3가지 문제를 해결하고 현재의 위상을 갖게 되었는지 알아보자.</p>

<h3 id="modeling"><strong><code class="language-plaintext highlighter-rouge">🌟 Modeling</code></strong></h3>

<p align="center">
<img src="/assets/images/transformer/transformer_overview.png" alt="Attention Is All You Need" class="align-center image-caption" width="50%&quot;, height=&quot;50%" />
<strong><em><a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a></em></strong>
</p>

<p>앞서 <code class="language-plaintext highlighter-rouge">Recurrent</code> 구조의 <code class="language-plaintext highlighter-rouge">Vanishing Gradient</code> 을 설명하면서 시점에 따라 정보를 소실하게 되는 현상은 인간의 자연어 이해 방식이 아니라는 점을 언급한 적 있다. 따라서 <code class="language-plaintext highlighter-rouge">Transformer</code>는 최대한 인간의 자연어 이해 방식을 수학적으로 모델링 하는 것에 초점을 맞췄다. 우리가 쓰여진 글을 이해하기 위해 하는 행동들을 떠올려 보자. <strong><code class="language-plaintext highlighter-rouge">“Apple”</code><u>이란 단어가 사과를 말하는 것인지, 브랜드 애플을 지칭하는 것인지 파악하기 위해 같은 문장에 속한 주변 단어를 살피기도 하고 그래도 파악하기 힘들다면 앞뒤 문장, 나아가 문서 전체 레벨에서 맥락을 파악하기 위해 노력한다.</u></strong> <code class="language-plaintext highlighter-rouge">Transformer</code> 연구진은 바로 이 과정에 주목했으며 이것을 모델링하여 그 유명한 <code class="language-plaintext highlighter-rouge">Self-Attention</code>을 고안해낸다.</p>

<p align="center">
<img src="/assets/images/transformer/word_embedding.png" alt="Word Embedding Space" class="align-center image-caption" width="50%&quot;, height=&quot;50%" />
<strong><em><a href="https://www.researchgate.net/figure/Visualization-of-the-word-embedding-space_fig4_343595281/download">Word Embedding Space</a></em></strong>
</p>

<p>다시 말해 <code class="language-plaintext highlighter-rouge">Self-Attention</code>은 토큰의 의미를 이해하기 위해 <code class="language-plaintext highlighter-rouge">전체 입력 시퀀스</code> 중에서 어떤 단어에 주목해야할지를 수학적으로 표현한 것이라 볼 수 있다. <strong><u>좀 더 구체적으로는 시퀀스에 속한 여러 토큰 벡터(행백터)를 임베딩 공간 어디에 배치할 것인가에 대해 훈련하는 행위다.</u></strong></p>

<p align="center">
<img src="/assets/images/transformer/scaled_dot_attention.png" alt="Scaled Dot-Product Attention" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em><a href="https://arxiv.org/abs/1706.03762">Scaled Dot-Product Attention</a></em></strong>
</p>

<p>그렇다면 이제부터 <code class="language-plaintext highlighter-rouge">Transformer</code> 가 어떤 아이데이션을 통해 기존 순환 신경망 모델의 단점을 해결하고 딥러닝계의 <code class="language-plaintext highlighter-rouge">G.O.A.T</code> 자리를 차지했는지 알아보자. 모델은 크게 인코더와 디코더 부분으로 나뉘는데, 하는 역할과 미세한 구조상의 차이만 있을뿐 두 모듈 모두 <code class="language-plaintext highlighter-rouge">Self-Attention</code>이 제일 중요하다는 본질은 변하지 않는다. 따라서 <code class="language-plaintext highlighter-rouge">Input Embedding</code>부터 차례대로 살펴보되,  <code class="language-plaintext highlighter-rouge">Self-Attention</code> 은 특별히 사용된 하위 블럭 단위를 빠짐 없이, 세세하게 살펴볼 것이다.</p>

<p align="center">
<img src="/assets/images/transformer/class_diagram.png" alt="Class Diagram" class="align-center image-caption" width="35%&quot;, height=&quot;50%" />
<strong><em>Class Diagram</em></strong>
</p>

<p>이렇게 하위 모듈에 대한 설명부터 쌓아 나가 마지막에는 실제 구현 코드와 함께 전체적인 구조 측면에서도 모델을 해석해볼 것이다. 끝까지 포스팅을 읽어주시길 바란다.</p>

<h4 id="-input-embedding"><code class="language-plaintext highlighter-rouge">🔬 Input Embedding</code></h4>

\[X_E \in R^{B * S_E * V_E} \\
X_D \in R^{B * S_D * V_D}\]

<p><code class="language-plaintext highlighter-rouge">Transformer</code>는 인코더와 디코더로 이뤄진 <code class="language-plaintext highlighter-rouge">seq2seq</code> 구조를 가지고 있다. 즉, 대상 언어를 타겟 언어로 번역하는데 목적을 두고 있기 때문에 입력으로 대상 언어 시퀀스와 타겟 언어 시퀀스 모두 필요하다. $X_E$는 <code class="language-plaintext highlighter-rouge">인코더</code>의 입력 행렬을 나타내고, $X_D$는 <code class="language-plaintext highlighter-rouge">디코더</code>의 입력 행렬을 의미한다. 이 때, $B$는 <code class="language-plaintext highlighter-rouge">batch size</code>, $S$는 <code class="language-plaintext highlighter-rouge">max_seq</code>, $V$는 개별 모듈이 가진 <code class="language-plaintext highlighter-rouge">Vocab</code>의 사이즈를 가리킨다. 위 수식은 사실 논문에 입력에 대한 수식이 따로 서술 되어 있지 않아, 필자가 직접 만든 것이다. 앞으로도 해당 기호를 이용해 수식을 표현할 예정이니 참고 바란다.</p>

\[W_E \in R^{V_E * d} \\
W_D \in R^{V_D * d} \\\]

<p>이렇게 정의된 입력값을 개별 모듈의 임베딩 레이어에 통과 시킨 결과물이 바로 <code class="language-plaintext highlighter-rouge">Input Embedding</code>이 된다. $d$는 <code class="language-plaintext highlighter-rouge">Transformer</code> 모델의 은닉층의 크기를 의미한다. 따라서 <code class="language-plaintext highlighter-rouge">Position Embedding</code> 과 더해지기 전, 임베딩 레이어를 통과한 <code class="language-plaintext highlighter-rouge">Input Embedding</code>의 모양은 아래 수식과 같다.</p>

\[X_E \in R^{B*S_E*d} \\
X_D \in R^{B*S_D*d} \\\]

<p>그렇다면 실제 구현은 어떻게 할까?? <code class="language-plaintext highlighter-rouge">Transformer</code> 의 <code class="language-plaintext highlighter-rouge">Input Embedding</code>은 <code class="language-plaintext highlighter-rouge">nn.Embedding</code>으로 레이어를 정의해 사용한다. <code class="language-plaintext highlighter-rouge">nn.Linear</code>도 있는데 왜 굳이 <code class="language-plaintext highlighter-rouge">nn.Embedding</code>을 사용하는 것일까??</p>

<p>자연어 처리에서 입력 임베딩을 만들때는 모델의 토크나이저에 의해 사전 정의된 <code class="language-plaintext highlighter-rouge">vocab</code>의 사이즈가 입력 시퀀스에 속한 토큰 개수보다 훨씬 크기 때문에 데이터 룩업 테이블 방식의 <code class="language-plaintext highlighter-rouge">nn.Embedding</code> 을 사용하게 된다. 이게 무슨 말이냐면, 토크나이저에 의해 사전에 정의된 <code class="language-plaintext highlighter-rouge">vocab</code> 전체가 <code class="language-plaintext highlighter-rouge">nn.Embedding(vocab_size, dim_model)</code>로 투영 되어 가로는 <code class="language-plaintext highlighter-rouge">vocab</code> 사이즈, 세로는 모델의 차원 크기에 해당하는 룩업 테이블이 생성되고, 내가 입력한 토큰들은 전체 <code class="language-plaintext highlighter-rouge">vocab</code>의 일부분일테니 전체 임베딩 룩업 테이블에서 내가 임베딩하고 싶은 토큰들의 인덱스만 알아낸다는 것이다. 그래서 <code class="language-plaintext highlighter-rouge">nn.Embedding</code> 은 레이어에 정의된 차원과 실제 입력 데이터의 차원이 맞지 않아도 함수가 동작하게 된다. <code class="language-plaintext highlighter-rouge">nn.Linear</code> 와 입력 차원에 대한 조건 빼고는 동일한 동작을 수행하기 때문에 사전 정의된 <code class="language-plaintext highlighter-rouge">vocab</code> 사이즈와 입력 시퀀스의 토큰 개수가 같다면 <code class="language-plaintext highlighter-rouge">nn.Linear</code>를 사용해도 무방하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Input Embedding Example
</span>
<span class="k">class</span> <span class="nc">Transformer</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="bp">self</span><span class="p">,</span>
        <span class="n">enc_vocab_size</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="n">dec_vocab_size</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="n">max_seq</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">512</span><span class="p">,</span>
        <span class="n">enc_N</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span>
        <span class="n">dec_N</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span>
        <span class="n">dim_model</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">512</span><span class="p">,</span> <span class="c1"># latent vector space
</span>        <span class="n">num_heads</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">dim_ffn</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">2048</span><span class="p">,</span>
        <span class="n">dropout</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.1</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">Transformer</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">enc_input_embedding</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Embedding</span><span class="p">(</span><span class="n">enc_vocab_size</span><span class="p">,</span> <span class="n">dim_model</span><span class="p">)</span> <span class="c1"># Encoder Input Embedding Layer
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">dec_input_embedding</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Embedding</span><span class="p">(</span><span class="n">dec_vocab_size</span><span class="p">,</span> <span class="n">dim_model</span><span class="p">)</span> <span class="c1"># Decoder Input Embedding Layer
</span>	
	<span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">enc_inputs</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">,</span> <span class="n">dec_inputs</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">,</span> <span class="n">enc_pad_index</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">dec_pad_index</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="n">Tensor</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">]:</span>
            <span class="n">enc_x</span><span class="p">,</span> <span class="n">dec_x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">enc_input_embedding</span><span class="p">(</span><span class="n">enc_inputs</span><span class="p">),</span> <span class="bp">self</span><span class="p">.</span><span class="n">dec_input_embedding</span><span class="p">(</span><span class="n">dec_inputs</span><span class="p">)</span>
</code></pre></div></div>

<p>위의 예시 코드를 함께 살펴보자. <code class="language-plaintext highlighter-rouge">__init__</code> 의 <code class="language-plaintext highlighter-rouge">self.enc_input_embedding</code>, <code class="language-plaintext highlighter-rouge">self._dec_input_embedding</code>이 바로 $W_E, W_D$에 대응된다. 한편 <code class="language-plaintext highlighter-rouge">forward</code> 메서드에 정의된 <code class="language-plaintext highlighter-rouge">enc_x</code>, <code class="language-plaintext highlighter-rouge">dec_x</code> 는 임베딩 레이어를 거치고 나온 $X_E, X_D$에 해당된다.</p>

<p>한편, $X_E, X_D$은 각각 인코더, 디코더 모듈로 흘러 들어가 <code class="language-plaintext highlighter-rouge">Absolute Position Embedding</code>과 더해진(행렬 합) 뒤, 개별 모듈의 입력값으로 활용된다.</p>

<p><strong><code class="language-plaintext highlighter-rouge">🔢 Absolute Position Embedding(Encoding)</code></strong></p>

<p><code class="language-plaintext highlighter-rouge">Absolute Position Embedding(Encoding)</code>은 입력 시퀀스에 위치 정보를 맵핑해주는 역할을 한다. 필자는 개인적으로 <code class="language-plaintext highlighter-rouge">Transformer</code>에서 가장 중요한 요소를 뽑으라고 하면 세 손가락 안에 들어가는 파트라고 생각한다. 다음 파트에서 자세히 기술하겠지만, <code class="language-plaintext highlighter-rouge">Self-Attention(내적)</code>은 입력 시퀀스를 병렬로 한꺼번에 처리할 수 있다는 장점을 갖고 있지만, 그 자체로는 토큰의 위치 정보를 인코딩할 수 없다. 우리가 따로 위치 정보를 알려주지 않는 이상 쿼리 행렬의 2번째 행벡터가 입력 시퀀스에서 몇 번째 위치한 토큰인지 모델은 알 길이 없다.</p>

<p>그런데, 텍스트는 <code class="language-plaintext highlighter-rouge">Permutation Equivariant</code>한 <code class="language-plaintext highlighter-rouge">Bias</code> 가 있기 때문에 토큰의 위치 정보는 <code class="language-plaintext highlighter-rouge">NLP</code>에서 매우 중요한 요소로 꼽힌다. <strong>직관적으로도 토큰의 순서는 시퀀스가 내포하는 의미에 지대한 영향을 끼친다는 것을 알 수 있다.</strong> 예를 들어 <code class="language-plaintext highlighter-rouge">“철수는 영희를 좋아한다”</code>라는 문장과 <code class="language-plaintext highlighter-rouge">“영희는 철수를 좋아한다”</code>라는 문장의 의미가 같은가 생각해보자. 주어와 목적어 위치가 바뀌면서 정반대의 뜻이 되어버린다.</p>

<p align="center">
<img src="/assets/images/transformer/positional_encoding.png" alt="Positional Encoding Example" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em><a href="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/56cf1596-c770-410c-8053-5876c3c66fff/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-10-09_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_5.13.48.png">Positional Encoding Example</a></em></strong>
</p>

<p>따라서 저자는 입력 입베딩에 위치 정보를 추가하고자 <code class="language-plaintext highlighter-rouge">Position Encoding</code> 을 제안한다. 사실 <code class="language-plaintext highlighter-rouge">Position Encoding</code> 은 여러 단점 때문에 후대 <code class="language-plaintext highlighter-rouge">Transformer</code>  파생 모델에서는 잘 사용되지 않는 추세다. 대신 모델이 학습을 통해 최적값을 찾아주는 <code class="language-plaintext highlighter-rouge">Position Embedding</code> 방식을 대부분 차용하고 있다. 필자 역시 <code class="language-plaintext highlighter-rouge">Position Embedding</code> 을 사용해 위치 임베딩을 구현했기 때문에 원리와 단점에 대해서만 간단히 소개하고 넘어가려 한다. 또한 저자 역시 논문에서 두 방식 중 어느 것을 써도 비슷한 성능을 보여준다고 언급하고 있다.</p>

\[P_E \in R^{B*S_E*D} \\
 P_D \in R^{B*S_D*D} \\
P(pos, 2i) = sin(pos/\overset{}
  {10000_{}^{2i/dmodel}}) \\
P(pos, 2i+1) = cos(pos/\overset{}
  {10000_{}^{2i/dmodel}})\]

<p><strong>원리는 매우 간단하다. 사인함수와 코사인 함수의 주기성을 이용해 개별 인덱스의 행벡터 값을 표현하는 것이다.</strong> 행벡터의 원소 중에서 짝수번째 인덱스에 위치한 원소는 (짝수번째 열벡터) \(sin(pos/\overset{}{10000_{}^{2i/dmodel}})\) 의 함숫값을 이용해 채워넣고, 홀수번째 원소는 \(cos(pos/\overset{}{10000_{}^{2i/dmodel}})\)를 이용해 채워넣는다.</p>

<p align="center">
<img src="/assets/images/transformer/sin_cos_graph.png" alt="periodic function graph" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em>periodic function graph</em></strong>
</p>

<p>초록색 그래프는 \(sin(pos/\overset{}{10000_{}^{2i/dmodel}})\), 주황색 그래프는 \(cos(pos/\overset{}{10000_{}^{2i/dmodel}})\)를 시각화했다. 지면의 제한으로 <code class="language-plaintext highlighter-rouge">max_seq=512</code> 만큼의 변화량을 담지는 못했지만, x축이 커질수록 두 함수 모두 진동 주기가 조금씩 커지는 양상을 보여준다. 따라서 개별 인덱스(행벡터)를 중복되는 값 없이 표현하는 것이 가능하다고 저자는 주장한다.</p>

<p align="center">
<img src="/assets/images/transformer/positional_encoding_result.png" alt="Positional Encoding Result" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em><a href="https://wikidocs.net/162099">Positional Encoding Result</a></em></strong>
</p>

<p>위 그림은 토큰 <code class="language-plaintext highlighter-rouge">256</code>개로 구성된 시퀀스에 대해 <code class="language-plaintext highlighter-rouge">Positional Encoding</code>한 결과를 시각화한 자료다. 그래프의 $x$축은 <code class="language-plaintext highlighter-rouge">행벡터의 원소</code>이자 <code class="language-plaintext highlighter-rouge">Transformer</code>의 은닉 벡터 차원을 가리키고, $y$축은 <code class="language-plaintext highlighter-rouge">시퀀스의 인덱스</code>(행벡터)를 의미한다. 육안으로 정확하게 차이를 인식하기 쉽지는 않지만, 행벡터가 모두 유니크하게 표현된다는 사실(직접 실수값을 확인해보면 정말 미세한 차이지만 개별 토큰의 희소성이 보장)을 알 수 있다. 작은 차이를 시각화 자료로 파악하기는 쉽지 않기 때문에 진짜 그런가 궁금하신 분들은 직접 실수값을 구해보는 것을 추천드린다.</p>

<p><strong>여기서 행벡터의 희소성이란 개별 행벡터 원소의 희소성을 말하는게 아니다.</strong> 0번 토큰, 4번 토큰, 9번 토큰의 행벡터 1번째 원소의 값은 같을 수 있다. 하지만 진동 주기가 갈수록 커지는 주기함수를 사용하기 때문에 다른 원소(차원)값은 다를 것이라 기대할 수 있는데, <strong>바로 이것을 행벡터의 희소성이라고 정의하는 것이다.</strong> 만약 1번 토큰과 2번 토큰의 모든 행벡터 원소값이 같다면 그것은 희소성 원칙에 위배되는 상황이다.</p>

<p align="center">
<img src="/assets/images/transformer/encoding.png" alt="Positional Encoding" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
</p>

<p align="center">
<img src="/assets/images/transformer/embedding.png" alt="Compare Performance between Encoding and Embedding" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em><a href="https://arxiv.org/abs/1706.03762">Compare Performance between Encoding and Embedding</a></em></strong>
</p>

<p>비록 개별 행벡터의 희소성이 보장된다고 해도 <code class="language-plaintext highlighter-rouge">Position Encoding</code>은 <code class="language-plaintext highlighter-rouge">not trainable</code>해서 <code class="language-plaintext highlighter-rouge">static</code>하다는 단점이 있다. 모든 배치의 시퀀스가 동일한 위치 정보값을 갖게 된다는 것이다. <code class="language-plaintext highlighter-rouge">512</code>개의 토큰으로 구성된 시퀀스 A와 B가 있다고 가정해보자. 이 때 시퀀스 A는 문장 <code class="language-plaintext highlighter-rouge">5</code>개로 구성 되어 있고, B는 문장 <code class="language-plaintext highlighter-rouge">12</code>개로 만들어졌다. 두 시퀀스의 <code class="language-plaintext highlighter-rouge">11</code>번째 토큰의 문장 성분은 과연 같을까?? 아마도 대부분의 경우에 다를 것이다. 텍스트 데이터에서 순서 정보가 중요한 이유 중 하나는 바로 <code class="language-plaintext highlighter-rouge">syntactical</code> 한 정보를 포착하기 위함이다. <code class="language-plaintext highlighter-rouge">Position Encoding</code>은 <code class="language-plaintext highlighter-rouge">static</code> 하기 때문에 이러한 타입의 정보를 인코딩 하기 쉽지 않다. 그래서 좀 더 풍부한 표현을 담을 수 있는 <code class="language-plaintext highlighter-rouge">Position Embedding</code>을 사용하는 것이 최근 추세다.</p>

<p><strong><code class="language-plaintext highlighter-rouge">✏️ Position Embedding</code></strong></p>

<p>그렇다면 이제 <code class="language-plaintext highlighter-rouge">Position Embedding</code>에 대해 알아보자. <code class="language-plaintext highlighter-rouge">Position Embedding</code> 은 <code class="language-plaintext highlighter-rouge">Input Embedding</code>을 정의한 방식과 거의 유사하다. 먼저 입력값과 <code class="language-plaintext highlighter-rouge">weight</code> 의 모양부터 확인해보자.</p>

\[P_E \in R^{B*S_E*d} \\
P_D \in R^{B*S_d*d} \\
W_{P_E} \in R^{S_E * d} \\
W_{P_D} \in R^{S_D * d} \\\]

<p>$P_E, P_D$는 개별 모듈의 위치 임베딩 레이어 입력을 가리키며, $W_{P_E}, W_{P_D}$가 개별 모듈의 위치 임베딩 레이어가 된다. 이제 이것을 코드로 어떻게 구현하는지 살펴보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Absolute Position Embedding Example
</span>
<span class="k">class</span> <span class="nc">Encoder</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="s">"""
    In this class, encode input sequence and then we stack N EncoderLayer
    First, we define "positional embedding" and then add to input embedding for making "word embedding"
    Second, forward "word embedding" to N EncoderLayer and then get output embedding
    In official paper, they use positional encoding, which is base on sinusoidal function(fixed, not learnable)
    But we use "positional embedding" which is learnable from training
    Args:
        max_seq: maximum sequence length, default 512 from official paper
        N: number of EncoderLayer, default 6 for base model
    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">max_seq</span><span class="p">:</span> <span class="mi">512</span><span class="p">,</span> <span class="n">N</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span> <span class="n">dim_model</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">512</span><span class="p">,</span> <span class="n">num_heads</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">dim_ffn</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">2048</span><span class="p">,</span> <span class="n">dropout</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">Encoder</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">max_seq</span> <span class="o">=</span> <span class="n">max_seq</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">scale</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">(</span><span class="n">dim_model</span><span class="p">))</span>  <span class="c1"># scale factor for input embedding from official paper
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">positional_embedding</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Embedding</span><span class="p">(</span><span class="n">max_seq</span><span class="p">,</span> <span class="n">dim_model</span><span class="p">)</span>  <span class="c1"># add 1 for cls token
</span>
		<span class="p">...</span> <span class="n">중략</span> <span class="p">...</span>
		<span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputs</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">,</span> <span class="n">mask</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="n">Tensor</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">]:</span>
        <span class="s">"""
        inputs: embedding from input sequence, shape =&gt; [BS, SEQ_LEN, DIM_MODEL]
        mask: mask for Encoder padded token for speeding up to calculate attention score
        """</span>
        <span class="n">layer_output</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">pos_x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">max_seq</span><span class="p">).</span><span class="n">repeat</span><span class="p">(</span><span class="n">inputs</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="n">to</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">dropout</span><span class="p">(</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">scale</span> <span class="o">*</span> <span class="n">inputs</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">positional_embedding</span><span class="p">(</span><span class="n">pos_x</span><span class="p">)</span>  <span class="c1"># layernorm 적용하고
</span>        <span class="p">)</span>
		<span class="p">...</span> <span class="n">중략</span> <span class="p">...</span> 
</code></pre></div></div>

<p>위 코드는 <code class="language-plaintext highlighter-rouge">Transformer</code>의 인코더 모듈을 구현한 것이다. 그래서 <code class="language-plaintext highlighter-rouge">forward</code> 메서드의 <code class="language-plaintext highlighter-rouge">pos_x</code> 가 바로 $P_E$가 되며, <code class="language-plaintext highlighter-rouge">__init__</code>의 <code class="language-plaintext highlighter-rouge">self.positional_embedding</code>이 바로 $W_{P_E}$에 대응된다. 이렇게 정의한 <code class="language-plaintext highlighter-rouge">Position Embedding</code>은 <code class="language-plaintext highlighter-rouge">Input Embedding</code>과 더해서 <code class="language-plaintext highlighter-rouge">Word Embedding</code> 을 만든다. <code class="language-plaintext highlighter-rouge">Word Embedding</code> 은 다시 개별 모듈의 <code class="language-plaintext highlighter-rouge">linear projection</code> 레이어에 대한 입력 $X$로 사용 된다.</p>

<p><strong>한편,</strong> <code class="language-plaintext highlighter-rouge">Input Embedding</code> <strong>과</strong> <code class="language-plaintext highlighter-rouge">Position Embedding</code><strong>을 더한다는 것에 주목해보자. 필자는 본 논문을 보며 가장 의문이 들었던 부분이다. 도대체 왜 완전히 서로 다른 출처에서 만들어진 행렬 두개를</strong> <code class="language-plaintext highlighter-rouge">concat</code> <strong>하지 않고 더해서 사용했을까??</strong> <code class="language-plaintext highlighter-rouge">concat</code><strong>을 이용하면 <code class="language-plaintext highlighter-rouge">Input</code>과 <code class="language-plaintext highlighter-rouge">Position</code> 정보를 서로 다른 차원에 두고 학습하는게 가능했을텐데 말이다.</strong></p>

<p><strong><code class="language-plaintext highlighter-rouge">🤔 Why Sum instead of Concatenate</code></strong></p>

<p>행렬합을 사용하는 이유에 대해 저자가 특별히 언급하지는 않아서 때문에 정확한 의도를 알 수 없지만, <strong>추측하건데 <code class="language-plaintext highlighter-rouge">blessing of dimensionality</code> 효과를 의도했지 않았나 싶다.</strong> <code class="language-plaintext highlighter-rouge">blessing of dimensionality</code> 란, 고차원 공간에서 무작위로 서로 다른 벡터 두개를 선택하면 두 벡터는 거의 대부분 <code class="language-plaintext highlighter-rouge">approximate orthogonality</code>를 갖는 현상을 설명하는 용어다. 무조건 성립하는 성질은 아니고 확률론적인 접근이라는 것을 명심하자. 아무튼 직교하는 두 벡터는 내적값이 0에 수렴한다. 즉, 두 벡터는 서로에게 영향을 미치지 못한다는 것이다. 이것은 전체 모델의 <code class="language-plaintext highlighter-rouge">hidden states space</code> 에서 <code class="language-plaintext highlighter-rouge">Input Embedding</code> 과 <code class="language-plaintext highlighter-rouge">Position Embedding</code> 역시 개별 벡터가 <code class="language-plaintext highlighter-rouge">span</code> 하는 부분 공간 끼리는 서로 직교할 가능성이 매우 높다는 것을 의미한다. 따라서 서로 다른 출처를 통해 만들어진 두 행렬을 더해도 서로에게 영향을 미치지 못할 것이고 그로 인해 모델이 <code class="language-plaintext highlighter-rouge">Input</code>과 <code class="language-plaintext highlighter-rouge">Position</code> 정보를 따로 잘 학습할 수 있을 것이라 기대해볼 수 있다. 가정대로만 된다면, <code class="language-plaintext highlighter-rouge">concat</code> 을 사용해 모델의 <code class="language-plaintext highlighter-rouge">hidden states space</code> 를 늘려 <code class="language-plaintext highlighter-rouge">Computational Overhead</code> 를 유발하는 것보다 훨씬 효율적이라고 볼 수 있겠다.</p>

<p>한편 <code class="language-plaintext highlighter-rouge">blessing of dimensionality</code>에 대한 설명과 증명은 꽤나 많은 내용이 필요해 여기서는 자세히 다루지 않고, 다른 포스트에서 따로 다루겠다. 관련하여 좋은 내용을 담고 있는 글의 링크를 같이 첨부했으니 읽어보실 것을 권한다(<a href="https://softwaredoug.com/blog/2022/12/26/surpries-at-hi-dimensions-orthoginality.html">링크1</a>, <a href="https://www.reddit.com/r/MachineLearning/comments/cttefo/comment/exs7d08/">링크2</a>).</p>

<h4 id="-self-attention-with-linear-projection"><code class="language-plaintext highlighter-rouge">📐 Self-Attention with linear projection</code></h4>

<p>왜 이름이 <code class="language-plaintext highlighter-rouge">self-attention</code>일까 먼저 고민해보자. 사실 <code class="language-plaintext highlighter-rouge">attention</code> 개념은 본 논문이 발표되기 이전부터 사용되던 개념이다. <code class="language-plaintext highlighter-rouge">attention</code>은 <code class="language-plaintext highlighter-rouge">seq2seq</code> 구조에서 처음 나왔는데, <code class="language-plaintext highlighter-rouge">seq2seq</code> 은 번역 성능을 높이는 것을 목적으로 고안된 구조라서, 목표인 디코더의 <code class="language-plaintext highlighter-rouge">hidden_states</code> 값을 쿼리로, 인코더의 <code class="language-plaintext highlighter-rouge">hidden_states</code>를 키, 벨류의 출처로 사용했다. 즉, 서로 다른 출처에서 나온 <code class="language-plaintext highlighter-rouge">hidden_states</code> 을 사용해 내적 연산을 수행했던 것이다. 이런 개념에 이제 <code class="language-plaintext highlighter-rouge">“self"</code> 라는 이름이 붙었다. 결국 같은 출처에서 나온 <code class="language-plaintext highlighter-rouge">hidden_states</code> 를 내적하겠다는 의미를 내포하고 있는 것이다. 내적은 두 벡터의 <code class="language-plaintext highlighter-rouge">“닮은 정도”</code> 를 수학적으로 계산한다. 따라서 <code class="language-plaintext highlighter-rouge">self-attention</code> 이란 간단하게, 같은 출처에서 만들어진 $Q$(쿼리), $K$(키), $V$(벨류)가 <code class="language-plaintext highlighter-rouge">서로 얼마나 닮았는지</code> 계산해보겠다는 것이다.</p>

<p align="center">
<img src="/assets/images/transformer/linear_projection.png" alt="self-attention with linear projection" class="align-center image-caption" width="50%&quot;, height=&quot;50%" />
<strong><em><a href="https://jalammar.github.io/illustrated-transformer/">self-attention with linear projection</a></em></strong>
</p>

<p>그렇다면 이제 $Q$(쿼리), $K$(키), $V$(벨류)의 정체, 같은 출처에서 나왔다는 말의 의미 그리고 입력 행렬 $X$를 <code class="language-plaintext highlighter-rouge">linear projection</code> 하여 $Q$(쿼리), $K$(키), $V$(벨류) 행렬을 만드는 이유를 <strong>구체적인 예시를 통해 이해해보자.</strong> 추가로 $Q$(쿼리), $K$(키), $V$(벨류) 개념은 <code class="language-plaintext highlighter-rouge">Information Retrieval</code>에서 먼저 파생된 개념이라서 예시 역시 정보 검색과 관련된 것으로 준비했다.</p>

<p>당신이 만약 <code class="language-plaintext highlighter-rouge">“에어컨 필터 청소하는 방법”</code>이 궁금해 구글에 검색하는 상황이라고 가정해보겠다. <strong>목표는 가장 빠르고 정확하게 내가 원하는 필터 청소 방법에 대한 지식을 획득하는 것이다.</strong> <strong><code class="language-plaintext highlighter-rouge">그렇다면 당신은 뭐라고 구글 검색창에 검색할 것인가??</code></strong> <strong>이것이 바로</strong> $Q$<strong>(쿼리)에 해당한다.</strong> 당신은 검색창에 <code class="language-plaintext highlighter-rouge">“에어컨 필터 청소하는 방법”</code>을 입력해 검색 결과를 반환 받았다. <strong>반환 받은 결과물의 집합이 바로</strong> $K$<strong>(키)가 된다.</strong> 당신은 총 100개의 블로그 게시물을 키 값으로 받았다. 그래서 당신이 사용하는 삼성 무풍 에어컨의 필터 청소법이 정확히 적힌 게시물을 찾기 위해 하나 하나 링크를 타고 들어가 보았다. 하지만 정확하게 원하는 정보가 없어서 계속 찾다보니 결국 4페이지 쯤에서 원하던 정보가 담긴 게시물을 찾을 수 있었다. <strong>이렇게 내가 원하는 정보인지 아닌지 대조하는 과정이 바로</strong> $Q$<strong>(쿼리)와</strong> $K$<strong>(키) 행렬을</strong> <code class="language-plaintext highlighter-rouge">내적</code><strong>하는 행위가 된다.</strong> 곧바로 에어컨 청소를 하려고 보니, 방법을 까먹어서 매년 여름마다 검색을 해야할 것 같아 해당 게시물을 북마크에 저장해두었다. <strong>여기서 북마크가 바로</strong> $V$<strong>(벨류) 행렬이 된다.</strong></p>

<p>이 모든 과정에 10분이 걸렸다. 겨우 필터 청소 방법을 찾는데 10분이라니 당신은 자존심이 상했다. <code class="language-plaintext highlighter-rouge">더 빨리 원하는 정보(손실 함수 최적화)</code>를 찾을 수 있는 방법이 없을까 고민해보다가 <code class="language-plaintext highlighter-rouge">당신이 사용하는 에어컨 브랜드명(삼성 Bespoke 에어컨)을 검색어에 추가하기로 했다</code>. 그랬더니 1페이지 최하단에서 아까 4페이지에서 찾은 정보를 곧바로 찾을 수 있었다. 그 덕분에 시간을 <code class="language-plaintext highlighter-rouge">10분</code>에서 <code class="language-plaintext highlighter-rouge">1분 30초</code>로 단축시킬 수 있었다. <strong>이렇게 검색 시간을 단축(손실 줄이기)하기 위해 더 나은 검색 표현을 고민하고 수정하는 행위가 바로 입력</strong> $X$에 $W_{Q}$<strong>를 곱해 행렬</strong> $Q$ <strong>을 만드는 수식으로 표현된다.</strong></p>

<p>1년 뒤 여름, 당신은 브라우저를 바꾼 탓에 북마크가 초기화 되어 다시 한 번 검색을 해야 했다. 하지만 여전히 검색어는 기억하고 있어서, 1년전 최적의 결과를 얻었던 그대로 다시 검색을 했다. 분명 똑같이 검색을 했는데 같은 결과가 1페이지 최상단에서 반환되고 있었다. 당신은 이게 어떻게 된 일인지 궁금해 포스트를 천천히 보던 중, 제목에 1년전에는 없던 <code class="language-plaintext highlighter-rouge">삼성 Bespoke 에어컨</code> 이라는 키워드가 포함 되어 있었다. 게시물의 주인장이 <code class="language-plaintext highlighter-rouge">SEO 최적화</code>를 위해 추가했던 것이었다. 덕분에 당신은 소요 시간을 <code class="language-plaintext highlighter-rouge">1분 30초</code>에서 <code class="language-plaintext highlighter-rouge">20초</code>로 줄일 수 있었다. <strong>이런 상황이 바로 입력</strong> $X$에 $W_{K}$<strong>를 곱해 행렬</strong> $K$ <strong>를 만드는 수식에 대응된다.</strong></p>

<p>우리는 위 예시를 통해 원하는 정보를 빠르고 정확하게 찾는 행위란, 답변자가 이해하기 좋은 질문과 질문자의 질문 의도에 부합하는 좋은 답변으로 완성된다는 것을 알 수 있었다. 뿐만 아니라, 좋은 질문과 좋은 답변이라는 것은 처음부터 완성되는게 아니라 <strong>검색 시간을 단축하려는 끊임없는 노력</strong>을 통해 성취된다는 것 역시 깨우쳤다. 두가지 인사이트가 바로 <code class="language-plaintext highlighter-rouge">linear projection</code>으로 행렬 $Q, K,V$을 정의한 이유다. <strong>내가 원하는 정보인지 아닌지 대조하는 내적 연산은 수행하는데 가중치 행렬이 필요 없기 때문에 손실함수의 오차 역전을 활용한 수치 최적화를 수행할 수 없다.</strong> 그래서 손실함수 미분에 의한 최적화가 가능하도록  <code class="language-plaintext highlighter-rouge">linear projection matrix</code>를 활용해 행렬 $Q, K,V$를 정의해준 것이다. <strong>이렇게 하면 모델이 우리의 목적에 가장 적합한 질문과 답변을 알아서 표현 해줄 것이라 기대할 수 있게 된다.</strong> 한편, 같은 출처에서 나왔다는 말은 방금 예시에서 행렬 $Q, K,V$를 만드는데 동일하게 입력 $X$를 사용 것과 같은 상황을 의미한다.</p>

<p>이제 다시 자연어 처리 맥락으로 돌아와보자. <code class="language-plaintext highlighter-rouge">Transformer</code> 는 좋은 번역기를 만들기 위해 고안된 <code class="language-plaintext highlighter-rouge">seq2seq</code> 구조의 모델이다. 즉, 빠르고 정확하게 대상 언어에서 타겟 언어로 번역하는 것에 목표를 두고 만들어졌다는 것이다. 번역을 잘하기 위해서는 어떻게 해야 할까?? <strong>1) 대상 언어로 쓰인 시퀀스의 의미를 정확하게 파악해야 하고, 2) 파악한 의미와 가장 유사한 시퀀스를 타겟 언어로 만들어 내야 한다.</strong> <code class="language-plaintext highlighter-rouge">그래서 1번의 역할은 Encoder가 그리고 2번은 Decoder가 맡게 된다</code>. 인코더는 결국 (번역하는데 적합한 형태로) 대상 언어의 의미를 정확히 이해하는 방향(숫자로 표현, 임베딩 추출)으로 학습을 수행하게 되며, 디코더는 인코더의 학습 결과와 가장 유사한 문장을 타겟 언어로 생성해내는 과정을 배우게 된다. 따라서 인코더는 대상 언어를 출처로, 디코더는 타겟 언어를 출처로 행렬 $Q, K,V$를 만든다. 정확히 <code class="language-plaintext highlighter-rouge">self</code> 라는 단어를 이름에 갖다 붙인 의도와 일맥상통하는 모습이다.</p>

<p><strong>결국</strong> <code class="language-plaintext highlighter-rouge">Transformer</code> <strong>의 성능을 좌지우지 하는 것은 누가 얼마나 더</strong> <code class="language-plaintext highlighter-rouge">linear projection weight</code><strong>을 잘 최적화 하는가에 달렸다고 볼 수 있다.</strong></p>

<p><strong>한편 필자는 처음 이 논문을 읽었을 때</strong> <code class="language-plaintext highlighter-rouge">linear projection</code> <strong>자체의 필요성은 공감했으나, 굳이 3개의 행렬로 나눠서</strong> <code class="language-plaintext highlighter-rouge">train</code> <strong>시켜야 하는</strong> <code class="language-plaintext highlighter-rouge">param</code> <strong>숫자를 늘리는 것보다는</strong> <code class="language-plaintext highlighter-rouge">weight share</code> <strong>하는 형태로 만드는게 더 효율적일 것 같다는 추측을 했었다.</strong></p>

<p>그러나 이번 리뷰를 위해 다시 논문을 읽던 중, 좋은 질문을 하기 위한 노력과 좋은 답변을 하기 위한 노력, 그리고 필요한 정보를 정확히 추출해내는 행위를 각각 서로 다른 3개의 벡터로 표현했을 때 <strong>벡터들이 가지는 방향성이 서로 다를텐데</strong> 그것을 하나의 벡터로 표현하려면 모델이 학습을 하기 힘들 것 같다는 생각이 들었다. 방금 위에서 든 예시만 봐도 그렇다. 서로 다른 3개의 행위 사이의 최적 지점을 찾으라는 것과 마찬가진데 그런 스팟이 있다고 해도 언어 모델이 잘 찾을 수 있을까?? 인간도 찾기 힘든 것을 모델이 잘 찾을리가 없다.</p>

<p><strong><code class="language-plaintext highlighter-rouge">📐 Scaled Dot-Product Attention</code></strong></p>]]></content><author><name>qcqced</name><email>qcqced123@gmail.com</email></author><category term="NLP" /><category term="Natural Language Process" /><category term="Transformer" /><category term="Self-Attention" /><category term="Seq2Seq" /><category term="Encoder" /><category term="Decoder" /><summary type="html"><![CDATA[Transformer Official Paper Review with Pytorch Implementation]]></summary></entry><entry><title type="html">📈 Gradient: Directional Derivative</title><link href="http://localhost:4000/calculus/gradient" rel="alternate" type="text/html" title="📈 Gradient: Directional Derivative" /><published>2023-07-31T00:00:00+09:00</published><updated>2023-07-31T23:00:00+09:00</updated><id>http://localhost:4000/calculus/gradient</id><content type="html" xml:base="http://localhost:4000/calculus/gradient"><![CDATA[<h3 id="concept-of-gradient"><code class="language-plaintext highlighter-rouge">🤔 Concept of Gradient</code></h3>

<p>그라디언트는 다변수 함수의 기울기를 나타내는 벡터를 말한다. 그라디언트의 원소는 함수에 존재하는 모든 변수를 대상으로 편미분한 결과로 구성되는데, 예를 들어 변수가 $x_1, x_2$ 2개인 다변수 함수 $f(x_1, x_2)$가 있다고 가정해보자. 다변수 함수 $f$의 그라디언트는 아래 수식처럼 표현할 수 있다.</p>

\[f'(x_1, x_2) = \begin{vmatrix}
  \frac{∂f}{∂x_1} \\
  \frac{∂f}{∂x_2}
\end{vmatrix}\]

<p>이러한 그라디언트는 머신 러닝, 수치 최적화 학문에서 매우 중요한 개념으로 꼽힌다. 그라디언트 벡터가 가리키는 방향이 바로 다변수 함수가 특정 지점에서 가장 가파르게 증가하는 방향을 가리키기 때문이다. 이처럼 그라디언트는 함수의 입력 공간을 따라 함수가 어떻게 변화하는지를 알려주는 길잡이 역할을 하기 때문에, 그라디언트 방향을 따라 변수값을 튜닝하다 보면 함수의 최대값•최소값에 도달하여 최적화 문제를 해결할 수 있게 된다. 그렇다면 왜 그라디언트 벡터의 방향이 특정 지점에서 함수가 가장 가파르게 증가하는 방향을 나타내는 것일까?? 편미분, 도함수 정의 그리고 내적을 활용해 증명할 수 있다.</p>

<h3 id="-proof-of-gradient"><code class="language-plaintext highlighter-rouge">🪪 Proof of Gradient</code></h3>

<p align="center">
<img src="/assets/images/gradient/gradient.jpg" alt="Example of multivariate function" class="align-center image-caption" width="60%&quot;, height=&quot;25%" />
<strong><em><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=galaxyenergy&amp;logNo=221431325545">Example of multivariate function</a></em></strong>
</p>

<p>그라디언트 벡터의 방향이 함수가 가장 가파르게 증가하는 방향과 일치한다는 명제를 증명하기 위해 최단 경로로 산 정상에 오르는 과정을 떠올려보려 한다. 우리는 현재 이변수 함수로 정의되는 산 중턱 어딘가, 점 $(x_1^0, x_2^0)$를 지나고 있다. 산 정상을 최단 경로로 오르려면 어떻게 해야할까?? 가장 경사가 가파른 급경사 지대를 향해 나아가면 될 것이다. 하지만 산 중턱에 있는 우리가 어느 방향이 가장 가파른 급경사 지대인지 직관적으로 알 길이 없다. 그래서 방향 도함수를 도입해 급경사 지대로 향할 수 있는 방향을 구해 보기로 했다. 아래 수식을 보자.</p>

\[\lim_{\Delta{x}-&gt;0}\frac{f(x+\Delta{x}) - f(x)}{\Delta{x}} =    \frac{df}{dx}= f'(x) \\
df = f'(x)dx\]

<p>너무나도 익숙한 형태 아닌가?? 우리가 일반적으로 알고 있는 일변수 함수의 미분 정의 그리고 좌변의 $dx$를 우변으로 넘겨 살짝 변형한 식이다. 이것을 이제 다변수 함수에 적용하면 바로 방향 도함수가 된다. 다시 우리가 오르려는 산(이변수 함수)으로 돌아와 보자.</p>

\[f(x_1 + dx_1, x_2) = f(x_1, x_2) + f'(x_1, x_2)dx_1 \\
f(x_1, x_2 + dx_2) = f(x_1, x_2) + f'(x_1, x_2)dx_2 \\\]

<p>위에서 서술한 도함수 정의를 활용해 우리가 다음에 발걸음을 옮길 위치를 점  $A$를 $(x_1^0 + dx_1, x_2^0+dx_2)$ 이라고 표현할 수 있다. 이 표현을 활용해 다변수 함수의 미분을 정의해보자. 우리는 이미 다변수 함수의 개별 변수에 편미분을 취하고 행벡터로 쌓은 결과가 바로 전미분이라는 것을 알고 있다.</p>

\[f(x_1 + dx_1, x_2 + dx_2) - f(x_1, x_2) = f'(x_1)dx_1 + f'(x_2)dx_2\]

<p>다시 편미분의 정의를 활용해 수식을 정리하면 방향 벡터와 편미분 결과의 내적으로 표현할 수 있다.</p>

\[dL = \frac{∂L}{∂{x_1}}dx_1 + \frac{∂L}{∂{x_2}}dx_2 \\
dL = [dx_1, dx_2]\ •\ \begin{vmatrix}
  \frac{∂L}{∂x_1} \\
  \frac{∂L}{∂x_2}
\end{vmatrix}\]

<p>쏟아지는 수식 속에 우리의 본래 목적을 잊어서는 안된다. 우리는 지금 가장 빠르게 산 정상에 도달할 수 있는 방법을 찾기 위해 지금까지 달려왔다. 산 정상에 가장 빠르게 도달하기 위해 가장 가파른 급경사 지대만 찾아서 올라가는 전략을 세웠었다. 다시 말해, 다변수 함수 $f(x)$의 극소 변화량 $dL$이 최대가 되는 방향으로 발걸음을 옮기면 된다는 것이다. 그렇다면 극소 변화량 $dL$은 언제 최대가 될까??</p>

<p>이제 까먹고 있었던 내적의 개념을 다시 한 번 상기시켜보자. 내적은 다양하게 해석되지만, 본디 서로 다른 두 벡터의 <code class="language-plaintext highlighter-rouge">닮은 정도</code>를 나타낸다. 극소 변화량 $dL$이 최대가 되려면 우변의 내적 결과가 최대가 되어야 한다. 내적의 최대값은 서로 다른 두 벡터 사이의 끼인각도가 0˚일 때 즉, 두 벡터가 동일한 방향을 나타낼 때 정의된다. <strong><u>따라서 방향 벡터가 그라디언트(편미분의 행벡터) 방향일 때</u></strong> <code class="language-plaintext highlighter-rouge">내적 결과</code>(극소 변화량 $dL$)<strong><u>가 최대가 된다.</u></strong></p>

<p><strong><u>한편, 실제 기계학습에서는 손실함수의 최적화를 목적 함수로 사용하기 때문에 그라디언트(손실함수의 전미분) 방향에 음수를 취해준 값을 사용하게 된다.</u></strong></p>]]></content><author><name>qcqced</name><email>qcqced123@gmail.com</email></author><category term="Calculus" /><category term="Calculus" /><category term="Partial Derivative" /><category term="Total Derivative" /><category term="loss function" /><category term="Gradient" /><category term="Gradient Descent" /><category term="Machine Learning" /><summary type="html"><![CDATA[Proof of gradient direction with Total Derivative]]></summary></entry><entry><title type="html">🌆 [ViT] An Image Is Worth 16x16 Words: Transformers For Image Recognition At Scale</title><link href="http://localhost:4000/cv/vit" rel="alternate" type="text/html" title="🌆 [ViT] An Image Is Worth 16x16 Words: Transformers For Image Recognition At Scale" /><published>2023-07-26T00:00:00+09:00</published><updated>2023-07-27T02:00:00+09:00</updated><id>http://localhost:4000/cv/ViT</id><content type="html" xml:base="http://localhost:4000/cv/vit"><![CDATA[<h3 id="overview"><code class="language-plaintext highlighter-rouge">🔭 Overview</code></h3>

<p>시작하기 앞서, 본 논문 리뷰를 수월하게 읽으려면 <code class="language-plaintext highlighter-rouge">Transformer</code> 에 대한 선이해가 필수적이다. 아직 <code class="language-plaintext highlighter-rouge">Transformer</code> 에 대해서 잘 모른다면 필자가 작성한 포스트를 읽고 오길 권장한다. 또한 본문 내용을 작성하면서 참고한 논문과 여러 포스트의 링크를 맨 밑 하단에 첨부했으니 참고 바란다. 시간이 없으신 분들은 중간의 코드 구현부를 생략하고 <code class="language-plaintext highlighter-rouge">Insight</code> 부터 읽기를 권장한다.</p>

<p><code class="language-plaintext highlighter-rouge">Vision Transformer</code>(이하 <code class="language-plaintext highlighter-rouge">ViT</code>)는 2020년 10월 Google에서 발표한 컴퓨터 비전용 모델이다. 자연어 처리에서 대성공을 거둔 트렌스포머 구조와 기법을 거의 그대로 비전 분야에 이식했다는 점에서 큰 의의가 있으며, 이후 컴퓨터 비전 분야의 트렌스포머 전성시대가 열리게 된 계기로 작용한다.</p>

<p>한편, <code class="language-plaintext highlighter-rouge">ViT</code> 의 설계 철학은 바로 <code class="language-plaintext highlighter-rouge">scalability(범용성)</code>이다. 신경망 설계에서 범용성이란, 모델의 확장 가능성을 말한다. 예를 들면 학습 데이터보다 더 크고 복잡한 데이터 세트를 사용하거나 모델의 파라미터를 늘려 사이즈를 키워도 여전히 유효한 추론 결과를 도출하거나 더 나은 성능을 보여주고 나아가 개선의 여지가 여전히 남아있을 때 <code class="language-plaintext highlighter-rouge">“확장성이 높다”</code> 라고 표현한다. 저자들은 논문 초반에 콕 찝어서 컴퓨터 비전 분야의 <code class="language-plaintext highlighter-rouge">scalability</code> 높이는 것이 이번 모델 설계의 목표였다고 밝히고 있다. <code class="language-plaintext highlighter-rouge">범용성</code>은 신경망 모델 설계에서 가장 큰 화두가 되는데 도메인마다 정의하는 의미에 차이가 미세하게 존재한다. 따라서  <code class="language-plaintext highlighter-rouge">ViT</code>의 저자들이 말하는 <code class="language-plaintext highlighter-rouge">범용성</code>이 무엇을 의미하는지 알아보는 것은 구체적인 모델 구조를 이해하는데 큰 도움이 될 것이다.</p>

<h3 id="scalability-in-vit"><code class="language-plaintext highlighter-rouge">🧠 Scalability in ViT</code></h3>

<p>논문 초반부에서 다음과 같은 문장이 서술 되어있다.</p>

<p><code class="language-plaintext highlighter-rouge">“Our Vision Transformer (ViT) attains excellent results when pre-trained at sufficient scale and transferred to tasks with fewer datapoints"</code></p>

<p>이 구문이 <code class="language-plaintext highlighter-rouge">ViT</code> 의 <code class="language-plaintext highlighter-rouge">Scalability</code>를 가장 잘 설명하고 있다고 생각한다. 저자들이 말하는 범용성은 결국 <code class="language-plaintext highlighter-rouge">backbone</code> 구조의 활용을 의미한다. 자연어 처리에 익숙한 독자라면 쉽게 이해가 가능할 것이다. <code class="language-plaintext highlighter-rouge">Transformer</code>, <code class="language-plaintext highlighter-rouge">GPT</code>, <code class="language-plaintext highlighter-rouge">BERT</code>의 등장 이후, 자연어 처리는 범용성을 갖는 데이터 세트로 사전 훈련한 모델을 활용해 <code class="language-plaintext highlighter-rouge">Task-Agnostic</code>하게 하나의 <code class="language-plaintext highlighter-rouge">backbone</code>으로 거의 모든 Task를 수행할 수 있으며, 작은 사이즈의 데이터라도 상당히 높은 수준의 추론 성능을 낼 수 있었다. 그러나 당시 컴퓨터 비전의 메인이었던 <code class="language-plaintext highlighter-rouge">Conv</code> 기반 모델들은 파인튜닝해도 데이터 크기가 작으면 일반화 성능이 매우 떨어지고, Task에 따라서 다른 아키텍처를 갖는 모델을 새롭게 정의하거나 불러와 사용해야 하는 번거로움이 있었다. 예를 들면 <code class="language-plaintext highlighter-rouge">Image Classfication</code> 에는 <code class="language-plaintext highlighter-rouge">ResNet</code>, <code class="language-plaintext highlighter-rouge">Segmentation</code> 에는 <code class="language-plaintext highlighter-rouge">U-Net</code>, <code class="language-plaintext highlighter-rouge">Object Detection</code> 은 <code class="language-plaintext highlighter-rouge">YOLO</code> 를 사용하는 것처럼 말이다. 반면 자연어 처리는 사전 학습된 모델 하나로 모든 NLU, 심지어는 NLG Task도 수행할 수 있다. 저자들은 이러한 범용성을 컴퓨터 비전에도 이식 시키고 싶었던 것 같다. 그렇다면 먼저 자연어 처리에서 트랜스포머 계열이 범용성을 가질 수 있었던 이유는 무엇인지 간단히 살펴보자.</p>

<p>저자들은 <code class="language-plaintext highlighter-rouge">self-attention</code>(내적)의 효율성, 모델의 구조적 탁월성 그리고 <code class="language-plaintext highlighter-rouge">self-supervised task</code>의 존재를 꼽는다. 그럼 이것들이 왜 범용성을 높이는데 도움이 될까??</p>

<p><code class="language-plaintext highlighter-rouge">self-attention(내적)</code>은 행렬 간 곱셉으로 정의 되어 설계가 매우 간편하고 병렬로 한번에 처리하는 것이 가능하기 때문에 효율적으로 전체 데이터를 모두 고려한 연산 결과를 얻을 수 있다.</p>

<p><code class="language-plaintext highlighter-rouge">Multi-Head Attention</code> 구조는 여러 차원의 의미 관계를 동시에 포착하고 그것을 앙상블한 것과 같은(실제로는 MLP) 결과를 얻을 수 있다는 점에서 구조적으로 탁월하다.</p>

<p>마지막으로 <code class="language-plaintext highlighter-rouge">MLM</code>, <code class="language-plaintext highlighter-rouge">Auto-Regression(LM) Task</code>는 데이터 세트에 별도의 인간의 개입(라벨링)이 필요하지 않기 때문에 가성비 있게 데이터와 모델의 사이즈를 늘릴 수 있게 된다.<br />
이제 논문에서 트랜스포머 계열이 가진 범용성을 어떻게 비전 분야에 적용했는지 주목하면서 모델 구조를 하나 하나 살펴보자.</p>

<h3 id="modeling"><code class="language-plaintext highlighter-rouge">🌟 Modeling</code></h3>

<p align="center">
<img src="/assets/images/vision_transformer/modeling_overview.png" alt="ViT Model Structure" class="align-center image-caption" width="100%&quot;, height=&quot;50%" />
<strong><em><a href="https://arxiv.org/abs/2010.11929">ViT Model Structure</a></em></strong>
</p>

<ul>
  <li><strong>1) Transfer <code class="language-plaintext highlighter-rouge">Scalability</code> from pure <code class="language-plaintext highlighter-rouge">Transformer</code> to Computer Vision</strong>
    <ul>
      <li><strong>Overcome <code class="language-plaintext highlighter-rouge">reliance</code> on Convolution(<code class="language-plaintext highlighter-rouge">Inductive Bias</code>) in Computer Vision</strong></li>
      <li><strong>Apply Self-Attention &amp; Architecture from vanilla NLP Transformers as <code class="language-plaintext highlighter-rouge">closely</code> as possible</strong></li>
      <li><strong>Treat Image as sequence of text token</strong></li>
      <li><strong>Make $P$ sub-patches from whole image, playing same role as token in NLP Transformer</strong></li>
    </ul>
  </li>
</ul>

<p>저자들은 먼저 <code class="language-plaintext highlighter-rouge">Conv</code> 에 대한 의존을 버릴 것을 주장한다. <code class="language-plaintext highlighter-rouge">Conv</code>가 가진 <code class="language-plaintext highlighter-rouge">Inductive Bias</code> 때문에 파인튜닝 레벨에서 데이터 크기가 작으면 일반화 성능이 떨어지는 것이라고 설명하고 있다. 이 말을 이해하려면 <code class="language-plaintext highlighter-rouge">Inductive Bias</code>에 대해서 먼저 알아야 한다. <code class="language-plaintext highlighter-rouge">Inductive Bias</code>란, 주어진 데이터로부터 일반화 성능을 높이기 위해 <code class="language-plaintext highlighter-rouge">‘입력되는 데이터는 ~ 할 것이다’</code>, <code class="language-plaintext highlighter-rouge">‘이런 특징을 갖고 있을 것이다’</code>와 같은 가정, 가중치, 가설 등을 기계학습 알고리즘에 적용하는 것을 말한다.</p>

<p><code class="language-plaintext highlighter-rouge">Conv</code> 연산 자체 (가중치 공유, 풀링 있는 <code class="language-plaintext highlighter-rouge">Conv Block</code>이 <code class="language-plaintext highlighter-rouge">Invariance</code>)의 기본 가정은 <code class="language-plaintext highlighter-rouge">translation equivariance</code>, <code class="language-plaintext highlighter-rouge">locality</code>이다. 사실 저자의 주장을 이해하는데 <code class="language-plaintext highlighter-rouge">equivariance</code>와 <code class="language-plaintext highlighter-rouge">locality</code>의 뜻이 무엇인지 파악하는 것은 크게 의미가 없다 (<code class="language-plaintext highlighter-rouge">equivariance</code>와 <code class="language-plaintext highlighter-rouge">invariance</code>에 대해서는 다른 포스팅에서 자세히 살펴보도록 하겠다). <strong><u>중요한 것은 입력 데이터에 가정을 더한다는 점이다.</u></strong> 만약 주어진 입력이 미리 가정한 <code class="language-plaintext highlighter-rouge">Inductive Bias</code> 에 벗어난다면 어떻게 될까??</p>

<p>아마 오버피팅 되거나 모델 학습이 수렴성을 갖지 못하게 될 것이다. 이미지 데이터도 Task에 따라 필요한 <code class="language-plaintext highlighter-rouge">Inductive Bias</code>가 달라진다. 예를 들어 <code class="language-plaintext highlighter-rouge">Segmentation</code>, <code class="language-plaintext highlighter-rouge">Detection</code> 의 경우는 이미지 속 객체의 위치, 픽셀 사이의 <code class="language-plaintext highlighter-rouge">spatial variance</code> 정보가 매우 중요하다. 한편, <code class="language-plaintext highlighter-rouge">Classification</code>은 <code class="language-plaintext highlighter-rouge">spatial invariance</code>가 중요하다. 목표 객체의 위치와 주변 특징보다 타겟 자체를 신경망이 인식하는 것이 중요하기 때문이다. 따라서  <code class="language-plaintext highlighter-rouge">ViT</code> 저자들은 어떤 Bias던 상관없이 편향을 갖고 데이터를 본다는 것 자체에 의문을 표하며, 이미지 역시 <code class="language-plaintext highlighter-rouge">Inductive Bias</code>에서 벗어나, 주어진 데이터 전체 특징(패치) 사이의 관계를 파악하는 과정에서 <code class="language-plaintext highlighter-rouge">scalability</code>를 획득할 수 있다고 주장한다.</p>

<p>그래서 <code class="language-plaintext highlighter-rouge">Conv</code>의 대안으로 상대적으로 <code class="language-plaintext highlighter-rouge">Inductive Bias</code> 가 부족한 <code class="language-plaintext highlighter-rouge">Self-Attention</code>, <code class="language-plaintext highlighter-rouge">Transformer Architecture</code>를 사용한다. 두가지의 효용성에 대해서는 이미 위에서 언급했기 때문에 생략하고, 여기서 짚고 넘어가야할 점은 <code class="language-plaintext highlighter-rouge">Self-Attention</code>이 <code class="language-plaintext highlighter-rouge">Conv</code> 대비 <code class="language-plaintext highlighter-rouge">Inductive Bias</code>가 적다는 점이다. Self-Attention 과정에는 여러 연산, 스케일 조정값들이 포함되지만 본질적으로 <code class="language-plaintext highlighter-rouge">“내적”</code> 이 중심이다. 내적은 그 어떤 편향 (<code class="language-plaintext highlighter-rouge">Conv</code>와 대조하려고 이렇게 서술했지만 사실 <code class="language-plaintext highlighter-rouge">Position Embedding</code> 더하는 것도 일종의 약한 <code class="language-plaintext highlighter-rouge">Inductive Bias</code>)이 존재하지 않는다. 일단 주어진 모든 데이터에 대해서 내적값을 산출하고 그 다음에 관계가 있다고 생각되는 정보를 추리기 때문이다. <code class="language-plaintext highlighter-rouge">Conv</code> 때와 달리 <code class="language-plaintext highlighter-rouge">‘입력되는 데이터는 ~ 할 것이다’</code>, <code class="language-plaintext highlighter-rouge">‘이런 특징을 갖고 있을 것이다’</code> 라는 가정이 없다. 이번 포스팅의 마지막 쯤에서 다시 다루겠지만 그래서 <code class="language-plaintext highlighter-rouge">ViT</code>는 인스턴스 사이의 모든 관계를 뽑아보는 <code class="language-plaintext highlighter-rouge">Self-Attention(내적)</code> 을 기반으로 만들어졌기 때문에 이미지의 <code class="language-plaintext highlighter-rouge">Global Information</code>을 포착하는데 탁월한 성능을 보이고, <code class="language-plaintext highlighter-rouge">Conv</code> 는 <strong><u>“중요한 정보는 근처 픽셀에 몰려있다라는”</u></strong> <code class="language-plaintext highlighter-rouge">Inductive Bias</code>  덕분에 <code class="language-plaintext highlighter-rouge">Local Information</code>을 포착하는데 탁월한 성능을 낸다.</p>

<p>그렇다면 픽셀 하나 하나끼리 내적해준다는 것일까?? 아니다 여기서 논문의 제목이 <code class="language-plaintext highlighter-rouge">An Image Is Worth 16x16 Words</code> 인 이유가 드러난다. 일단 픽셀 하나 하나끼리 유사도를 측정하는 것이 유의미할까 생각해보자. 자연어의 토큰과 달리 이미지의 단일 픽셀 한 개는 큰 인사이트를 얻기 힘들다. 픽셀은 말 그대로 점 하나일 뿐이다. 픽셀을 여러 개 묶어 패치 단위로 묶는다면 이야기는 달라진다. 일정 크기 이상의 패치라면 자연어의 토큰처럼 그 자체로 어떤 의미를 담을 수 있다. 따라서 저자는 전체 이미지를 여러 개의 16x16 혹은 14x14 사이즈 패치로 나누어 하나 하나를 토큰으로 간주해 이미지 시퀀스를 만들고 그것을 모델의 Input으로 사용한다.</p>

<p align="center">
<img src="/assets/images/vision_transformer/class_diagram.png" alt="Class Diagram" class="align-center image-caption" width="50%&quot;, height=&quot;50%" />
<strong><em>Class Diagram</em></strong>
</p>

<p>모델 구조의 뼈대가 되는 내용들을 모두 살펴보았고, 위에서 서술한 내용을 구현하기 위해 어떤 블록들을 사용했는지 필자가 직접 논문을 보고 따라 구현한 코드와 함께 알아보도록 하자. 위에 첨부한 모델 모식도에 나와 있는 블록들 하나 하나 살펴볼 예정이다. 여담으로 Google Research의 Official Repo 역시 함께 참고했는데, 코드가 모두 구글이 요새 새롭게 미는 <code class="language-plaintext highlighter-rouge">Jax</code>, <code class="language-plaintext highlighter-rouge">Flax</code> 로 구현 되어 있었다. 파이토치나 좀 써본 필자 입장에서는 정말 … 지옥불을 경험했다. 오늘도 다시 한 번 페이스북 파이토치 개발팀에 큰절 드리고 싶다.</p>

<h4 id="linear-projection-of-flattened-patches"><code class="language-plaintext highlighter-rouge">🔬 Linear Projection of Flattened Patches</code></h4>

\[x_p \in R^{N * (P^2•C)}\]

\[z_{0} = [x_{class}; x_p^1E;x_p^2E;x_p^3E....x_p^NE]\]

\[N = \frac{H*W}{P*P}\]

<p><code class="language-plaintext highlighter-rouge">ViT</code>의 입력 임베딩을 생성하는 역할을 한다. <code class="language-plaintext highlighter-rouge">ViT</code>는 $x \in R^{H * W * C}$(H: height, W: width, C: channel)의 형상을 갖는 이미지를 입력으로 받아 가로 세로 길이가 $P$, 채널 개수 $C$인 $N$개의 패치로 <code class="language-plaintext highlighter-rouge">reshape</code> 한다. 필자가 코드 구현 중 가장 혼동한 부분이 바로 패치 개수 $N$이었다. 직관적으로 패치 개수라고 하면, 전체 이미지 사이즈에서 패치 크기를 나눈 값이라고 생각하기 쉽기 때문이다. 예를 들면 <code class="language-plaintext highlighter-rouge">512x512</code>짜리 이미지를 <code class="language-plaintext highlighter-rouge">16x16</code> 사이즈의 패치로 나눈다고 해보자. 필자는 단순히 <code class="language-plaintext highlighter-rouge">512/16=32</code> 라는 결과를 이용해 $N=32$로 설정하고 실험을 진행하다가 텐서 차원이 맞지 않아 발생하는 에러 로그를 마주했었다. 그러나 논문 속 수식을 확인해보면,  $H * W / P^2$이 바로 패치 개수$N$으로 정의된다. 그래서 만약 <code class="language-plaintext highlighter-rouge">512x512</code> 사이즈의 <code class="language-plaintext highlighter-rouge">RGB</code> 이미지 <code class="language-plaintext highlighter-rouge">10장</code>을 ViT 입력 임베딩에 맞게 차원 변환한다면 결과는 <code class="language-plaintext highlighter-rouge">[10, 3, 1024, 768]</code> 이 될 것이다. (이 예시를 앞으로 계속 이용하겠다)</p>

<p>이렇게 차원을 바꿔준 이미지를 <code class="language-plaintext highlighter-rouge">nn.Linear((channels * patch_size**2), dim_model)</code> 를 통해 <code class="language-plaintext highlighter-rouge">ViT</code>의 임베딩 레이어에 선형 투영해준다. 여기서 자연어 처리와 파이토치를 자주 사용하시는 독자라면 왜 <code class="language-plaintext highlighter-rouge">nn.Embedding</code>을 사용하지 않았는가 의문을 가질 수 있다.</p>

<p>자연어 처리에서 입력 임베딩을 만들때는 모델의 토크나이저에 의해 사전 정의된 vocab의 사이즈가 입력 문장에 속한 토큰 개수보다 훨씬 크기 때문에 데이터 룩업 테이블 방식의 <code class="language-plaintext highlighter-rouge">nn.Embedding</code> 을 사용하게 된다. 이게 무슨 말이냐면, 토크나이저에 의해 사전에 정의된 <code class="language-plaintext highlighter-rouge">vocab</code> 전체가 <code class="language-plaintext highlighter-rouge">nn.Embedding(vocab_size, dim_model)</code>로 투영 되어 가로는 vocab 사이즈, 세로는 모델의 차원 크기에 해당하는 룩업 테이블이 생성되고, 내가 입력한 토큰들은 전체 <code class="language-plaintext highlighter-rouge">vocab</code>의 일부분일테니 전체 임베딩 룩업 테이블에서 내가 임베딩하고 싶은 토큰들의 인덱스만 알아낸다는 것이다.</p>

<p>그래서 <code class="language-plaintext highlighter-rouge">nn.Embedding</code> 에 정의된 차원과 실제 입력 데이터의 차원이 맞지 않아도 함수가 동작하게 되는 것이다. 그러나 비전의 경우, 사전에 정의된 <code class="language-plaintext highlighter-rouge">vocab</code>이라는 개념이 전혀 없고 입력 이미지 역시 항상 고정된 크기의 차원으로 들어오기 때문에 <code class="language-plaintext highlighter-rouge">nn.Embedding</code>이 아닌  <code class="language-plaintext highlighter-rouge">nn.Linear</code> 을 사용해 곧바로 선형 투영을 구현한 것이다. 두 메서드에 대한 자세한 비교는 파이토치 관련 포스트에서 다시 한 번 자세히 다루도록 하겠다.</p>

<p>한편, <code class="language-plaintext highlighter-rouge">Position Embedding</code>을 더하기 전, <code class="language-plaintext highlighter-rouge">Input Embedding</code>의 차원은 <code class="language-plaintext highlighter-rouge">[10, 1024, 1024]</code> 이 된다. 지금까지 설명한 부분(<code class="language-plaintext highlighter-rouge">Linear Projection of Flattened Patches</code> )을 파이토치 코드로 구현하면 다음과 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">VisionTransformer</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="p">...</span>
    <span class="n">중략</span>
    <span class="p">...</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">num_patches</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">image_size</span> <span class="o">/</span> <span class="n">patch_size</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">input_embedding</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">((</span><span class="n">channels</span> <span class="o">*</span> <span class="n">patch_size</span><span class="o">**</span><span class="mi">2</span><span class="p">),</span> <span class="n">dim_model</span><span class="p">)</span> <span class="c1"># Projection Layer for Input Embedding
</span>    <span class="p">...</span>
    <span class="n">중략</span>
    <span class="p">...</span>  
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputs</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">any</span><span class="p">:</span>
        <span class="s">""" For cls pooling """</span>
        <span class="k">assert</span> <span class="n">inputs</span><span class="p">.</span><span class="n">ndim</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">,</span> <span class="sa">f</span><span class="s">"Input shape should be [BS, CHANNEL, IMAGE_SIZE, IMAGE_SIZE], but got </span><span class="si">{</span><span class="n">inputs</span><span class="p">.</span><span class="n">shape</span><span class="si">}</span><span class="s">"</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">inputs</span> 
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">input_embedding</span><span class="p">(</span>
            <span class="n">x</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="bp">self</span><span class="p">.</span><span class="n">num_patches</span><span class="p">,</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">patch_size</span><span class="o">**</span><span class="mi">2</span> <span class="o">*</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span> <span class="c1"># Projection Layer for Input Embedding
</span>        <span class="p">)</span>
        <span class="n">cls_token</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>  <span class="c1"># can change init method
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">cat</span><span class="p">([</span><span class="n">cls_token</span><span class="p">,</span> <span class="n">x</span><span class="p">],</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">...</span>
</code></pre></div></div>

<p>임베딩 레이어를 객체로 따로 구현해도 되지만, 필자는 굳이 추상화가 필요하지 않다고 생각해 ViT의 최상위 클래스인 <code class="language-plaintext highlighter-rouge">VisionTransformer</code>의 <code class="language-plaintext highlighter-rouge">forward</code> 메서드 맨 초반부에 구현하게 되었다. 입력 받은 이미지 텐서를 <code class="language-plaintext highlighter-rouge">torch.reshape</code> 을 통해 <code class="language-plaintext highlighter-rouge">[패치 개수, 픽셀개수*채널개수]</code> 로 바꾼 뒤, 미리 정의해둔 <code class="language-plaintext highlighter-rouge">self.input_embedding</code> 에 매개변수로 전달해 <code class="language-plaintext highlighter-rouge">“위치 임베딩”</code> 값이 더해지기 전 <code class="language-plaintext highlighter-rouge">Input Embedding</code>을 만든다.</p>

<p>한편, <code class="language-plaintext highlighter-rouge">CLS Pooling</code>을 위해 마지막에 <code class="language-plaintext highlighter-rouge">[batch, 1, image_size]</code> 의 차원을 갖는 <code class="language-plaintext highlighter-rouge">cls_token</code> 을 정의해 패치 시퀀스와 <code class="language-plaintext highlighter-rouge">concat</code> (맨 앞에)해준다. 이 때 논문에 제시된 수식 상, <code class="language-plaintext highlighter-rouge">CLS Token</code>은 선형 투영하지 않으며, 패치 시퀀스에 선형 투영이 이뤄지고 난 뒤에 맨 앞에 <code class="language-plaintext highlighter-rouge">Concat</code> 하게 된다.</p>

<p><code class="language-plaintext highlighter-rouge">CLS Token</code>까지 더한 최종 <code class="language-plaintext highlighter-rouge">Input Embedding</code> 의 텐서 차원은 <code class="language-plaintext highlighter-rouge">[10, 1025, 1024]</code> 가 된다.</p>

<h4 id="positional-embedding"><code class="language-plaintext highlighter-rouge">🔢 Positional Embedding</code></h4>

\[E_{pos} \in R^{(N+1)*D}\]

<p>이미지를 패치 단위의 임베딩으로 만들었다면 이제 위치 임베딩을 정의해서 더해주면 모식도 속 <code class="language-plaintext highlighter-rouge">Embedded Patches</code> , 즉 인코더에 들어갈 최종 <code class="language-plaintext highlighter-rouge">Patch Embedding</code> 이 완성 된다. 위치 임베딩을 만드는 방식은 기존 <code class="language-plaintext highlighter-rouge">Transformer</code>, <code class="language-plaintext highlighter-rouge">BERT</code> 와 동일하다. 아래 <code class="language-plaintext highlighter-rouge">VisionEncoder</code> 클래스를 구현한 코드를 살펴보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">class</span> <span class="nc">VisionEncoder</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="p">...</span>
    <span class="n">중략</span>
    <span class="p">...</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">positional_embedding</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Embedding</span><span class="p">((</span><span class="bp">self</span><span class="p">.</span><span class="n">num_patches</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">dim_model</span><span class="p">)</span>  <span class="c1"># add 1 for cls token
</span>    <span class="p">...</span>
    <span class="n">중략</span>
    <span class="p">...</span>
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputs</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="n">Tensor</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">]:</span>
        <span class="n">layer_output</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">pos_x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">num_patches</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="n">repeat</span><span class="p">(</span><span class="n">inputs</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="n">to</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>  <span class="c1"># inputs.shape[0] = Batch Size of Input
</span>        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">dropout</span><span class="p">(</span>
            <span class="n">inputs</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">positional_embedding</span><span class="p">(</span><span class="n">pos_x</span><span class="p">)</span>
        <span class="p">)</span>
    <span class="p">...</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Input Embedding</code>과 다르게 위치 임베딩은 <code class="language-plaintext highlighter-rouge">nn.Embedding</code>으로 구현했는데, 여기서도 사실 <code class="language-plaintext highlighter-rouge">nn.Linear</code>를 사용해도 무방하다. 그것보다 <code class="language-plaintext highlighter-rouge">nn.Embedding</code>의 입력 차원인 <code class="language-plaintext highlighter-rouge">self.num_patches + 1</code> 에 주목해보자. 왜 1을 더해준 값을 사용했을까??</p>

<p><code class="language-plaintext highlighter-rouge">ViT</code>는 BERT의 <code class="language-plaintext highlighter-rouge">CLS Token Pooling</code> 을 차용하기 위해 패치 시퀀스 맨 앞에 CLS 토큰을 추가하기 때문이다. 이렇게 추가된 <code class="language-plaintext highlighter-rouge">CLS Token</code>은 인코더를 거쳐 최종 <code class="language-plaintext highlighter-rouge">MLP Head</code>에 흘러들어가 로짓으로 변환된다. 만약 독자께서 <code class="language-plaintext highlighter-rouge">CLS Token Pooling</code> 대신 다른 풀링 방식을 사용할거라면 1을 추가해줄 필요는 없다.</p>

<p>애초에 객체 인스턴스 초기화 당시에 <code class="language-plaintext highlighter-rouge">CLS Token</code> 을 추가를 반영한 값을 전달하면 되지 않는가하는 의문이 들 수도 있다. 하지만 <code class="language-plaintext highlighter-rouge">VisionEncoder</code> 객체 인스턴스 초기화 당시에는 <code class="language-plaintext highlighter-rouge">num_patches</code> 값으로 <code class="language-plaintext highlighter-rouge">CLS Token</code>이 추가되기 이전 값(+1 반영이 안되어 있음)을 전달하도록 설계 되어 있어서  <code class="language-plaintext highlighter-rouge">CLS Pooling</code>을 사용할거라면 1 추가를 꼭 해줘야 한다.</p>

<p align="center">
<img src="/assets/images/vision_transformer/insight5.png" alt="Performance Table by making Position Embedding method" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em><a href="https://arxiv.org/abs/2010.11929">Performance Table by making Position Embedding method</a></em></strong>
</p>

<p>한편 저자는 <code class="language-plaintext highlighter-rouge">2D Postion Embedding</code>, <code class="language-plaintext highlighter-rouge">Relative Position Embedding</code> 방식도 적용해봤지만, 구현 복잡도 &amp; 연산량 대비 성능 향상 폭이 매우 미미해 일반적인 <code class="language-plaintext highlighter-rouge">1D Position Embedding</code>을 사용할 것을 추천하고 있다.</p>

<h4 id="-multi-head-attention"><code class="language-plaintext highlighter-rouge">👩‍👩‍👧‍👦 Multi-Head Attention</code></h4>

\[z_t^{'} = MSA(LN(z_{t-1}) + z_{t-1})\]

\[MSA(z) = [SA_1();SA_2();SA_3()...SA_k()]*U_{msa}, \ \ U_{msa} \in R^{(k*D_h)*D} \\\]

<p>트랜스포머 계열 모델의 핵심 <code class="language-plaintext highlighter-rouge">Multi-Head Self-Attention</code> 모듈에 대해서 알아보자. 사실 기존 자연어 처리 <code class="language-plaintext highlighter-rouge">Transformer</code>, <code class="language-plaintext highlighter-rouge">BERT</code> 등의 동작 방식과 완전히 동일하며, 코드로 구현할 때 역시 동일하게 만들어주면 된다. 자세한 원리와 동작 방식은 <strong><u>Attention Is All You Need</u></strong> 리뷰 포스트에서 설명했기 때문에 생략하고 넘어가겠다. 한편 파이토치로 구현한 <code class="language-plaintext highlighter-rouge">Multi-Head Self-Attention</code> 블럭에 대한 코드는 다음과 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">scaled_dot_product_attention</span><span class="p">(</span><span class="n">q</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">,</span> <span class="n">v</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">,</span> <span class="n">dot_scale</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tensor</span><span class="p">:</span>
    <span class="s">"""
    Scaled Dot-Product Attention
    Args:
        q: query matrix, shape (batch_size, seq_len, dim_head)
        k: key matrix, shape (batch_size, seq_len, dim_head)
        v: value matrix, shape (batch_size, seq_len, dim_head)
        dot_scale: scale factor for Q•K^T result, same as pure transformer
    Math:
        A = softmax(q•k^t/sqrt(D_h)), SA(z) = Av
    """</span>
    <span class="n">attention_dist</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">softmax</span><span class="p">(</span>
        <span class="n">torch</span><span class="p">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">k</span><span class="p">.</span><span class="n">transpose</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">))</span> <span class="o">/</span> <span class="n">dot_scale</span><span class="p">,</span>
        <span class="n">dim</span><span class="o">=-</span><span class="mi">1</span>
    <span class="p">)</span>
    <span class="n">attention_matrix</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">attention_dist</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">attention_matrix</span>

<span class="k">class</span> <span class="nc">AttentionHead</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="s">"""
    In this class, we implement workflow of single attention head
    Args:
        dim_model: dimension of model's latent vector space, default 1024 from official paper
        dim_head: dimension of each attention head, default 64 from official paper (1024 / 16)
        dropout: dropout rate, default 0.1
    Math:
        [q,k,v]=z•U_qkv, A = softmax(q•k^t/sqrt(D_h)), SA(z) = Av
    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dim_model</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span>  <span class="mi">1024</span><span class="p">,</span> <span class="n">dim_head</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">64</span><span class="p">,</span> <span class="n">dropout</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">AttentionHead</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span> <span class="o">=</span> <span class="n">dim_model</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dim_head</span> <span class="o">=</span> <span class="n">dim_head</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dropout</span> <span class="o">=</span> <span class="n">dropout</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dot_scale</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">dim_head</span><span class="p">))</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fc_q</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">dim_head</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fc_k</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">dim_head</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fc_v</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">dim_head</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tensor</span><span class="p">:</span>
        <span class="n">attention_matrix</span> <span class="o">=</span> <span class="n">scaled_dot_product_attention</span><span class="p">(</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">fc_q</span><span class="p">(</span><span class="n">x</span><span class="p">),</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">fc_k</span><span class="p">(</span><span class="n">x</span><span class="p">),</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">fc_v</span><span class="p">(</span><span class="n">x</span><span class="p">),</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">dot_scale</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="n">attention_matrix</span>

<span class="k">class</span> <span class="nc">MultiHeadAttention</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="s">"""
    In this class, we implement workflow of Multi-Head Self-Attention
    Args:
        dim_model: dimension of model's latent vector space, default 1024 from official paper
        num_heads: number of heads in MHSA, default 16 from official paper for ViT-Large
        dim_head: dimension of each attention head, default 64 from official paper (1024 / 16)
        dropout: dropout rate, default 0.1
    Math:
        MSA(z) = [SA1(z); SA2(z); · · · ; SAk(z)]•Umsa
    Reference:
        https://arxiv.org/abs/2010.11929
        https://arxiv.org/abs/1706.03762
    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dim_model</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">,</span> <span class="n">num_heads</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span> <span class="n">dim_head</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">64</span><span class="p">,</span> <span class="n">dropout</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">MultiHeadAttention</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span> <span class="o">=</span> <span class="n">dim_model</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">num_heads</span> <span class="o">=</span> <span class="n">num_heads</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dim_head</span> <span class="o">=</span> <span class="n">dim_head</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dropout</span> <span class="o">=</span> <span class="n">dropout</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attention_heads</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">ModuleList</span><span class="p">(</span>
            <span class="p">[</span><span class="n">AttentionHead</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">dim_head</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">dropout</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">num_heads</span><span class="p">)]</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fc_concat</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tensor</span><span class="p">:</span>
        <span class="s">""" x is already passed nn.Layernorm """</span>
        <span class="k">assert</span> <span class="n">x</span><span class="p">.</span><span class="n">ndim</span> <span class="o">==</span> <span class="mi">3</span><span class="p">,</span> <span class="sa">f</span><span class="s">'Expected (batch, seq, hidden) got </span><span class="si">{</span><span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="si">}</span><span class="s">'</span>
        <span class="n">attention_output</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">fc_concat</span><span class="p">(</span>
            <span class="n">torch</span><span class="p">.</span><span class="n">cat</span><span class="p">([</span><span class="n">head</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">head</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">attention_heads</span><span class="p">],</span> <span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># concat all dim_head = num_heads * dim_head
</span>        <span class="p">)</span>
        <span class="k">return</span> <span class="n">attention_output</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">MultiHeadAttention</code>을 가장 최상위 객체로 두고, 하위에 <code class="language-plaintext highlighter-rouge">AttentionHead</code>객체를 따로 구현했다. 이렇게 구현하면, 어텐션 해드별로 쿼리, 키, 벨류 선영 투영 행렬(<code class="language-plaintext highlighter-rouge">nn.Linear</code>)을 따로 구현해줄 필요가 없어지며, <code class="language-plaintext highlighter-rouge">nn.ModuleList</code> 를 통해 개별 해드를 한 번에 그룹핑하고 <code class="language-plaintext highlighter-rouge">loop</code> 를 통해 출력 결과를 <code class="language-plaintext highlighter-rouge">concat</code> 해줄 수 있어 복잡하고 많은 에러를 유발하는 <strong><u>텐서 차원 조작을 피할 수 있으며</u></strong>, 코드의 가독성이 올라가는 효과가 있다.</p>

<h4 id="️-mlp"><code class="language-plaintext highlighter-rouge">🗳️ MLP</code></h4>

\[z_{t} = MLP(LN(z_{t}^{'}) + z_{t}^{'})\]

<p>이름만 <code class="language-plaintext highlighter-rouge">MLP</code>로 바뀌었을 뿐, 기존 트랜스포머의 피드 포워드 블럭과 동일한 역할을 한다. 역시 자세한 동작 방식은 여기 포스트에서 확인하자. 파이토치로 구현한 코드는 다음과 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MLP</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="s">"""
    Class for MLP module in ViT-Large
    Args:
        dim_model: dimension of model's latent vector space, default 512
        dim_mlp: dimension of FFN's hidden layer, default 2048 from official paper
        dropout: dropout rate, default 0.1
    Math:
        MLP(x) = MLP(LN(x))+x
    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dim_model</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">,</span> <span class="n">dim_mlp</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4096</span><span class="p">,</span> <span class="n">dropout</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">MLP</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">mlp</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">dim_model</span><span class="p">,</span> <span class="n">dim_mlp</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">GELU</span><span class="p">(),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">dropout</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="n">dim_mlp</span><span class="p">,</span> <span class="n">dim_model</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">dropout</span><span class="p">),</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tensor</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">mlp</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<p>특이한 점은 <code class="language-plaintext highlighter-rouge">Activation Function</code>으로 <code class="language-plaintext highlighter-rouge">GELU</code>를 사용(기존 트랜스포머는 <code class="language-plaintext highlighter-rouge">RELU</code>)했다는 점이다.</p>

<h4 id="-vision-encoder-layer"><code class="language-plaintext highlighter-rouge">📘 Vision Encoder Layer</code></h4>

<p><code class="language-plaintext highlighter-rouge">ViT</code> 인코더 블럭 1개에 해당하는 하위 모듈과 동작을 구현한 객체이다. 구현한 코드는 아래와 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">VisionEncoderLayer</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="s">"""
    Class for encoder_model module in ViT-Large
    In this class, we stack each encoder_model module (Multi-Head Attention, Residual-Connection, Layer Normalization, MLP)
    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dim_model</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">,</span> <span class="n">num_heads</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">16</span><span class="p">,</span> <span class="n">dim_mlp</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4096</span><span class="p">,</span> <span class="n">dropout</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">VisionEncoderLayer</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">self_attention</span> <span class="o">=</span> <span class="n">MultiHeadAttention</span><span class="p">(</span>
            <span class="n">dim_model</span><span class="p">,</span>
            <span class="n">num_heads</span><span class="p">,</span>
            <span class="nb">int</span><span class="p">(</span><span class="n">dim_model</span> <span class="o">/</span> <span class="n">num_heads</span><span class="p">),</span>
            <span class="n">dropout</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">layer_norm1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">LayerNorm</span><span class="p">(</span><span class="n">dim_model</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">layer_norm2</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">LayerNorm</span><span class="p">(</span><span class="n">dim_model</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dropout</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">dropout</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">mlp</span> <span class="o">=</span> <span class="n">MLP</span><span class="p">(</span>
            <span class="n">dim_model</span><span class="p">,</span>
            <span class="n">dim_mlp</span><span class="p">,</span>
            <span class="n">dropout</span><span class="p">,</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tensor</span><span class="p">:</span>
        <span class="n">ln_x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">layer_norm1</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">residual_x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">dropout</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">self_attention</span><span class="p">(</span><span class="n">ln_x</span><span class="p">))</span> <span class="o">+</span> <span class="n">x</span>

        <span class="n">ln_x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">layer_norm2</span><span class="p">(</span><span class="n">residual_x</span><span class="p">)</span>
        <span class="n">fx</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">mlp</span><span class="p">(</span><span class="n">ln_x</span><span class="p">)</span> <span class="o">+</span> <span class="n">residual_x</span>  <span class="c1"># from official paper &amp; code by Google Research
</span>        <span class="k">return</span> <span class="n">fx</span>
</code></pre></div></div>

<p><del>특이점은 마지막 <code class="language-plaintext highlighter-rouge">MLP Layer</code>와 <code class="language-plaintext highlighter-rouge">Residual</code> 결과를 더한 뒤, 다음 인코더 블록에 전달하기 전에 층 정규화를 한 번 더 적용한다는 것이다. 모델 모식도에는 나와 있지 않지만, 본문에 해당 내용이 실려 있다.</del>
마지막 인코더의 출력값에만 한번 더 <code class="language-plaintext highlighter-rouge">layernorm</code>을 적용한다.</p>

<h4 id="-visionencoder"><code class="language-plaintext highlighter-rouge">📚 VisionEncoder</code></h4>

<p>입력 이미지를 <code class="language-plaintext highlighter-rouge">Patch Embedding</code>으로 인코딩 하고 N개의 <code class="language-plaintext highlighter-rouge">VisionEncoderLayer</code>를 쌓기 위해 구현된 객체이다. <code class="language-plaintext highlighter-rouge">Patch Embedding</code>을 만드는 부분은 이미 위에서 설명했기 때문에 넘어가고, 인코더 블럭을 N개 쌓는 방법은 역시나 <code class="language-plaintext highlighter-rouge">nn.ModuleList</code> 를 사용하면 간편하게 구현할 수 있다. 아래 코드를 살펴보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">VisionEncoder</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="s">"""
    In this class, encode input sequence(Image) and then we stack N VisionEncoderLayer
    This model is implemented by cls pooling method for classification
    First, we define "positional embedding" and then add to input embedding for making patch embedding
    Second, forward patch embedding to N EncoderLayer and then get output embedding
    Args:
        num_patches: number of patches in input image =&gt; (image_size / patch_size)**2
        N: number of EncoderLayer, default 24 for large model
    """</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num_patches</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">N</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">24</span><span class="p">,</span> <span class="n">dim_model</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">,</span> <span class="n">num_heads</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">16</span><span class="p">,</span> <span class="n">dim_mlp</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4096</span><span class="p">,</span> <span class="n">dropout</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">VisionEncoder</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">num_patches</span> <span class="o">=</span> <span class="n">num_patches</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">positional_embedding</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Embedding</span><span class="p">((</span><span class="bp">self</span><span class="p">.</span><span class="n">num_patches</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">dim_model</span><span class="p">)</span>  <span class="c1"># add 1 for cls token
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">num_layers</span> <span class="o">=</span> <span class="n">N</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span> <span class="o">=</span> <span class="n">dim_model</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">num_heads</span> <span class="o">=</span> <span class="n">num_heads</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dim_mlp</span> <span class="o">=</span> <span class="n">dim_mlp</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dropout</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">dropout</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">encoder_layers</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">ModuleList</span><span class="p">(</span>
            <span class="p">[</span><span class="n">VisionEncoderLayer</span><span class="p">(</span><span class="n">dim_model</span><span class="p">,</span> <span class="n">num_heads</span><span class="p">,</span> <span class="n">dim_mlp</span><span class="p">,</span> <span class="n">dropout</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">num_layers</span><span class="p">)]</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">layer_norm</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">LayerNorm</span><span class="p">(</span><span class="n">dim_model</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputs</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="n">Tensor</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">]:</span>
        <span class="n">layer_output</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">pos_x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">num_patches</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="n">repeat</span><span class="p">(</span><span class="n">inputs</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="n">to</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">dropout</span><span class="p">(</span>
            <span class="n">inputs</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">positional_embedding</span><span class="p">(</span><span class="n">pos_x</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="k">for</span> <span class="n">layer</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">encoder_layers</span><span class="p">:</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">layer</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
            <span class="n">layer_output</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">encoded_x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">layer_norm</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># from official paper &amp; code by Google Research
</span>        <span class="n">layer_output</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">layer_output</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">0</span><span class="p">).</span><span class="n">to</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>  <span class="c1"># For Weighted Layer Pool: [N, BS, SEQ_LEN, DIM]
</span>        <span class="k">return</span> <span class="n">encoded_x</span><span class="p">,</span> <span class="n">layer_output</span>
</code></pre></div></div>
<p>마지막 층의 인코더 출력값에는 <code class="language-plaintext highlighter-rouge">layernorm</code>을 적용해줘야 함을 잊지 말자. 한편, <code class="language-plaintext highlighter-rouge">layer_output</code>는 레이어 별 어텐션 결과를 시각화 하거나 나중에 <code class="language-plaintext highlighter-rouge">WeightedLayerPool</code>에 사용하려고 만들었다.</p>
<h4 id="-visiontransformer"><code class="language-plaintext highlighter-rouge">🤖 VisionTransformer</code></h4>

<p align="center">
<img src="/assets/images/vision_transformer/model_variant.png" alt="ViT Model Variant" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em><a href="https://arxiv.org/abs/2010.11929">ViT Model Variant</a></em></strong>
</p>

<p><code class="language-plaintext highlighter-rouge">ViT</code> 모델의 가장 최상위 객체로, 앞에서 설명한 모든 모듈들의 동작이 이뤄지는 곳이다. 사용자로부터 하이퍼파라미터를 입력 받아 모델의 크기, 깊이, 패치 크기, 이미지 임베딩 추출 방식을 지정한다. 그리고 입력 이미지를 전달받아 임베딩을 만들고 인코더에 전달한 뒤, <code class="language-plaintext highlighter-rouge">MLP Head</code> 를 통해 최종 예측 결과를 반환하는 역할을 한다.</p>

<p>이미지 임베딩 추출 방식은 <code class="language-plaintext highlighter-rouge">Linear Projection</code>과 <code class="language-plaintext highlighter-rouge">Convolution</code>이 있다. 전자가 논문에서 말하는 일반적인 <code class="language-plaintext highlighter-rouge">ViT</code>를 말하며 후자는 저자가 <code class="language-plaintext highlighter-rouge">Hybrid ViT</code>라고 따로 명명하는 모델이다. 임베딩 추출 방식 이외에 다른 차이는 전혀 없다. <code class="language-plaintext highlighter-rouge">extractor</code> 매개변수를 통해 임베딩 추출 방식을 지정할 수 있으니 아래 코드를 확인해보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">VisionTransformer</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="s">"""
    Main class for ViT of cls pooling, Pytorch implementation
    We implement pure ViT, Not hybrid version which is using CNN for extracting patch embedding
    input must be [BS, CHANNEL, IMAGE_SIZE, IMAGE_SIZE]
    In NLP, input_sequence is always smaller than vocab size
    But in vision, input_sequence is always same as image size, not concept of vocab in vision
    So, ViT use nn.Linear instead of nn.Embedding for input_embedding
    Args:
        num_classes: number of classes for classification task
        image_size: size of input image, default 512
        patch_size: size of patch, default 16 from official paper for ViT-Large
        extractor: option for feature extractor, default 'base' which is crop &amp; just flatten
                   if you want to use Convolution for feature extractor, set extractor='cnn' named hybrid ver in paper
        classifier: option for pooling method, default token meaning that do cls pooling
                    if you want to use mean pooling, set classifier='mean'
        mode: option for train type, default fine-tune, if you want pretrain, set mode='pretrain'
              In official paper &amp; code by Google Research, they use different classifier head for pretrain, fine-tune
    Math:
        image2sequence: [batch, channel, image_size, image_size] -&gt; [batch, patch, patch_size^2*channel]
        input_embedding: R^(P^2 ·C)×D
    Reference:
        https://arxiv.org/abs/2010.11929
        https://arxiv.org/abs/1706.03762
        https://github.com/google-research/vision_transformer/blob/main/vit_jax/models_vit.py#L184
    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
            <span class="bp">self</span><span class="p">,</span>
            <span class="n">num_classes</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
            <span class="n">channels</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
            <span class="n">image_size</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">512</span><span class="p">,</span>
            <span class="n">patch_size</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">16</span><span class="p">,</span>
            <span class="n">num_layers</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">24</span><span class="p">,</span>
            <span class="n">dim_model</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1024</span><span class="p">,</span>
            <span class="n">num_heads</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">16</span><span class="p">,</span>
            <span class="n">dim_mlp</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">4096</span><span class="p">,</span>
            <span class="n">dropout</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">,</span>
            <span class="n">extractor</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">'base'</span><span class="p">,</span>
            <span class="n">classifier</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">'token'</span><span class="p">,</span>
            <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">'fine_tune'</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">VisionTransformer</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">num_patches</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">image_size</span> <span class="o">/</span> <span class="n">patch_size</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">num_layers</span> <span class="o">=</span> <span class="n">num_layers</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">patch_size</span> <span class="o">=</span> <span class="n">patch_size</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span> <span class="o">=</span> <span class="n">dim_model</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">num_heads</span> <span class="o">=</span> <span class="n">num_heads</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dim_mlp</span> <span class="o">=</span> <span class="n">dim_mlp</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dropout</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">dropout</span><span class="p">)</span>

        <span class="c1"># Input Embedding
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">extractor</span> <span class="o">=</span> <span class="n">extractor</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">input_embedding</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">((</span><span class="n">channels</span> <span class="o">*</span> <span class="n">patch_size</span><span class="o">**</span><span class="mi">2</span><span class="p">),</span> <span class="n">dim_model</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">conv</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span>
            <span class="n">in_channels</span><span class="o">=</span><span class="n">channels</span><span class="p">,</span>
            <span class="n">out_channels</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">,</span>
            <span class="n">kernel_size</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">patch_size</span><span class="p">,</span>
            <span class="n">stride</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">patch_size</span>
        <span class="p">)</span>

        <span class="c1"># Encoder Multi-Head Self-Attention
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">encoder</span> <span class="o">=</span> <span class="n">VisionEncoder</span><span class="p">(</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">num_patches</span><span class="p">,</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">num_layers</span><span class="p">,</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">,</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">num_heads</span><span class="p">,</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">dim_mlp</span><span class="p">,</span>
            <span class="n">dropout</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">classifier</span> <span class="o">=</span> <span class="n">classifier</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">pretrain_classifier</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Sequential</span><span class="p">(</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">),</span>
            <span class="n">nn</span><span class="p">.</span><span class="n">Tanh</span><span class="p">(),</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">fine_tune_classifier</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">,</span> <span class="n">num_classes</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">mode</span> <span class="o">=</span> <span class="n">mode</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputs</span><span class="p">:</span> <span class="n">Tensor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">any</span><span class="p">:</span>
        <span class="s">""" For cls pooling """</span>
        <span class="k">assert</span> <span class="n">inputs</span><span class="p">.</span><span class="n">ndim</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">,</span> <span class="sa">f</span><span class="s">"Input shape should be [BS, CHANNEL, IMAGE_SIZE, IMAGE_SIZE], but got </span><span class="si">{</span><span class="n">inputs</span><span class="p">.</span><span class="n">shape</span><span class="si">}</span><span class="s">"</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">inputs</span>

        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">extractor</span> <span class="o">==</span> <span class="s">'cnn'</span><span class="p">:</span>
            <span class="c1"># self.conv(x).shape == [batch, dim, image_size/patch_size, image_size/patch_size]
</span>            <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">conv</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="bp">self</span><span class="p">.</span><span class="n">dim_model</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">num_patches</span><span class="o">**</span><span class="mi">2</span><span class="p">).</span><span class="n">transpose</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># self.extractor == 'base':
</span>            <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">input_embedding</span><span class="p">(</span>
                <span class="n">x</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="bp">self</span><span class="p">.</span><span class="n">num_patches</span><span class="p">,</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">patch_size</span><span class="o">**</span><span class="mi">2</span> <span class="o">*</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
            <span class="p">)</span>
        <span class="n">cls_token</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>  <span class="c1"># can change init method
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">cat</span><span class="p">([</span><span class="n">cls_token</span><span class="p">,</span> <span class="n">x</span><span class="p">],</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

        <span class="n">x</span><span class="p">,</span> <span class="n">layer_output</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">encoder</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># output
</span>
        <span class="c1"># classification
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">:]</span>  <span class="c1"># select cls token, which is position 0 in sequence
</span>        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">mode</span> <span class="o">==</span> <span class="s">'fine_tune'</span><span class="p">:</span>
            <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">fine_tune_classifier</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">mode</span> <span class="o">==</span> <span class="s">'pretrain'</span><span class="p">:</span>
            <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">fine_tune_classifier</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">pretrain_classifier</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">x</span>
</code></pre></div></div>

<p>한편, 코드에서 눈여겨봐야 할 점은 <code class="language-plaintext highlighter-rouge">MLP Head</code>로, 저자는 <code class="language-plaintext highlighter-rouge">pre-train</code> 시점과 <code class="language-plaintext highlighter-rouge">fine-tune</code> 시점에 서로 다른 <code class="language-plaintext highlighter-rouge">Classifier Head</code>를 사용한다. 전자에는 <code class="language-plaintext highlighter-rouge">Activation Function</code> 1개와 두 개의 <code class="language-plaintext highlighter-rouge">MLP Layer</code>를 사용하고, 후자에는 1개의 <code class="language-plaintext highlighter-rouge">MLP Layer</code>를 사용한다.</p>

<p>다만, <code class="language-plaintext highlighter-rouge">pretrain_classifier</code>의 입출력 차원에 대한 정확한 수치를 논문이나 official repo code를 확인해도 찾을 수 없었다, 그래서 임시로 모델의 차원과 똑같이 세팅하게 되었다.</p>

<p>또한 저자는 <code class="language-plaintext highlighter-rouge">CLS Pooling</code>과 더불어 <code class="language-plaintext highlighter-rouge">GAP</code> 방식도 제시하는데, <code class="language-plaintext highlighter-rouge">GAP</code> 방식은 추후에 따로 추가가 필요하다. 그리고 사전 훈련과 파인 튜닝 모두 분류 테스크를 수행했는데 (심지어 같은 데이터 세트를 사용함) 왜 굳이 서로 다른 <code class="language-plaintext highlighter-rouge">Classifier Head</code>를 정의했는지 의도를 알 수 없어 논문을 다시 읽어봤지만, 이유에 대해서 상세히 언급하는 부분이 없었다.</p>

<p><code class="language-plaintext highlighter-rouge">ViT</code>는 입력 임베딩을 정의하는 부분을 제외하면 저자의 의도대로 기존 트랜스포머와 동일한 모델 구조를 가졌다. 완전히 다른 데이터인 이미지와 텍스트에 같은 구조의 모델을 적용한다는 것이 정말 쉽지 않아 보였는데, 패치 개념을 만들어 자연어의 토큰처럼 간주하고 사용한 것이 의도대로 구현하는데 직관적이면서도 정말 효과적이었다고 생각한다. 이제 이렇게 만들어진 모델을 통해 진행한 여러 실험 결과에 어떤 인사이트가 담겨 있는지 알아보자.</p>

<h3 id="insight-from-experiment"><code class="language-plaintext highlighter-rouge">🔬 Insight from Experiment</code></h3>

<h4 id="insight-1-vit의-scalability-증명"><code class="language-plaintext highlighter-rouge">💡 Insight 1. ViT의 Scalability 증명</code></h4>
<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">Pre-Train</code>에 사용되는 이미지 데이터 세트의 크기가 커질수록 <code class="language-plaintext highlighter-rouge">Fine-Tune Stage</code>에서 <code class="language-plaintext highlighter-rouge">ViT</code>가 <code class="language-plaintext highlighter-rouge">CNN</code>보다 높은 성능</strong></li>
  <li><strong>같은 성능이라면 <code class="language-plaintext highlighter-rouge">ViT</code>가 상대적으로 적은 연산량을 기록</strong></li>
</ul>

<p align="center">
<img src="/assets/images/vision_transformer/insight1.png" alt="Performance per Dataset Scale" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em><a href="https://arxiv.org/abs/2010.11929">Performance per Dataset Scale</a></em></strong>
</p>

<p>위 도표는 <code class="language-plaintext highlighter-rouge">Pre-Train Stage</code>에 사용된 이미지 데이터 세트에 따른 모델의 <code class="language-plaintext highlighter-rouge">Fine-Tune</code> 성능 추이를 나타낸 자료다. 사전 훈련 데이터 스케일이 크지 않을 때는 <code class="language-plaintext highlighter-rouge">Conv</code> 기반의 <code class="language-plaintext highlighter-rouge">ResNet</code> 시리즈가 <code class="language-plaintext highlighter-rouge">ViT</code> 시리즈를 압도하는 모습을 보여준다. 하지만 데이터 세트의 크기가 커질수록 점점 <code class="language-plaintext highlighter-rouge">ViT</code> 시리즈의 성능이 <code class="language-plaintext highlighter-rouge">ResNet</code>을 능가하는 결과를 볼 수 있다.</p>

<p>한편, ViT &amp; ResNet 성능 결과 모두 ImageNet과 JFT-Image로 사전 훈련 및 파인 튜닝을 거쳐 나왔다고 하니 참고하자. <strong><u>추가로 파인 튜닝 과정에서 사전 훈련 때보다 이미지 사이즈를 키워서 훈련을 시켰다고 논문에서 밝히고 있는데, 이는 저자의 실험 결과에 기인한 것이다</u></strong>. 논문에 따르면 파인 튜닝 때 사전 훈련 당시보다 더 높은 해상도의 이미지를 사용하면 성능이 향상 된다고 하니 기억했다가  써먹어보자.</p>

<p align="center">
<img src="/assets/images/vision_transformer/insight1_2.png" alt="Performance per FLOPs Scale" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em><a href="https://arxiv.org/abs/2010.11929">Performance per FLOPs</a></em></strong>
</p>

<p>위 도표는 연산량 변화에 따른 모델의 성능 추이를 나타낸 그림이다. 두 지표 모두 같은 점수라면 <code class="language-plaintext highlighter-rouge">ViT</code> 시리즈의 연산량이 현저히 적음을 알 수 있다. 또한 정확도 95% 이하 구간에서 같은 성능이라면  <code class="language-plaintext highlighter-rouge">ViT</code>의 <code class="language-plaintext highlighter-rouge">Hybrid</code> 버전 모델의 연산량이 일반 <code class="language-plaintext highlighter-rouge">ViT</code> 버전보다 현저히 적음을 확인할 수 있다. 이러한 사실은 추후에 <code class="language-plaintext highlighter-rouge">Swin-Transformer</code> 설계에 영감을 준다.</p>

<p>두 개의 실험 결과를 종합했을 때, <code class="language-plaintext highlighter-rouge">ViT</code>가 <code class="language-plaintext highlighter-rouge">ResNet</code>보다 일반화 성능이 더 높으며(도표 1) 모델의 <code class="language-plaintext highlighter-rouge">Saturation</code> 현상이 두드러지지 않아 성능의 한계치(도표 2) 역시 더 높다고 볼 수 있다. 따라서 기존 트랜스포머의 연산•구조적 측면에서 <code class="language-plaintext highlighter-rouge">Scalability</code>를 성공적으로 이식했다고 평가할 수 있겠다.</p>

<h4 id="insight-2-pure-self-attention은-좋은-이미지-피처를-추출하기에-충분하다"><code class="language-plaintext highlighter-rouge">💡 Insight 2. Pure Self-Attention은 좋은 이미지 피처를 추출하기에 충분하다</code></h4>
<ul>
  <li><strong>Patch Embedding Layer의 PCA 결과, 패치의 기저가 되는 차원과 유사한 모양을 추출</strong>
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">Convolution</code> 없이 <code class="language-plaintext highlighter-rouge">Self-Attention</code>만으로도 충분히 이미지의 좋은 피처를 추출하는 것이 가능</strong></li>
      <li><strong><code class="language-plaintext highlighter-rouge">Vision</code>에서 <code class="language-plaintext highlighter-rouge">Convolution</code>에 대한 <code class="language-plaintext highlighter-rouge">reliance</code> 탈피 가능</strong></li>
    </ul>
  </li>
</ul>

<p align="center">
<img src="/assets/images/vision_transformer/insight2.png" alt="Patch Embedding Layer’s Filter" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em><a href="https://arxiv.org/abs/2010.11929">Patch Embedding Layer’s Filter</a></em></strong>
</p>

<p>위 자료는 충분한 학습을 거치고 난 <code class="language-plaintext highlighter-rouge">ViT</code>의 <code class="language-plaintext highlighter-rouge">Patch Embedding Layer</code>의 필터를 <code class="language-plaintext highlighter-rouge">PCA</code>한 결과 중에서 특잇값이 높은 상위 28개의 피처를 나열한 그림이다. 이미지의 기본 뼈대가 되기에 적합해 보이는 피처들이 추출된 모습을 볼 수 있다.</p>

<p>따라서 <code class="language-plaintext highlighter-rouge">Inductive Bias</code> 없이, 단일  <code class="language-plaintext highlighter-rouge">Self-Attention</code>만으로 이미지의 피처를 추출하는 것이 충분히 가능하다. 비전 분야에 만연한 <code class="language-plaintext highlighter-rouge">Convolution</code> 의존에서 벗어나 새로운 아키텍처의 도입이 가능함을 시사한 부분이라고 할 수 있겠다.</p>

<h4 id="insight-3-bottom2general-information-top2specific-information"><code class="language-plaintext highlighter-rouge">💡 Insight 3. Bottom2General Information, Top2Specific Information</code></h4>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">입력</code>과 가까운 인코더일수록 <code class="language-plaintext highlighter-rouge">Global &amp; General</code>한 Information을 포착</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">출력</code>과 가까운 인코더일수록 <code class="language-plaintext highlighter-rouge">Local &amp; Specific</code>한 Information을 포착</strong></li>
</ul>
<p align="center">
<img src="/assets/images/vision_transformer/insight3.png" alt="Multi-Head Attention Distance per Network Depth" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em><a href="https://arxiv.org/abs/2010.11929">Multi-Head Attention Distance per Network Depth</a></em></strong>
</p>

<p>다음 자료는 인코더의 개수 변화에 따른 개별 어텐션 해드의 어텐션 거리 변화 추이를 나타낸 그림이다. 여기서 어텐션 거리란, 해드가 얼마나 멀리 떨어진 패치를 어텐션했는지 픽셀 단위로 표현한 지표다. 해당 값이 높을수록 거리상 멀리 떨어진 패치와 어텐션을, 작을수록 가까운 패치와 어텐션 했다는 것을 의미한다. 다시 도표를 살펴보자. 입력과 가까운 인코더일수록(Depth 0) 해드별 어텐션 거리의 분산이 커지고, 출력과 가까운 인코더일수록(Depth 23) 분산이 점자 줄어들다가 거의 한 점에 수렴하는듯한 양상을 보여준다. 다시 말해, 입력과 가까운 <code class="language-plaintext highlighter-rouge">Bottom Encoder</code>는 멀리 떨어진 패치부터 가까운 패치까지 모두 전역적(<code class="language-plaintext highlighter-rouge">Global</code>)으로 어텐션을 수행해 <code class="language-plaintext highlighter-rouge">General</code> 한 정보를 포착하게 되고 출력과 가까운 <code class="language-plaintext highlighter-rouge">Top Encoder</code>는 개별 해드들이 모두 비슷한 거리에 위치한 패치(<code class="language-plaintext highlighter-rouge">Local</code>)에 어텐션을 수행해 <code class="language-plaintext highlighter-rouge">Specific</code> 한 정보를 포착하게 된다.</p>

<p>이 때 <code class="language-plaintext highlighter-rouge">Global</code>과 <code class="language-plaintext highlighter-rouge">Local</code>이라는 용어 때문에 <code class="language-plaintext highlighter-rouge">Bottom Encoder</code> 는 멀리 떨어진 패치와 어텐션하고, <code class="language-plaintext highlighter-rouge">Top Encoder</code>는 가까운 패치와 어텐션한다고 착각하기 쉽다. <strong><u>그러나 개별 해드들의 어텐션 거리가 얼마나 분산되어 있는가가 바로 </u></strong><code class="language-plaintext highlighter-rouge">Global</code>, <code class="language-plaintext highlighter-rouge">Local</code><strong><u>을 구분하는 기준이 된다.</u></strong> 입력부에 가까운 레이어들은 헤드들의 어텐션 거리 분산이 매우 큰 편인데, 이것을 이패치 저패치 모두 어텐션 해보고 비교해본다고 해석해서 <code class="language-plaintext highlighter-rouge">Global</code>이라고 부르고, 출력부에 가까운 레이어는 헤드들의 어텐션 거리 분산이 매우 작은 편인데, 이게 바로 각각의 헤드들이 어떤 정보에 주목해야할지(분류 손실이 가장 작아지는 패치) 범위를 충분히 좁힌 상태에서 특정 부분에만 집중한다는 의미로 해석해 <code class="language-plaintext highlighter-rouge">Local</code> 이라고 부르게 되었다.</p>

<p>&lt;<strong><a href="https://arxiv.org/abs/2006.05987">Revisiting Few-sample BERT Fine-tuning</a></strong>&gt;도 위와 비슷한 맥락의 사실에 대해 언급하고 있으니 참고해보자. 이러한 사실은 트랜스포머 인코더 계열 모델을 튜닝할 때 <code class="language-plaintext highlighter-rouge">Depth</code> 별로 다른 <code class="language-plaintext highlighter-rouge">Learning Rate</code>을 적용하는 <code class="language-plaintext highlighter-rouge">Layerwise Learning Rate Decay</code> 의 초석이 되기도 한다. <code class="language-plaintext highlighter-rouge">Layerwise Learning Rate Decay</code> 에 대해서는 <strong><a href="https://towardsdatascience.com/advanced-techniques-for-fine-tuning-transformers-82e4e61e16e">여기 포스트</a></strong>를 참고하도록 하자.</p>

<p align="center">
<img src="/assets/images/vision_transformer/insight3_2.png" alt="Output from Last Encoder" class="align-center image-caption" width="40%&quot;, height=&quot;10%" />
<strong><em><a href="https://arxiv.org/abs/2010.11929">Output from Last Encoder</a></em></strong>
</p>

<p>한편 논문에는 언급되지 않은, 필자의 뇌피셜에 가깝지만, <strong><u>출력에 가까운 인코더들의 해드가 가진</u></strong> <code class="language-plaintext highlighter-rouge">Attention Distance</code><strong><u>이 모두 비슷하다는 사실로 이미지 분류에 결정적인 역할을 하는 피처가 이미지의 특정 구역에 모여 있으며, 그 스팟은 이미지의 중앙 부근일 가능성이 높다고 추측 해볼 수 있다.</u></strong> 모든 해드의 픽셀 거리가 서로 비슷하려면 일단 비슷한 위치의 패치에 어텐션을 해야하기 때문에 분류 손실값을 최소로 줄여주는 피처는 보통 한 구역(패치)에 몰려 있을 것이라고 유추가 가능하다. 또한 특정 스팟이 중앙에 위치할수록 어텐션 거리의 분산이 줄어들것이라고 생각 해볼 수도 있었다. 저자는 <code class="language-plaintext highlighter-rouge">Attention Rollout</code>이라는 개념을 통해 <code class="language-plaintext highlighter-rouge">Attention Distance</code>을 산출했다고 언급하는데, 자세한 내용은 옆에 두 링크를 참고해보자(<a href="https://hongl.tistory.com/234">한국어 설명 블로그</a>,  <a href="https://arxiv.org/abs/2005.00928">원논문</a>). 이러한 필자의 가설이 맞다면, <code class="language-plaintext highlighter-rouge">Convolution</code> 의 <code class="language-plaintext highlighter-rouge">Inductive Bias</code>  중 <code class="language-plaintext highlighter-rouge">Locality</code> 의 효과성을 <code class="language-plaintext highlighter-rouge">Self-Attention</code>을 통해 입증이 가능하며, 반대로 <code class="language-plaintext highlighter-rouge">Convolution</code>에 대한 의존에서 벗어나 단일 <code class="language-plaintext highlighter-rouge">Self-Attention</code> 으로도 같은 효과를 낼 수 있다는 증거 중 하나가 될 것이다.</p>

<h4 id="insight-4-vit는-cls-pooling-사용하는게-효율적"><code class="language-plaintext highlighter-rouge">💡 Insight 4. ViT는 CLS Pooling 사용하는게 효율적</code></h4>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">CLS Pooling</code>은 <code class="language-plaintext highlighter-rouge">GAP</code> 보다 2배 이상 큰 학습률을 사용해도 비슷한 성능을 기록</strong>
    <ul>
      <li><strong><u>학습 속도는 더 빠르되 성능이 비슷하기 때문에</u></strong> <code class="language-plaintext highlighter-rouge">CLS Pooling</code> <strong><u>이 더 효율적</u></strong></li>
    </ul>
  </li>
</ul>

<p align="center">
<img src="/assets/images/vision_transformer/insight4.png" alt="Performance Trend by Pooling Method with LR" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em><a href="https://arxiv.org/abs/2010.11929">Performance Trend by Pooling Method with LR</a></em></strong>
</p>

<p>다음 도표는 풀링 방식과 학습률의 변동에 따른 정확도 변화 추이를 나타낸 그림이다. 비슷한 성능이라면 <code class="language-plaintext highlighter-rouge">CLS Pooling</code>이 <code class="language-plaintext highlighter-rouge">GAP</code>보다 2배 이상 큰 학습률을 사용했다. 학습률이 크면 모델의 수렴 속도가 빨라져 학습 속도가 빨라지는 장점이 있다. 그런데 성능까지 비슷하다면 <code class="language-plaintext highlighter-rouge">ViT</code>는 <code class="language-plaintext highlighter-rouge">CLS Pooling</code>을 사용하는 것이 더 효율적이라고 할 수 있겠다.</p>

<p>나중에 시간이 된다면 다른 풀링 방식, 예를 들면 <code class="language-plaintext highlighter-rouge">Weighted Layer Pooling</code>, <code class="language-plaintext highlighter-rouge">GeM Pooling</code>, <code class="language-plaintext highlighter-rouge">Attention Pooling</code> 같은 것을 적용해 실험해보겠다.</p>

<h4 id="insight-5-vit는-absolute-1d-position-embedding-사용하는게-가장-효율적"><code class="language-plaintext highlighter-rouge">💡 Insight 5. ViT는 Absolute 1D-Position Embedding 사용하는게 가장 효율적</code></h4>

<ul>
  <li><strong>어떤 형태로든 위치 임베딩 값을 정의해준다면, 형태와 종류에 상관없이 거의 비슷한 성능을 보임</strong></li>
  <li><strong>성능이 비슷하면, 직관적이고 구현이 간편한 <code class="language-plaintext highlighter-rouge">Absolute 1D-Position Embedding</code> 방법을 사용하는 것이 가장 효율적</strong></li>
  <li><strong><code class="language-plaintext highlighter-rouge">ViT</code>는 <code class="language-plaintext highlighter-rouge">Patch-Level</code> 사용해, <code class="language-plaintext highlighter-rouge">Pixel-Level</code>보다 상대적으로 시퀀스 길이가 짧아 위치•공간 정보를 인코딩하는 방식에 영향을 덜 받음</strong></li>
</ul>

<p align="center">
<img src="/assets/images/vision_transformer/insight5.png" alt="Performance Table by making Position Embedding method" class="align-center image-caption" width="75%&quot;, height=&quot;50%" />
<strong><em><a href="https://arxiv.org/abs/2010.11929">Performance Table by making Position Embedding method</a></em></strong>
</p>

<p>위 실험 결과는 <code class="language-plaintext highlighter-rouge">Position Embedding</code> 인코딩 방식에 따른 <code class="language-plaintext highlighter-rouge">ViT</code> 모델의 성능 변화 추이를 나타낸 자료다. 인코딩 형태와 상관없이 위치 임베딩의 유무가 성능에 큰 영향을 미친다는 사실을 알려주고 있다. 한편, 인코딩 형태 변화에 따른 유의미한 성능 변화는 없었다. 하지만 <code class="language-plaintext highlighter-rouge">Absolute 1D-Position Embedding</code>의 컨셉이 가장 직관적이며 구현하기 편하고 연산량이 다른 인코딩보다 적다는 것을 감안하면 ViT에 가장 효율적인 위치 임베딩 방식이라고 판단할 수 있다.</p>

<p>논문은 결과에 대해 <code class="language-plaintext highlighter-rouge">ViT</code>가 사용하는 <code class="language-plaintext highlighter-rouge">Patch-Level Embedding</code>이 <code class="language-plaintext highlighter-rouge">Pixel-Level</code>보다 상대적으로 짧은 시퀀스 길이를 갖기 때문이라고 설명한다. 예를 들어 <code class="language-plaintext highlighter-rouge">224x224</code> 사이즈의 이미지를 <code class="language-plaintext highlighter-rouge">16x16</code> 사이즈의 패치 여러장으로 만든다고 생각해보자. 임베딩 차원에 들어가는 $N$ 은 $(224/16)^2$ , 즉 <code class="language-plaintext highlighter-rouge">196</code>이 된다. 한편 이것을 <code class="language-plaintext highlighter-rouge">Pixel-Level</code>로 임베딩 하게 되면 $224^2$, 즉 <code class="language-plaintext highlighter-rouge">50176</code> 개의 시퀀스가 생긴다. 따라서 <code class="language-plaintext highlighter-rouge">Pixel-Level</code> 에 비하면 훨씬 짧은 시퀀스 길이를 갖기 때문에 <code class="language-plaintext highlighter-rouge">Absolute 1D-Position Embedding</code> 만으로도 충분히 <code class="language-plaintext highlighter-rouge">Spatial Relation</code>을 학습할 수 있는 것이다.</p>

<p align="center">
<img src="/assets/images/vision_transformer/insight5_2.png" alt="Absolute 1D-Position Embedding" class="align-center image-caption" width="50%&quot;, height=&quot;50%" />
<strong><em><a href="https://arxiv.org/abs/2010.11929">Absolute 1D-Position Embedding</a></em></strong>
</p>

<p>하지만, 필자는 자연어 처리의 <code class="language-plaintext highlighter-rouge">Transformer-XL</code>, <code class="language-plaintext highlighter-rouge">XLNet</code>, <code class="language-plaintext highlighter-rouge">DeBERTa</code> 같은 모델들이 <code class="language-plaintext highlighter-rouge">Relative Position Embedding</code> 방식을 적용해 큰 성공을 거둔 바가 있다는 점을 생각하면 이런 결과가 납득이 가면서도 의아했다.</p>

<p>저자는 실험에 사용한 모든 데이터 세트를 <code class="language-plaintext highlighter-rouge">224x224</code>로 <code class="language-plaintext highlighter-rouge">resize</code> 했다고 밝히고 있는데, 만약 이미지 사이즈가 <code class="language-plaintext highlighter-rouge">512x512</code>정도만 되더라도 $N$ 값이 <code class="language-plaintext highlighter-rouge">1024</code> 이라서 위 결과와 상당히 다른 양상이 나타나지 않을까 하는 생각이 든다. 추후에 시간이 된다면 이 부분도 꼭 실험해봐야겠다. 예측컨데 이미자 사이즈가 커질수록 <code class="language-plaintext highlighter-rouge">2D Position Embedding</code> 혹은 <code class="language-plaintext highlighter-rouge">Relative Position Embedding</code>이 더 효율적일 것이라 예상한다.</p>

<h3 id="️conclusion"><code class="language-plaintext highlighter-rouge">🧑‍⚖️ Conclusion</code></h3>

<p>이렇게 <code class="language-plaintext highlighter-rouge">ViT</code> 모델을 제안한 <a href="https://arxiv.org/abs/2010.11929">&lt;An Image Is Worth 16x16 Words: Transformers For Image Recognition At Scale&gt;</a>에 실린 내용을 모두 살펴보았다. <code class="language-plaintext highlighter-rouge">Conv</code> 에 대한 의존을 탈피 했다는 점에서 매우 의미가 있는 시도였으며, Self-Attention &amp; Transformer 구조 채택만으로도 컴퓨터 비전 영역에 어느 정도  <code class="language-plaintext highlighter-rouge">scalability</code> 를  이식하는데 성공했다는 점에서 후대 연구에 중요한 시사점을 남겼다. 상대적으로 정체(??)되어 있던 비전 영역이 성능의 한계를 한단계 뛰어넘을 수 있는 초석을 마련해준 셈이다.</p>

<p>하지만, <code class="language-plaintext highlighter-rouge">ViT</code>의 <code class="language-plaintext highlighter-rouge">Pretrain Stage</code>에 적합한 <code class="language-plaintext highlighter-rouge">Self-Supervised Learning</code> 방법을 찾지 못해 여전히 <code class="language-plaintext highlighter-rouge">Supervised Learning</code> 방식을 채택한 점은 매우 아쉬웠다. <strong><u>이는 결국 데이터</u></strong> <code class="language-plaintext highlighter-rouge">Scale</code> <strong><u>확장에 한계를 의미하기 때문이다.</u></strong> 오늘날 BERT와 GPT의 성공 신화는 비단 <code class="language-plaintext highlighter-rouge">Self-Attention</code>와 <code class="language-plaintext highlighter-rouge">Transformer</code>의 구조적 탁월성에 의해서만 탄생한게 아니다. 이에 못지 않게(개인적으로 제일 중요하다 생각) 주요했던 것이 바로 데이터 <code class="language-plaintext highlighter-rouge">Scale</code> 확장이다.  <code class="language-plaintext highlighter-rouge">MLM</code>, <code class="language-plaintext highlighter-rouge">AR</code> 등의 <code class="language-plaintext highlighter-rouge">Self-Supervised Learning</code> 덕분에 데이터 <code class="language-plaintext highlighter-rouge">Scale</code>을 효율적으로 스케일 업 시킬 수 있었고, 사전 훈련 데이터의 증가는 모델 깊이, 너비, 차원까지 더욱 크케 키우는데 기여했다.</p>

<p>또한 <code class="language-plaintext highlighter-rouge">ViT</code>는 선천적으로 <code class="language-plaintext highlighter-rouge">Patch-Level Embedding</code>을 사용하기 때문에 다양한 이미지 테스크에 적용하는 것이 힘들다. <code class="language-plaintext highlighter-rouge">Segmentation</code>, <code class="language-plaintext highlighter-rouge">Object Detection</code> 같은 Task는 픽셀 단위로 예측을 수행해 객체를 탐지하거나 분할해야 한다. 하지만 <code class="language-plaintext highlighter-rouge">Patch</code> 단위로 훈련을 수행했던 <code class="language-plaintext highlighter-rouge">ViT</code>는 <code class="language-plaintext highlighter-rouge">Pixel</code> 단위의 예측을 수행하는데 어려움을 겪는다.</p>

<p>마지막으로 <code class="language-plaintext highlighter-rouge">Self-Attention</code> 자체의 <code class="language-plaintext highlighter-rouge">Computational Overhead</code>가 너무 심해 고해상도의 이미지를 적절히 다루기 힘들다. 위에서도 언급했지만 이미지의 사이즈가 <code class="language-plaintext highlighter-rouge">512x512</code>만 되어도 이미 패치의 개수가 <code class="language-plaintext highlighter-rouge">1024</code>가 된다. 사이즈가 커질수록 시퀀스 길이 역시 기하급수적으로 커지는데다가 <code class="language-plaintext highlighter-rouge">Self-Attention</code> 는 쿼리와 키 행렬을 내적 (자기 자신과 곱이라 볼 수 있음) 하기 때문에 <code class="language-plaintext highlighter-rouge">Computational Overhead</code>가 $N^2$이 된다.</p>

<p>필자는 <code class="language-plaintext highlighter-rouge">ViT</code>를 절반의 성공이라고 평하고 싶다. 본래 <code class="language-plaintext highlighter-rouge">ViT</code>의 설계 목적은 비전 분야의 <code class="language-plaintext highlighter-rouge">Conv</code>에 대한 의존을 탈피하면서, 퓨어한 <code class="language-plaintext highlighter-rouge">Self-Attention</code>을 도입해 <code class="language-plaintext highlighter-rouge">Scalabilty</code> 를 이식하는 것이었다. <code class="language-plaintext highlighter-rouge">Self-Attention</code>을 도입하는데는 성공했지만, 여전히 다룰 수 있는 이미지 사이즈나 Task에는 한계가 분명하며 결정적으로 <code class="language-plaintext highlighter-rouge">Self-Supervised Learning</code> 방식을 도입하지 못했다. <code class="language-plaintext highlighter-rouge">Scalabilty</code> 라는 단어의 의미를 생각하면, 방금 말한 부분에서까지 확장성이 있어야 설계 의도에 부합하는 결과라고 생각한다.</p>]]></content><author><name>qcqced</name><email>qcqced123@gmail.com</email></author><category term="Computer Vision" /><category term="Computer Vision" /><category term="Vision Transformer" /><category term="ViT" /><category term="Transformer" /><category term="Self-Attention" /><category term="Image Classification" /><summary type="html"><![CDATA[ViT Official Paper Review with Pytorch Implementation]]></summary></entry><entry><title type="html">🔢 Vector Space: Column Space, Basis, Rank, Null Space</title><link href="http://localhost:4000/linear-algebra/vector-subspace" rel="alternate" type="text/html" title="🔢 Vector Space: Column Space, Basis, Rank, Null Space" /><published>2023-07-19T00:00:00+09:00</published><updated>2023-07-10T13:00:00+09:00</updated><id>http://localhost:4000/linear-algebra/vector_space</id><content type="html" xml:base="http://localhost:4000/linear-algebra/vector-subspace"><![CDATA[<h3 id="-column-space"><code class="language-plaintext highlighter-rouge">🔢 Column Space</code></h3>

\[C(A) = Range(A)\]

<p>열벡터가 <code class="language-plaintext highlighter-rouge">span</code>하는 공간을 의미한다. <code class="language-plaintext highlighter-rouge">span</code> 이란, 벡터의 집합에 의해 생성된 모든 <code class="language-plaintext highlighter-rouge">linear combination</code>의 결과로 생성할 수 있는 부분 공간을 말한다. 따라서 <code class="language-plaintext highlighter-rouge">column space</code> 는 열벡터의 <code class="language-plaintext highlighter-rouge">linear combination</code> 결과로 생성할 수 있는 <code class="language-plaintext highlighter-rouge">vector space</code>의 부분 공간을 말한다.</p>
<h3 id="-basis"><code class="language-plaintext highlighter-rouge">🍖 Basis</code></h3>
<figure class="half">
  <a href="https://twlab.tistory.com/24"><img src="/assets/images/linear_independent.png" title="Linear Independent" /></a>
  <a href="https://twlab.tistory.com/24"><img src="/assets/images/linear_dependent.png" title="Linear Independent" /></a>
</figure>
<p>기저에 대해 알기 위해서는 먼저 <code class="language-plaintext highlighter-rouge">linear independent(선형 독립)</code>의 의미를 알아야 한다. 선형독립이란, 왼쪽 그림처럼 서로 다른 벡터들이 관련성 없이 독립적으로 존재하는 상태를 말한다. 따라서 서로 다른 두 벡터가 선형 독립이라면 한 벡터의 선형조합으로 다른 벡터를 표현할 수 없다. 반대로 선형 종속 상태면 오른쪽 그림처럼 벡터를 다른 벡터의 선형조합으로 표현 가능하다.</p>

<p>이제 기저에 대해 알아보자. 기저란 선형 독립이면서 벡터 공간을 <code class="language-plaintext highlighter-rouge">span</code> 하는 벡터 집합을 말한다. 다시 말해, 공간 또는 차원을 표현하는데 필요한 요소들의 집합이라고 볼 수 있다. 예를 들어 2차원 공간을 표현하고 싶다면 서로 선형 독립인 벡터 2개가 필요하다. 오른쪽 그림처럼 벡터 2개가 존재해도 서로 종속 관계라면 표현(span)할 수 있는 공간은 1차원의 직선이 되기 때문이다. 정리하면, $N$차원 공간의 기저란 선형 독립이면서 벡터 공간을 <code class="language-plaintext highlighter-rouge">span</code>하는 벡터가 $N$개 있는 상태다. 추가로, $N$차원 공간의 기저는<code class="language-plaintext highlighter-rouge">NxN</code> 크기의 <code class="language-plaintext highlighter-rouge">Invertable</code>한 행렬과 동치를 이룬다. 뒤에서 더 자세히 다루겠지만 역행렬은 좌표평면 상에서 <code class="language-plaintext highlighter-rouge">reverse linear combination</code> 의 역할을 하기 때문이다.<br />
한편 기저는 유일하지 않다. 위에서 언급한 $N$차원 기저의 필요충분조건을 만족하는 모든 벡터 집합은 모두 기저가 될 수 있다.</p>

<h3 id="-standard-basis"><code class="language-plaintext highlighter-rouge">🦴 Standard Basis</code></h3>

\[I= 
   \begin{pmatrix} 
   1 &amp; 0 &amp; 0  \\
   0 &amp; 1 &amp; 0  \\
   0 &amp; 0 &amp; 1  \\
   \end{pmatrix}\]

<p>표준 기저란, 기저가 표현하는 차원의 축이 우리가 흔히 아는 <code class="language-plaintext highlighter-rouge">x축, y축, z축</code> 이 되는 기저 벡터를 말한다. 수학적으로는 주대각성분의 값이 모두 1인 대각행렬 $D$, 즉 단위 행렬 $I$가 기저일 때 우리는 표준 기저라고 정의한다.</p>

<h3 id="-rank"><code class="language-plaintext highlighter-rouge">🧮 Rank</code></h3>

<p align="center">
<img src="/assets/images/column_space.png" alt="Column Space Image" class="align-center image-caption" width="100%&quot;, height=&quot;50%" />
<strong><em><a href="https://www.researchgate.net/figure/Example-of-a-projection-of-a-matrix-3-2-on-the-column-space_fig2_220103928">Column Space Image</a></em></strong>
</p>

<p>행렬에서 <code class="language-plaintext highlighter-rouge">independent</code>한 <code class="language-plaintext highlighter-rouge">column</code>의 개수를 의미하며, 기하학적으로는 <code class="language-plaintext highlighter-rouge">column space</code>가 실제 <code class="language-plaintext highlighter-rouge">span</code>하는 공간의 차원을 말한다. <code class="language-plaintext highlighter-rouge">Rank Theorem</code> 에 의해, 행렬 $A$ column vector는 행렬 $A^T$의 row vector와 같다. 따라서 column rank와 row rank 값 역시 항상 동일하다. 행렬 $A$의 랭크는 $rank(A)$로 표기한다.</p>

<p>행렬의 랭크는 행렬의 생김새에 따라 부르는 명칭이 조금씩 바뀐다. 예를 들어 열벡터가 모두 선형 독립이면서 크기가 <code class="language-plaintext highlighter-rouge">10x3</code> 인 행렬 $C$가 있다고 가정해보자. 모든 열벡터가 선형 독립이기 때문에 우리는 행렬 $C$의 랭크가 3이라는 것을 알 수 있다. 이 때 행렬 $C$를  <code class="language-plaintext highlighter-rouge">full-column rank</code> 라고 부른다. 그리고 행벡터의 랭크 역시 랭크 정리 이론에 의해 3이 될 것이다. 이번에는 행렬 $C$의 열벡터 랭크가 2라고 가정해보자. 우리는 이 때 행렬 $C$를 <code class="language-plaintext highlighter-rouge">rank-deficient</code>로 정의한다. 만약 행렬 $C$의 열벡터가 모두 선형독립이고 그 크기가 <code class="language-plaintext highlighter-rouge">10x10</code>이라면 뭐라고 부를까?? 이 때는 열벡터, 행벡터 모두 랭크가 10이 되기 때문에 <code class="language-plaintext highlighter-rouge">full-rank</code> 라고 부른다.</p>

<p>정리하면 행렬의 랭크란, 행렬의 행의 크기 M 그리고 열의 크기 N 중에서 더 작은값보다 같거나 작으면서 <code class="language-plaintext highlighter-rouge">independent</code>한 <code class="language-plaintext highlighter-rouge">column</code>의 개수라는 의미를 내포한 개념이라고 볼 수 있겠다.</p>

<p>추가로, column vector와 row vector를 순서대로 곱하면 항상 $Rank = 1$인 행렬 $A$가 만들어진다는 것이다. 그렇게 만들어진 행렬의 원소가 두 벡터의 <code class="language-plaintext highlighter-rouge">linear combination</code>  으로 구성된 것이라서 당연한 소리라고 생각할 수 있지만, 이것은 선형대수학에서 매우 중요한 성질이 된다. 뒤집어서 보면 어떤 행렬의 $Rank=1$이라는 것은 그 행렬이 어떤 다른 행렬의 기본 단위 요소가 된다는 의미이기 때문이다. 어떤 행렬의 랭크가 4라는 것은 랭크 1짜리 행렬 4개의 조합이라고 생각해볼 수 있다.</p>

<h3 id="-null-space"><code class="language-plaintext highlighter-rouge">👌 Null Space</code></h3>

\[Ax=0\]

<p>위 수식을 만족하는 벡터 $x$의 집합을 말한다. 다시 말해, 선형 변환 $A$(크기가 MxN인 행렬)를 통해 0이 되는 벡터 집합 $x$가 바로 <code class="language-plaintext highlighter-rouge">null space(영공간)</code>이다. 영공간은 선형변환 $A$의 랭크와 무관하며 선형변환 A의 열차원인 $R^N$상에 존재하는 공간이다. 그래서 $Ax=0$을 행렬과 벡터의 내적으로 해석하면 영공간은 선형변환 $A$의 row space와 수직이다라는 사실을 알 수 있다.</p>

\[N_A = dim(Null(A)) - rank(A)\]

<p>한편, 영공간이 <code class="language-plaintext highlighter-rouge">span</code> 하는 공간의 차원과 션형변환 $A$의 랭크를 더하면 션형변환 $A$의 열차원을 알 수 있다. 수식으로 표현하면 다음과 같다.</p>

<h3 id="-left-null-space"><code class="language-plaintext highlighter-rouge">🫲 Left Null Space</code></h3>

\[A^Tx=0\]

<p>선형변환 $A$의 크기가 MxN일 때, $A$의 좌 영공간은 $A$의 모든 열들에 대해 선형 조합으로 0 벡터(영벡터)가 되는 모든 벡터 집합 $x$의 공간을 <code class="language-plaintext highlighter-rouge">좌영공간</code>이라고 한다. $A$의 열벡터에 대한 영공간이라는 것이 포인트가 된다. 따라서 좌영공간은 선형변환 $A$의 전치행렬인 $A^T$의 영공간을 구하는 것과 같으며, 선형변환 $A$의 column space와 수직하게 된다.</p>]]></content><author><name>qcqced</name><email>qcqced123@gmail.com</email></author><category term="Linear Algebra" /><category term="Linear Algebra" /><category term="linear independent" /><category term="vector space" /><category term="rank" /><category term="column space" /><category term="null space" /><category term="basis" /><summary type="html"><![CDATA[💡 Concept of main sub-space]]></summary></entry><entry><title type="html">🎲 RuntimeError: CUDA error: CUBLAS_STATUS_ALLOC_FAILED when calling cublasCreate(hand≤)</title><link href="http://localhost:4000/framework-library/mismatch-embedding" rel="alternate" type="text/html" title="🎲 RuntimeError: CUDA error: CUBLAS_STATUS_ALLOC_FAILED when calling cublasCreate(hand≤)" /><published>2023-07-17T00:00:00+09:00</published><updated>2023-07-18T02:00:00+09:00</updated><id>http://localhost:4000/framework-library/embedding_mismatch</id><content type="html" xml:base="http://localhost:4000/framework-library/mismatch-embedding"><![CDATA[<h3 id="-nnembedding-차원--실제-데이터-입력-차원"><code class="language-plaintext highlighter-rouge">😵 nn.Embedding 차원 ≠ 실제 데이터 입력 차원</code></h3>
<p><code class="language-plaintext highlighter-rouge">torch.nn.Embedding</code>에서 정의한 입출력 차원과 실제 데이터의 차원이 다른 경우에 발생하는 에러다. 다양한 상황에서 마주할 수 있는 에러지만, 필자의 경우 <code class="language-plaintext highlighter-rouge">Huggingface</code>에서 불러온<code class="language-plaintext highlighter-rouge">pretrained tokenizer</code>에 <code class="language-plaintext highlighter-rouge">special token</code> 을 추가해 사용할 때, 토큰을 추가했다는 사실을 잊고 <code class="language-plaintext highlighter-rouge">nn.Embedding</code> 에 정의한 입출력 차원을 변경하지 않아서 발생하는 경우가 많았다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">transformers</span> <span class="kn">import</span> <span class="n">AutoTokenizer</span><span class="p">,</span> <span class="n">AutoConfig</span><span class="p">,</span> <span class="n">AutoModel</span>

<span class="k">class</span> <span class="nc">CFG</span><span class="p">:</span>
    <span class="n">model_name</span> <span class="o">=</span> <span class="s">'microsoft/deberta-v3-large'</span>
    <span class="n">config</span> <span class="o">=</span> <span class="n">AutoConfig</span><span class="p">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_name</span><span class="p">)</span>
    <span class="n">tokenizer</span> <span class="o">=</span> <span class="n">AutoTokenizer</span><span class="p">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_name</span><span class="p">)</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">AutoModel</span><span class="p">.</span><span class="n">from_pretrained</span><span class="p">(</span><span class="n">model_name</span><span class="p">,</span> <span class="n">config</span><span class="o">=</span><span class="n">config</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">add_markdown_token</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">sCFG</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="s">"""
    Add MarkDown token to pretrained tokenizer ('[MD]')
    Args:
        cfg: CFG, needed to load tokenizer from Huggingface AutoTokenizer
    """</span>
    <span class="n">markdown_token</span> <span class="o">=</span> <span class="s">'[MD]'</span>
    <span class="n">special_tokens_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s">'additional_special_tokens'</span><span class="p">:</span> <span class="p">[</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">markdown_token</span><span class="si">}</span><span class="s">'</span><span class="p">]}</span>
    <span class="n">cfg</span><span class="p">.</span><span class="n">tokenizer</span><span class="p">.</span><span class="n">add_special_tokens</span><span class="p">(</span><span class="n">special_tokens_dict</span><span class="p">)</span>
    <span class="n">markdown_token_id</span> <span class="o">=</span> <span class="n">cfg</span><span class="p">.</span><span class="n">tokenizer</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">markdown_token</span><span class="si">}</span><span class="s">'</span><span class="p">,</span> <span class="n">add_special_tokens</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="s">'input_ids'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>

    <span class="nb">setattr</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="n">tokenizer</span><span class="p">,</span> <span class="s">'markdown_token'</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">markdown_token</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">setattr</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="n">tokenizer</span><span class="p">,</span> <span class="s">'markdown_token_id'</span><span class="p">,</span> <span class="n">markdown_token_id</span><span class="p">)</span>
    <span class="n">cfg</span><span class="p">.</span><span class="n">tokenizer</span><span class="p">.</span><span class="n">save_pretrained</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">checkpoint_dir</span><span class="si">}</span><span class="s">/tokenizer/'</span><span class="p">)</span>


<span class="n">add_markdown_token</span><span class="p">(</span><span class="n">CFG</span><span class="p">)</span>
<span class="n">CFG</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">resize_token_embeddings</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">tokenizer</span><span class="p">))</span>
</code></pre></div></div>
<p>구글링해보니 해결하는 방법은 다양한 것 같은데, <code class="language-plaintext highlighter-rouge">torch.nn.Embedding</code>에 정의된 입출력 차원을 실제 데이터 차원과 맞춰주면 간단하게 해결된다. 필자처럼 <code class="language-plaintext highlighter-rouge">special token</code> 을 추가해 사용하다 해당 에러가 발생하는 상황이라면 새로운 토큰이 추가된 토크나이저의 길이를 다시 측정한 뒤 값을 <code class="language-plaintext highlighter-rouge">resize_token_embeddings</code> 메서드에 전달해 <code class="language-plaintext highlighter-rouge">nn.Embedding</code>을 업데이트 해주면 된다.</p>]]></content><author><name>qcqced</name><email>qcqced123@gmail.com</email></author><category term="Framework &amp; Library" /><category term="Pytorch" /><category term="Dimension Mismatch" /><category term="nn.Embedding" /><category term="CUDA" /><category term="Error Handling" /><summary type="html"><![CDATA[Pytorch Error: Mis-match between pre-defined dimension and input dimension]]></summary></entry><entry><title type="html">🎲 RuntimeError: CUDA error: device-side assert triggered</title><link href="http://localhost:4000/framework-library/mismatch-dimension" rel="alternate" type="text/html" title="🎲 RuntimeError: CUDA error: device-side assert triggered" /><published>2023-07-17T00:00:00+09:00</published><updated>2023-07-18T07:00:00+09:00</updated><id>http://localhost:4000/framework-library/dim_mismatch</id><content type="html" xml:base="http://localhost:4000/framework-library/mismatch-dimension"><![CDATA[<h3 id="-사전에-정의-입출력-차원--실제-입출력-차원"><code class="language-plaintext highlighter-rouge">😵 사전에 정의 입출력 차원 ≠ 실제 입출력 차원</code></h3>

<p>다양한 원인이 있다고 알려져 있는 에러지만, 필자의 경우 위 에러는 사전에 정의한 데이터의 입출력 차원과 실제 입출력 데이터 차원이 서로 상이할 때 발생했다. 하지만 원인을 확실히 특정하고 싶다면 아래 예시 코드를 먼저 추가한 뒤, 다시 한 번 에러 로그를 확인해보길 권장한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'CUDA_LAUNCH_BLOCKING'</span><span class="p">]</span> <span class="o">=</span> <span class="s">"1"</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="s">"CUDA_VISIBLE_DEVICES"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"0"</span>
</code></pre></div></div>
<p>예시 코드처럼 환경변수를 추가하면 에러가 어느 부분에서 발생했는지 로그가 좀 더 구체적으로 나온다. 거의 대부분이 입출력 차원 문제일테니 귀찮으면 바로 차원을 수정하도록 하자.</p>]]></content><author><name>qcqced</name><email>qcqced123@gmail.com</email></author><category term="Framework &amp; Library" /><category term="Pytorch" /><category term="Dimension Mismatch" /><category term="CUDA" /><category term="Error Handling" /><summary type="html"><![CDATA[Pytorch Error: Mis-match between pre-defined dimension and input dimension]]></summary></entry><entry><title type="html">🚚 RuntimeError: stack expects each tensor to be equal size, but got [32] at entry 0 and [24] at entry 1</title><link href="http://localhost:4000/framework-library/dataloader-collatefn" rel="alternate" type="text/html" title="🚚 RuntimeError: stack expects each tensor to be equal size, but got [32] at entry 0 and [24] at entry 1" /><published>2023-07-11T00:00:00+09:00</published><updated>2023-07-12T13:00:00+09:00</updated><id>http://localhost:4000/framework-library/dataloader-collate</id><content type="html" xml:base="http://localhost:4000/framework-library/dataloader-collatefn"><![CDATA[<h3 id="-가변-길이의-텐서를-데이터로더에-전달하는-경우-"><code class="language-plaintext highlighter-rouge">📏 가변 길이의 텐서를 데이터로더에 전달하는 경우 </code></h3>

<p>커스텀 데이터 클래스와 데이터로더를 통해 반환되는 데이터 인스턴스의 텐서 크기가 일정하지 않아 발생하는 에러다. 특히 자연어 처리에서 자주 찾아 볼 수 있는데 데이터로더 객체 선언 시, 매개변수 옵션 중에 <code class="language-plaintext highlighter-rouge">collate_fn=collate</code> 를 추가해주면 해결 가능한 에러다. 이 때 매개변수 <code class="language-plaintext highlighter-rouge">collate_fn</code> 에 전달하는 값(메서드)은 사용자가 직접 정의해줘야 한다. 허깅페이스 라이브리러에 상황에 맞게 미리 제작된 <code class="language-plaintext highlighter-rouge">collate</code> 메서드를 지원해주고 있기 때문에 잘 이용하면 된다. 필자의 경우에는 커스텀으로 직접 정의한 메서드, 객체를 사용하고 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 데이터 로더 예시
</span><span class="n">loader_train</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
            <span class="n">train_dataset</span><span class="p">,</span>
            <span class="n">batch_size</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="n">batch_size</span><span class="p">,</span>
            <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">worker_init_fn</span><span class="o">=</span><span class="n">seed_worker</span><span class="p">,</span>
            <span class="n">collate_fn</span><span class="o">=</span><span class="n">MiniBatchCollate</span><span class="p">,</span>  <span class="c1"># 여기에 사용하려는 collate function 혹은 객체를 전달하자!!
</span>            <span class="n">generator</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">generator</span><span class="p">,</span>
            <span class="n">num_workers</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="n">num_workers</span><span class="p">,</span>
            <span class="n">pin_memory</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">drop_last</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="p">)</span>

<span class="c1"># collate 메서드 예시: 
</span><span class="k">class</span> <span class="nc">MiniBatchCollate</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="s">"""
    Collate class for torch.utils.data.DataLoader  
    This class object to use variable data such as NLP text sequence
    If you use static padding with AutoTokenizer, you don't need this class 
    But if you use dynamic padding with AutoTokenizer, you must use this class object &amp; call
    Args:
        batch: data instance from torch.utils.data.DataSet
    """</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">batch</span><span class="p">:</span> <span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">DataLoader</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">batch</span> <span class="o">=</span> <span class="n">batch</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">dict</span><span class="p">[</span><span class="n">Tensor</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">],</span> <span class="n">Tensor</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">]:</span>
        <span class="n">inputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">position_list</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">batch</span>
        <span class="n">labels</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">rnn</span><span class="p">.</span><span class="n">pad_sequence</span><span class="p">(</span>
            <span class="n">labels</span><span class="p">,</span>
            <span class="n">batch_first</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">padding_value</span><span class="o">=-</span><span class="mi">1</span>
        <span class="p">)</span>
        <span class="n">position_list</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">rnn</span><span class="p">.</span><span class="n">pad_sequence</span><span class="p">(</span>
            <span class="n">position_list</span><span class="p">,</span>
            <span class="n">batch_first</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">padding_value</span><span class="o">=-</span><span class="mi">1</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">labels</span><span class="p">,</span> <span class="n">position_list</span>

<span class="k">def</span> <span class="nf">collate</span><span class="p">(</span><span class="n">inputs</span><span class="p">):</span>
    <span class="s">"""
    slice input sequence by maximum length sequence in mini-batch, used for speed up training
    if you want slice other variable such as label feature, you can add param on them
    This Function should be used after DataLoader return mini-batch instance
    Args:
        inputs: list of dict, dict has keys of "input_ids", "attention_mask", "token_type_ids"    
    """</span>
    <span class="n">mask_len</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">inputs</span><span class="p">[</span><span class="s">"attention_mask"</span><span class="p">].</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">).</span><span class="nb">max</span><span class="p">())</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">inputs</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">inputs</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">[</span><span class="n">k</span><span class="p">][:,</span> <span class="p">:</span><span class="n">mask_len</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">inputs</span>
</code></pre></div></div>

<p>일반적으로 <code class="language-plaintext highlighter-rouge">collate</code> 는 메서드로 구현해서 사용하지만, 위 코드처럼 객체로 구현하고 내부에 <code class="language-plaintext highlighter-rouge">__call__</code> 를 정의해 사용하는 방법도 있다. 필자 역시 단일 메서드 형태를 계속해서 사용하다가 최근 들어 에폭 한 번에 서로 다른 데이터 세트 및 모델을 훈련 시켜야 하는 상황을 마주한 이후 객체 형태로 다시 구현해 사용하고 있다.</p>

<p>한편 예시 코드 가장 마지막 <code class="language-plaintext highlighter-rouge">collate</code> 메서드는 입력 시퀀스가 huggingface의 <code class="language-plaintext highlighter-rouge">AutoTokenizer.encode_plus</code> 를 이용해 사용자 지정 <code class="language-plaintext highlighter-rouge">max_len</code>까지 패딩을 마친 상태라는 가정하에 구현 되었다. 해당 메서드는 위에 발생한 에러를 해결하기 위함보다, 미니 배치에 속한 전체 데이터 중에서 최대 길이가 사용자 지정 <code class="language-plaintext highlighter-rouge">max_len</code>까지 미치지 못하는데 패딩이 된 경우에 사용하기 위해 만들었다. 불필요한 패딩을 <code class="language-plaintext highlighter-rouge">trucation</code> 하여 뉴럴 네트워크의 학습 속도를 높이기 위함이다. 해당 메서드는 포스팅의 제목에 달린 에러를 해결하는데 사용할 수는 없지만  <code class="language-plaintext highlighter-rouge">collate</code> 기능을 언급하는 김에 생각이나 같이 정리해봤다. 이 메서드는 <code class="language-plaintext highlighter-rouge">torch.utils.data.DataLoader</code> 의 인자가 아니라, 메인 학습 루프 내부에 사용한다. 다시 말해, 데이터로더가 배치 인스턴스를 반환한 다음 사용하면 된다는 것이다. 패딩방식과 <code class="language-plaintext highlighter-rouge">collate</code> 기능에 대한 자세한 설명은 다른 포스팅에서 다루도록 하겠다.</p>

<p>반면 <code class="language-plaintext highlighter-rouge">MiniBatchCollate</code> 객체는 <code class="language-plaintext highlighter-rouge">torch.utils.data.DataLoader</code> 의 <code class="language-plaintext highlighter-rouge">collate_fn</code> 인자에 전달하면 된다. 필자의 경우는 <code class="language-plaintext highlighter-rouge">Dynamic Padding</code> 기법을 사용하기 때문에 미니 배치 내부의 인스턴스들이 서로 다른 시퀀스 길이를 갖는 경우가 발생한다. 데이터로더는 미니 배치에 속하는 데이터의 길이가 통일되지 않으면 배치 단위로 데이터를 묶을 수 없게 된다. 따라서 미니 배치 단위의 길이 통일을 위해 <code class="language-plaintext highlighter-rouge">torch.nn.utils.rnn.pad_sequence</code> 메서드를 사용한다. 이 메서드는 입력한 미니 배치 데이터 중에서 가장 긴 시퀀스를 기준으로 모든 데이터 길이를 통일한다. <code class="language-plaintext highlighter-rouge">batch_first=True</code> 를 주목하자. 이 인자를 <code class="language-plaintext highlighter-rouge">False</code> 로 설정할 경우, 배치 차원이 맨 앞이 아니라 중간에 정의된다. 일반적으로는 배치 차원을 맨 앞에 두는 워크플로우를 사용하기 때문에 꼭 해당 인자를 <code class="language-plaintext highlighter-rouge">True</code> 로 설정하고 사용하자.</p>]]></content><author><name>qcqced</name><email>qcqced123@gmail.com</email></author><category term="Framework &amp; Library" /><category term="Pytorch" /><category term="DataLoader" /><category term="collate_fn" /><category term="Dynamic Padding" /><category term="Padding" /><summary type="html"><![CDATA[Pytorch Error: Dataloader get non-equal size of tensor]]></summary></entry><entry><title type="html">🖥️ RuntimeError: Attempting to deserialize object on CUDA device 2 but torch.cuda.device_count() is 1. Please use torch.load with map_location to map your storages to an existing device</title><link href="http://localhost:4000/framework-library/cuda-num/" rel="alternate" type="text/html" title="🖥️ RuntimeError: Attempting to deserialize object on CUDA device 2 but torch.cuda.device_count() is 1. Please use torch.load with map_location to map your storages to an existing device" /><published>2023-07-11T00:00:00+09:00</published><updated>2023-07-11T13:00:00+09:00</updated><id>http://localhost:4000/framework-library/cuda-device-num</id><content type="html" xml:base="http://localhost:4000/framework-library/cuda-num/"><![CDATA[<h3 id="-pytorch-잘못된-cuda-장치-번호-사용-문제"><code class="language-plaintext highlighter-rouge">🔢 Pytorch 잘못된 CUDA 장치 번호 사용 문제</code></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span><span class="p">.</span><span class="n">load_state_dict</span><span class="p">(</span>
    <span class="n">torch</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">map_location</span><span class="o">=</span><span class="s">'cuda:0'</span><span class="p">)</span> 
<span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">pretrained model</code>, <code class="language-plaintext highlighter-rouge">weight</code>를 <code class="language-plaintext highlighter-rouge">load</code>하거나 혹은 훈련 루프를 <code class="language-plaintext highlighter-rouge">resume</code> 을 위해 <code class="language-plaintext highlighter-rouge">torch.load()</code> 를 사용할 때 마주할 수 있는 에러 로그다. 발생하는 이유는 현재 <code class="language-plaintext highlighter-rouge">GPU</code> 에 할당하려는 모델이 사전 훈련때 할당 되었던 <code class="language-plaintext highlighter-rouge">GPU</code> 번호와 현재 할당하려는 <code class="language-plaintext highlighter-rouge">GPU</code> 번호가 서로 상이하기 때문이다. 따라서 <code class="language-plaintext highlighter-rouge">torch.load</code>의 <code class="language-plaintext highlighter-rouge">map_location</code>인자에 현재 자신이 사용하려는 <code class="language-plaintext highlighter-rouge">GPU</code> 번호를 입력해주자.</p>]]></content><author><name>qcqced</name><email>qcqced123@gmail.com</email></author><category term="Framework &amp; Library" /><category term="Pytorch" /><category term="CUDA" /><summary type="html"><![CDATA[Pytorch Error: Wrong CUDA Device Number]]></summary></entry></feed>